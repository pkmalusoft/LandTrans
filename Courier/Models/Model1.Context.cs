//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LTMSV2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities1 : DbContext
    {
        public Entities1()
            : base("name=Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AcAnalysisHeadAllocation> AcAnalysisHeadAllocations { get; set; }
        public virtual DbSet<AcBankDetail> AcBankDetails { get; set; }
        public virtual DbSet<AcCategory> AcCategories { get; set; }
        public virtual DbSet<AcCompany> AcCompanies { get; set; }
        public virtual DbSet<AcFinancialYear> AcFinancialYears { get; set; }
        public virtual DbSet<AcGroup> AcGroups { get; set; }
        public virtual DbSet<AcHead> AcHeads { get; set; }
        public virtual DbSet<AcHeadAssign> AcHeadAssigns { get; set; }
        public virtual DbSet<AcHeadControl> AcHeadControls { get; set; }
        public virtual DbSet<AcJournalDetail> AcJournalDetails { get; set; }
        public virtual DbSet<AcJournalMaster> AcJournalMasters { get; set; }
        public virtual DbSet<AcMemoAnalysisHeadAllocation> AcMemoAnalysisHeadAllocations { get; set; }
        public virtual DbSet<AcMemoBankDetail> AcMemoBankDetails { get; set; }
        public virtual DbSet<AcMemoJournalDetail> AcMemoJournalDetails { get; set; }
        public virtual DbSet<AcMemoJournalMaster> AcMemoJournalMasters { get; set; }
        public virtual DbSet<AcOpeningMaster> AcOpeningMasters { get; set; }
        public virtual DbSet<AcOPInvoiceDetail> AcOPInvoiceDetails { get; set; }
        public virtual DbSet<AcOPInvoiceMaster> AcOPInvoiceMasters { get; set; }
        public virtual DbSet<AcType> AcTypes { get; set; }
        public virtual DbSet<AgentMaster> AgentMasters { get; set; }
        public virtual DbSet<AnalysisGroup> AnalysisGroups { get; set; }
        public virtual DbSet<AnalysisHead> AnalysisHeads { get; set; }
        public virtual DbSet<AreaMaster> AreaMasters { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<AWBIssue> AWBIssues { get; set; }
        public virtual DbSet<AWBIssueDetail> AWBIssueDetails { get; set; }
        public virtual DbSet<AWBPending> AWBPendings { get; set; }
        public virtual DbSet<AWBSetting> AWBSettings { get; set; }
        public virtual DbSet<AWBStatu> AWBStatus { get; set; }
        public virtual DbSet<AWBStock> AWBStocks { get; set; }
        public virtual DbSet<AWBStockDetail> AWBStockDetails { get; set; }
        public virtual DbSet<AWBTrackStatu> AWBTrackStatus { get; set; }
        public virtual DbSet<BusinessType> BusinessTypes { get; set; }
        public virtual DbSet<CargoDescription> CargoDescriptions { get; set; }
        public virtual DbSet<CargoInScan> CargoInScans { get; set; }
        public virtual DbSet<CargoInscanDetail> CargoInscanDetails { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<ColoaderAllocation> ColoaderAllocations { get; set; }
        public virtual DbSet<ColoaderCostDetail> ColoaderCostDetails { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<Content> Contents { get; set; }
        public virtual DbSet<CostType> CostTypes { get; set; }
        public virtual DbSet<CountryMaster> CountryMasters { get; set; }
        public virtual DbSet<CourierDescription> CourierDescriptions { get; set; }
        public virtual DbSet<CourierMovement> CourierMovements { get; set; }
        public virtual DbSet<CourierSchedule> CourierSchedules { get; set; }
        public virtual DbSet<CourierService> CourierServices { get; set; }
        public virtual DbSet<CourierStatu> CourierStatus { get; set; }
        public virtual DbSet<CreditNote> CreditNotes { get; set; }
        public virtual DbSet<CurrencyMaster> CurrencyMasters { get; set; }
        public virtual DbSet<CustomerContract> CustomerContracts { get; set; }
        public virtual DbSet<CustomerEnquiry> CustomerEnquiries { get; set; }
        public virtual DbSet<CustomerInvoice> CustomerInvoices { get; set; }
        public virtual DbSet<CustomerInvoiceDetail> CustomerInvoiceDetails { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<CustomerMultiContract> CustomerMultiContracts { get; set; }
        public virtual DbSet<CustomerNotification> CustomerNotifications { get; set; }
        public virtual DbSet<CustomerRate> CustomerRates { get; set; }
        public virtual DbSet<CustomerRateAssign> CustomerRateAssigns { get; set; }
        public virtual DbSet<CustomerRateDet> CustomerRateDets { get; set; }
        public virtual DbSet<CustomerRateType> CustomerRateTypes { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<CustSuppJV> CustSuppJVs { get; set; }
        public virtual DbSet<DebitNoteDetail> DebitNoteDetails { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<DRR> DRRs { get; set; }
        public virtual DbSet<DRRConsignment> DRRConsignments { get; set; }
        public virtual DbSet<DRRInvoice> DRRInvoices { get; set; }
        public virtual DbSet<DRRPKPCAD> DRRPKPCADs { get; set; }
        public virtual DbSet<DRRRecPay> DRRRecPays { get; set; }
        public virtual DbSet<DR> DRS { get; set; }
        public virtual DbSet<DRSDetail> DRSDetails { get; set; }
        public virtual DbSet<DRSEmployeeID> DRSEmployeeIDs { get; set; }
        public virtual DbSet<DRSExpense> DRSExpenses { get; set; }
        public virtual DbSet<DRSReceipt> DRSReceipts { get; set; }
        public virtual DbSet<EmployeeMaster> EmployeeMasters { get; set; }
        public virtual DbSet<Expense> Expenses { get; set; }
        public virtual DbSet<ExpenseDetail> ExpenseDetails { get; set; }
        public virtual DbSet<ExportShipment> ExportShipments { get; set; }
        public virtual DbSet<ExportShipmentDetail> ExportShipmentDetails { get; set; }
        public virtual DbSet<FAInvoice> FAInvoices { get; set; }
        public virtual DbSet<FAInvoiceDetail> FAInvoiceDetails { get; set; }
        public virtual DbSet<ForwardingAgentMaster> ForwardingAgentMasters { get; set; }
        public virtual DbSet<ForwardingAgentRate> ForwardingAgentRates { get; set; }
        public virtual DbSet<ForwardingAgentRateDet> ForwardingAgentRateDets { get; set; }
        public virtual DbSet<FuelSurcharge> FuelSurcharges { get; set; }
        public virtual DbSet<GeneralSetup> GeneralSetups { get; set; }
        public virtual DbSet<GeneralSetupType> GeneralSetupTypes { get; set; }
        public virtual DbSet<HoldRelease> HoldReleases { get; set; }
        public virtual DbSet<Import> Imports { get; set; }
        public virtual DbSet<ImportAgentMaster> ImportAgentMasters { get; set; }
        public virtual DbSet<ImportShipment> ImportShipments { get; set; }
        public virtual DbSet<ImportShipmentDetail> ImportShipmentDetails { get; set; }
        public virtual DbSet<InScan> InScans { get; set; }
        public virtual DbSet<InScanDomestic> InScanDomestics { get; set; }
        public virtual DbSet<InScanInternational> InScanInternationals { get; set; }
        public virtual DbSet<InScanInternationalDeatil> InScanInternationalDeatils { get; set; }
        public virtual DbSet<InscanOtherCharge> InscanOtherCharges { get; set; }
        public virtual DbSet<InScantransfer> InScantransfers { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemUnit> ItemUnits { get; set; }
        public virtual DbSet<JobEnquiry> JobEnquiries { get; set; }
        public virtual DbSet<JobEnquiryDetail> JobEnquiryDetails { get; set; }
        public virtual DbSet<LocationMaster> LocationMasters { get; set; }
        public virtual DbSet<Lock> Locks { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<Manifest> Manifests { get; set; }
        public virtual DbSet<MCInvoice> MCInvoices { get; set; }
        public virtual DbSet<MCPayment> MCPayments { get; set; }
        public virtual DbSet<MemberUserIdLink> MemberUserIdLinks { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuAccessLevel> MenuAccessLevels { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<OtherCharge> OtherCharges { get; set; }
        public virtual DbSet<OtherChargeInvoice> OtherChargeInvoices { get; set; }
        public virtual DbSet<OtherChargeInvoiceDetail> OtherChargeInvoiceDetails { get; set; }
        public virtual DbSet<OtherChargesType> OtherChargesTypes { get; set; }
        public virtual DbSet<OthereChargesType> OthereChargesTypes { get; set; }
        public virtual DbSet<OutstandingInvoiceDetail> OutstandingInvoiceDetails { get; set; }
        public virtual DbSet<PageControlField> PageControlFields { get; set; }
        public virtual DbSet<PageControlMaster> PageControlMasters { get; set; }
        public virtual DbSet<Pallet> Pallets { get; set; }
        public virtual DbSet<PaymentsTerm> PaymentsTerms { get; set; }
        public virtual DbSet<PaymentTerm> PaymentTerms { get; set; }
        public virtual DbSet<Period> Periods { get; set; }
        public virtual DbSet<PeriodType> PeriodTypes { get; set; }
        public virtual DbSet<PickUpRequestStatu> PickUpRequestStatus { get; set; }
        public virtual DbSet<POD> PODs { get; set; }
        public virtual DbSet<PODSignature> PODSignatures { get; set; }
        public virtual DbSet<PrepaidAWB> PrepaidAWBs { get; set; }
        public virtual DbSet<PrepaidAwbDetail> PrepaidAwbDetails { get; set; }
        public virtual DbSet<PrepaidAWBInvoice> PrepaidAWBInvoices { get; set; }
        public virtual DbSet<PrepaidAWBInvoiceDetail> PrepaidAWBInvoiceDetails { get; set; }
        public virtual DbSet<ProductCategoryMaster> ProductCategoryMasters { get; set; }
        public virtual DbSet<ProductItemMaster> ProductItemMasters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<PurchaseInvoice> PurchaseInvoices { get; set; }
        public virtual DbSet<PurchaseInvoiceDetail> PurchaseInvoiceDetails { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }
        public virtual DbSet<QuickInScanDetail> QuickInScanDetails { get; set; }
        public virtual DbSet<QuickInscanMaster> QuickInscanMasters { get; set; }
        public virtual DbSet<Quotation> Quotations { get; set; }
        public virtual DbSet<QuotationDetail> QuotationDetails { get; set; }
        public virtual DbSet<RecPay> RecPays { get; set; }
        public virtual DbSet<RecPayDetail> RecPayDetails { get; set; }
        public virtual DbSet<RequestType> RequestTypes { get; set; }
        public virtual DbSet<ReturnDetail> ReturnDetails { get; set; }
        public virtual DbSet<RevenueType> RevenueTypes { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<SalesInvoice> SalesInvoices { get; set; }
        public virtual DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; }
        public virtual DbSet<StaffNote> StaffNotes { get; set; }
        public virtual DbSet<StockDetail> StockDetails { get; set; }
        public virtual DbSet<SubStatu> SubStatus { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierType> SupplierTypes { get; set; }
        public virtual DbSet<SystemControlSequence> SystemControlSequences { get; set; }
        public virtual DbSet<TaxConfiguration> TaxConfigurations { get; set; }
        public virtual DbSet<tblAgent> tblAgents { get; set; }
        public virtual DbSet<tblAgentCollectionRate> tblAgentCollectionRates { get; set; }
        public virtual DbSet<tblAgentCollectionRateDetail> tblAgentCollectionRateDetails { get; set; }
        public virtual DbSet<tblAgentDeliveryRate> tblAgentDeliveryRates { get; set; }
        public virtual DbSet<tblAgentDeliveryRateDetail> tblAgentDeliveryRateDetails { get; set; }
        public virtual DbSet<tblAgentInvoice> tblAgentInvoices { get; set; }
        public virtual DbSet<tblAgentInvoiceDetail> tblAgentInvoiceDetails { get; set; }
        public virtual DbSet<tblAgentRecPay> tblAgentRecPays { get; set; }
        public virtual DbSet<tblAgentRecPayDetail> tblAgentRecPayDetails { get; set; }
        public virtual DbSet<tblCustomerAdjustment> tblCustomerAdjustments { get; set; }
        public virtual DbSet<tblCustomerAdjustmentDetail> tblCustomerAdjustmentDetails { get; set; }
        public virtual DbSet<tblDepot> tblDepots { get; set; }
        public virtual DbSet<tblDocumentType> tblDocumentTypes { get; set; }
        public virtual DbSet<tblPaymentMode> tblPaymentModes { get; set; }
        public virtual DbSet<tblPurchaseInvoiceOtherCharge> tblPurchaseInvoiceOtherCharges { get; set; }
        public virtual DbSet<tblSalesInvoiceOtherCharge> tblSalesInvoiceOtherCharges { get; set; }
        public virtual DbSet<tblShipmentType> tblShipmentTypes { get; set; }
        public virtual DbSet<tblStatusType> tblStatusTypes { get; set; }
        public virtual DbSet<tblStock> tblStocks { get; set; }
        public virtual DbSet<tblStockIssue> tblStockIssues { get; set; }
        public virtual DbSet<tblStockIssueDetail> tblStockIssueDetails { get; set; }
        public virtual DbSet<tblSupplierAdjustment> tblSupplierAdjustments { get; set; }
        public virtual DbSet<tblSupplierAdjustmentDetail> tblSupplierAdjustmentDetails { get; set; }
        public virtual DbSet<tblTaxConfiguration> tblTaxConfigurations { get; set; }
        public virtual DbSet<tblTransfer> tblTransfers { get; set; }
        public virtual DbSet<tblTransitStationMaster> tblTransitStationMasters { get; set; }
        public virtual DbSet<tblVehicleRequiredType> tblVehicleRequiredTypes { get; set; }
        public virtual DbSet<TypeOfGood> TypeOfGoods { get; set; }
        public virtual DbSet<UMDesignation> UMDesignations { get; set; }
        public virtual DbSet<UMForm> UMForms { get; set; }
        public virtual DbSet<UMGroupAccess> UMGroupAccesses { get; set; }
        public virtual DbSet<UMGroupMaster> UMGroupMasters { get; set; }
        public virtual DbSet<UMGroupModule> UMGroupModules { get; set; }
        public virtual DbSet<UMModule> UMModules { get; set; }
        public virtual DbSet<UMUserMaster> UMUserMasters { get; set; }
        public virtual DbSet<UMUserMonitor> UMUserMonitors { get; set; }
        public virtual DbSet<UserInBranch> UserInBranches { get; set; }
        public virtual DbSet<UserRegistration> UserRegistrations { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<VehicleMaintenance> VehicleMaintenances { get; set; }
        public virtual DbSet<WorkCategory> WorkCategories { get; set; }
        public virtual DbSet<WorkOrderMaster> WorkOrderMasters { get; set; }
        public virtual DbSet<ZoneCategory> ZoneCategories { get; set; }
        public virtual DbSet<ZoneChart> ZoneCharts { get; set; }
        public virtual DbSet<ZoneChartDetail> ZoneChartDetails { get; set; }
        public virtual DbSet<ZoneMaster> ZoneMasters { get; set; }
        public virtual DbSet<ParcelType> ParcelTypes { get; set; }
        public virtual DbSet<CODReceipt> CODReceipts { get; set; }
        public virtual DbSet<CODReceiptDetail> CODReceiptDetails { get; set; }
        public virtual DbSet<AccountHeadControl> AccountHeadControls { get; set; }
        public virtual DbSet<SupplierMaster> SupplierMasters { get; set; }
        public virtual DbSet<DocumentSetup> DocumentSetups { get; set; }
        public virtual DbSet<ItemMaster> ItemMasters { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<RouteOrder> RouteOrders { get; set; }
        public virtual DbSet<BranchMaster> BranchMasters { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<CreditNoteDetail> CreditNoteDetails { get; set; }
        public virtual DbSet<Transit> Transits { get; set; }
        public virtual DbSet<TransportMode> TransportModes { get; set; }
        public virtual DbSet<ImpExpDocumentMaster> ImpExpDocumentMasters { get; set; }
        public virtual DbSet<VehicleType> VehicleTypes { get; set; }
        public virtual DbSet<RevenueCostMaster> RevenueCostMasters { get; set; }
        public virtual DbSet<PortMaster> PortMasters { get; set; }
        public virtual DbSet<RevenueUpdateDetail> RevenueUpdateDetails { get; set; }
        public virtual DbSet<RevenueUpdateMaster> RevenueUpdateMasters { get; set; }
        public virtual DbSet<VehicleMaster> VehicleMasters { get; set; }
        public virtual DbSet<RouteMaster> RouteMasters { get; set; }
        public virtual DbSet<InScanMaster> InScanMasters { get; set; }
        public virtual DbSet<CostUpdateDetail> CostUpdateDetails { get; set; }
        public virtual DbSet<CostUpdateMaster> CostUpdateMasters { get; set; }
        public virtual DbSet<DriverMaster> DriverMasters { get; set; }
        public virtual DbSet<SupplierInvoiceDetail> SupplierInvoiceDetails { get; set; }
        public virtual DbSet<SupplierInvoice> SupplierInvoices { get; set; }
        public virtual DbSet<DebitNote> DebitNotes { get; set; }
        public virtual DbSet<TruckDetail> TruckDetails { get; set; }
    
        [DbFunction("Entities1", "IDs")]
        public virtual IQueryable<IDs_Result> IDs(string list)
        {
            var listParameter = list != null ?
                new ObjectParameter("list", list) :
                new ObjectParameter("list", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<IDs_Result>("[Entities1].[IDs](@list)", listParameter);
        }
    
        [DbFunction("Entities1", "splitAwbNo")]
        public virtual IQueryable<splitAwbNo_Result> splitAwbNo(string delimited, string delimiter)
        {
            var delimitedParameter = delimited != null ?
                new ObjectParameter("delimited", delimited) :
                new ObjectParameter("delimited", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<splitAwbNo_Result>("[Entities1].[splitAwbNo](@delimited, @delimiter)", delimitedParameter, delimiterParameter);
        }
    
        [DbFunction("Entities1", "udf_SplitIn2Rows")]
        public virtual IQueryable<udf_SplitIn2Rows_Result> udf_SplitIn2Rows(string pInStrSource, string pInChrSeparator)
        {
            var pInStrSourceParameter = pInStrSource != null ?
                new ObjectParameter("PInStrSource", pInStrSource) :
                new ObjectParameter("PInStrSource", typeof(string));
    
            var pInChrSeparatorParameter = pInChrSeparator != null ?
                new ObjectParameter("pInChrSeparator", pInChrSeparator) :
                new ObjectParameter("pInChrSeparator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<udf_SplitIn2Rows_Result>("[Entities1].[udf_SplitIn2Rows](@PInStrSource, @pInChrSeparator)", pInStrSourceParameter, pInChrSeparatorParameter);
        }
    
        public virtual int AcAnalysisHeadAllocationDelete(string acAnalysisHeadAllocationIDs)
        {
            var acAnalysisHeadAllocationIDsParameter = acAnalysisHeadAllocationIDs != null ?
                new ObjectParameter("AcAnalysisHeadAllocationIDs", acAnalysisHeadAllocationIDs) :
                new ObjectParameter("AcAnalysisHeadAllocationIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcAnalysisHeadAllocationDelete", acAnalysisHeadAllocationIDsParameter);
        }
    
        public virtual int AcAnalysisHeadAllocationInsert(Nullable<int> acJournalDetailID, Nullable<int> analysisHeadID, Nullable<decimal> amount)
        {
            var acJournalDetailIDParameter = acJournalDetailID.HasValue ?
                new ObjectParameter("AcJournalDetailID", acJournalDetailID) :
                new ObjectParameter("AcJournalDetailID", typeof(int));
    
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcAnalysisHeadAllocationInsert", acJournalDetailIDParameter, analysisHeadIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<AcAnalysisHeadAllocationSelectByAcJournalDetailID_Result> AcAnalysisHeadAllocationSelectByAcJournalDetailID(Nullable<int> acJournalDetailID)
        {
            var acJournalDetailIDParameter = acJournalDetailID.HasValue ?
                new ObjectParameter("AcJournalDetailID", acJournalDetailID) :
                new ObjectParameter("AcJournalDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcAnalysisHeadAllocationSelectByAcJournalDetailID_Result>("AcAnalysisHeadAllocationSelectByAcJournalDetailID", acJournalDetailIDParameter);
        }
    
        public virtual ObjectResult<AcBankDetailsByAcJournalID_Result> AcBankDetailsByAcJournalID(Nullable<int> acJournalID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcBankDetailsByAcJournalID_Result>("AcBankDetailsByAcJournalID", acJournalIDParameter);
        }
    
        public virtual int AcBankDetailsUpdate(string acBankDetailIDs, string selectedAcBankDetailID)
        {
            var acBankDetailIDsParameter = acBankDetailIDs != null ?
                new ObjectParameter("AcBankDetailIDs", acBankDetailIDs) :
                new ObjectParameter("AcBankDetailIDs", typeof(string));
    
            var selectedAcBankDetailIDParameter = selectedAcBankDetailID != null ?
                new ObjectParameter("SelectedAcBankDetailID", selectedAcBankDetailID) :
                new ObjectParameter("SelectedAcBankDetailID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcBankDetailsUpdate", acBankDetailIDsParameter, selectedAcBankDetailIDParameter);
        }
    
        public virtual int AcCategoryDelete(string acCategoryIDs)
        {
            var acCategoryIDsParameter = acCategoryIDs != null ?
                new ObjectParameter("AcCategoryIDs", acCategoryIDs) :
                new ObjectParameter("AcCategoryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCategoryDelete", acCategoryIDsParameter);
        }
    
        public virtual int AcCategoryInsert(string acCategory)
        {
            var acCategoryParameter = acCategory != null ?
                new ObjectParameter("AcCategory", acCategory) :
                new ObjectParameter("AcCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCategoryInsert", acCategoryParameter);
        }
    
        public virtual ObjectResult<AcCategorySelect_Result> AcCategorySelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCategorySelect_Result>("AcCategorySelect");
        }
    
        public virtual ObjectResult<AcCategorySelectAll_Result> AcCategorySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCategorySelectAll_Result>("AcCategorySelectAll");
        }
    
        public virtual ObjectResult<AcCategorySelectByID_Result> AcCategorySelectByID(Nullable<int> acCategoryID)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCategorySelectByID_Result>("AcCategorySelectByID", acCategoryIDParameter);
        }
    
        public virtual int AcCategoryUpdate(Nullable<int> acCategoryID, string acCategory)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var acCategoryParameter = acCategory != null ?
                new ObjectParameter("AcCategory", acCategory) :
                new ObjectParameter("AcCategory", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCategoryUpdate", acCategoryIDParameter, acCategoryParameter);
        }
    
        public virtual int AcCompanyInsert(string acCompany, string address1, string address2, string address3, string phone, string eMail, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> locationID, string keyPerson, Nullable<int> designationID, string phoneNo1, string phoneNo2, string phoneNo3, string phoneNo4, string mobileNo1, string mobileNo2, string website, string companyPrefix, Nullable<int> currencyID, Nullable<bool> isAWBAutoGenrated, string aWBFormate)
        {
            var acCompanyParameter = acCompany != null ?
                new ObjectParameter("AcCompany", acCompany) :
                new ObjectParameter("AcCompany", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var keyPersonParameter = keyPerson != null ?
                new ObjectParameter("KeyPerson", keyPerson) :
                new ObjectParameter("KeyPerson", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var phoneNo1Parameter = phoneNo1 != null ?
                new ObjectParameter("PhoneNo1", phoneNo1) :
                new ObjectParameter("PhoneNo1", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("PhoneNo2", phoneNo2) :
                new ObjectParameter("PhoneNo2", typeof(string));
    
            var phoneNo3Parameter = phoneNo3 != null ?
                new ObjectParameter("PhoneNo3", phoneNo3) :
                new ObjectParameter("PhoneNo3", typeof(string));
    
            var phoneNo4Parameter = phoneNo4 != null ?
                new ObjectParameter("PhoneNo4", phoneNo4) :
                new ObjectParameter("PhoneNo4", typeof(string));
    
            var mobileNo1Parameter = mobileNo1 != null ?
                new ObjectParameter("MobileNo1", mobileNo1) :
                new ObjectParameter("MobileNo1", typeof(string));
    
            var mobileNo2Parameter = mobileNo2 != null ?
                new ObjectParameter("MobileNo2", mobileNo2) :
                new ObjectParameter("MobileNo2", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var companyPrefixParameter = companyPrefix != null ?
                new ObjectParameter("CompanyPrefix", companyPrefix) :
                new ObjectParameter("CompanyPrefix", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isAWBAutoGenratedParameter = isAWBAutoGenrated.HasValue ?
                new ObjectParameter("IsAWBAutoGenrated", isAWBAutoGenrated) :
                new ObjectParameter("IsAWBAutoGenrated", typeof(bool));
    
            var aWBFormateParameter = aWBFormate != null ?
                new ObjectParameter("AWBFormate", aWBFormate) :
                new ObjectParameter("AWBFormate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCompanyInsert", acCompanyParameter, address1Parameter, address2Parameter, address3Parameter, phoneParameter, eMailParameter, countryIDParameter, cityIDParameter, locationIDParameter, keyPersonParameter, designationIDParameter, phoneNo1Parameter, phoneNo2Parameter, phoneNo3Parameter, phoneNo4Parameter, mobileNo1Parameter, mobileNo2Parameter, websiteParameter, companyPrefixParameter, currencyIDParameter, isAWBAutoGenratedParameter, aWBFormateParameter);
        }
    
        public virtual int AcCompanySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCompanySelectAll");
        }
    
        public virtual ObjectResult<AcCompanySelectAll1_Result> AcCompanySelectAll1(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCompanySelectAll1_Result>("AcCompanySelectAll1", branchIDParameter);
        }
    
        public virtual ObjectResult<AcCompanySelectByID_Result> AcCompanySelectByID(Nullable<int> acCompanyID)
        {
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcCompanySelectByID_Result>("AcCompanySelectByID", acCompanyIDParameter);
        }
    
        public virtual int AcCompanyUpdate(Nullable<int> acCompanyID, string acCompany, string address1, string address2, string address3, string phone, string eMail, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> locationID, string keyPerson, Nullable<int> designationID, string phoneNo1, string phoneNo2, string phoneNo3, string phoneNo4, string mobileNo1, string mobileNo2, string website, string companyPrefix, Nullable<int> currencyID, Nullable<bool> isAWBAutoGenrated, string aWBFormat)
        {
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var acCompanyParameter = acCompany != null ?
                new ObjectParameter("AcCompany", acCompany) :
                new ObjectParameter("AcCompany", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var keyPersonParameter = keyPerson != null ?
                new ObjectParameter("KeyPerson", keyPerson) :
                new ObjectParameter("KeyPerson", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var phoneNo1Parameter = phoneNo1 != null ?
                new ObjectParameter("PhoneNo1", phoneNo1) :
                new ObjectParameter("PhoneNo1", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("PhoneNo2", phoneNo2) :
                new ObjectParameter("PhoneNo2", typeof(string));
    
            var phoneNo3Parameter = phoneNo3 != null ?
                new ObjectParameter("PhoneNo3", phoneNo3) :
                new ObjectParameter("PhoneNo3", typeof(string));
    
            var phoneNo4Parameter = phoneNo4 != null ?
                new ObjectParameter("PhoneNo4", phoneNo4) :
                new ObjectParameter("PhoneNo4", typeof(string));
    
            var mobileNo1Parameter = mobileNo1 != null ?
                new ObjectParameter("MobileNo1", mobileNo1) :
                new ObjectParameter("MobileNo1", typeof(string));
    
            var mobileNo2Parameter = mobileNo2 != null ?
                new ObjectParameter("MobileNo2", mobileNo2) :
                new ObjectParameter("MobileNo2", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var companyPrefixParameter = companyPrefix != null ?
                new ObjectParameter("CompanyPrefix", companyPrefix) :
                new ObjectParameter("CompanyPrefix", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var isAWBAutoGenratedParameter = isAWBAutoGenrated.HasValue ?
                new ObjectParameter("IsAWBAutoGenrated", isAWBAutoGenrated) :
                new ObjectParameter("IsAWBAutoGenrated", typeof(bool));
    
            var aWBFormatParameter = aWBFormat != null ?
                new ObjectParameter("AWBFormat", aWBFormat) :
                new ObjectParameter("AWBFormat", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcCompanyUpdate", acCompanyIDParameter, acCompanyParameter, address1Parameter, address2Parameter, address3Parameter, phoneParameter, eMailParameter, countryIDParameter, cityIDParameter, locationIDParameter, keyPersonParameter, designationIDParameter, phoneNo1Parameter, phoneNo2Parameter, phoneNo3Parameter, phoneNo4Parameter, mobileNo1Parameter, mobileNo2Parameter, websiteParameter, companyPrefixParameter, currencyIDParameter, isAWBAutoGenratedParameter, aWBFormatParameter);
        }
    
        public virtual ObjectResult<AcFinancialYearSelect_Result> AcFinancialYearSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcFinancialYearSelect_Result>("AcFinancialYearSelect");
        }
    
        public virtual ObjectResult<AcFinancialYearSelectByID_Result> AcFinancialYearSelectByID(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcFinancialYearSelectByID_Result>("AcFinancialYearSelectByID", branchIDParameter);
        }
    
        public virtual int AcGroupDelete(string acGroupIDs)
        {
            var acGroupIDsParameter = acGroupIDs != null ?
                new ObjectParameter("AcGroupIDs", acGroupIDs) :
                new ObjectParameter("AcGroupIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupDelete", acGroupIDsParameter);
        }
    
        public virtual int AcGroupInsert(Nullable<int> acCategoryID, string acGroup, Nullable<int> parentID, Nullable<int> acCompanyID, Nullable<int> userID, Nullable<short> isGroupcodeAuto, string groupCode)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var acGroupParameter = acGroup != null ?
                new ObjectParameter("AcGroup", acGroup) :
                new ObjectParameter("AcGroup", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isGroupcodeAutoParameter = isGroupcodeAuto.HasValue ?
                new ObjectParameter("IsGroupcodeAuto", isGroupcodeAuto) :
                new ObjectParameter("IsGroupcodeAuto", typeof(short));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupInsert", acCategoryIDParameter, acGroupParameter, parentIDParameter, acCompanyIDParameter, userIDParameter, isGroupcodeAutoParameter, groupCodeParameter);
        }
    
        public virtual ObjectResult<AcGroupSelect_Result> AcGroupSelect(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelect_Result>("AcGroupSelect", branchIDParameter);
        }
    
        public virtual ObjectResult<AcGroupSelectAll_Result> AcGroupSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelectAll_Result>("AcGroupSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<AcGroupSelectByCategoryID_Result> AcGroupSelectByCategoryID(Nullable<int> acCategoryID, Nullable<int> branchID)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelectByCategoryID_Result>("AcGroupSelectByCategoryID", acCategoryIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcGroupSelectByID_Result> AcGroupSelectByID(Nullable<int> acGroupID)
        {
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcGroupSelectByID_Result>("AcGroupSelectByID", acGroupIDParameter);
        }
    
        public virtual int AcGroupUpdate(Nullable<int> acGroupID, Nullable<int> parentID, string acGroup, Nullable<int> acCategoryID, Nullable<short> isGroupcodeAuto, string groupCode)
        {
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var acGroupParameter = acGroup != null ?
                new ObjectParameter("AcGroup", acGroup) :
                new ObjectParameter("AcGroup", typeof(string));
    
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            var isGroupcodeAutoParameter = isGroupcodeAuto.HasValue ?
                new ObjectParameter("IsGroupcodeAuto", isGroupcodeAuto) :
                new ObjectParameter("IsGroupcodeAuto", typeof(short));
    
            var groupCodeParameter = groupCode != null ?
                new ObjectParameter("GroupCode", groupCode) :
                new ObjectParameter("GroupCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcGroupUpdate", acGroupIDParameter, parentIDParameter, acGroupParameter, acCategoryIDParameter, isGroupcodeAutoParameter, groupCodeParameter);
        }
    
        public virtual int AcHeadAssignInsert(Nullable<int> provisionCostControlAcID, Nullable<int> accruedCostControlAcID, Nullable<int> openJobRevenueAcID, Nullable<int> customerControlAcID, Nullable<int> cashControlAcID, Nullable<int> supplierControlAcID)
        {
            var provisionCostControlAcIDParameter = provisionCostControlAcID.HasValue ?
                new ObjectParameter("provisionCostControlAcID", provisionCostControlAcID) :
                new ObjectParameter("provisionCostControlAcID", typeof(int));
    
            var accruedCostControlAcIDParameter = accruedCostControlAcID.HasValue ?
                new ObjectParameter("AccruedCostControlAcID", accruedCostControlAcID) :
                new ObjectParameter("AccruedCostControlAcID", typeof(int));
    
            var openJobRevenueAcIDParameter = openJobRevenueAcID.HasValue ?
                new ObjectParameter("OpenJobRevenueAcID", openJobRevenueAcID) :
                new ObjectParameter("OpenJobRevenueAcID", typeof(int));
    
            var customerControlAcIDParameter = customerControlAcID.HasValue ?
                new ObjectParameter("CustomerControlAcID", customerControlAcID) :
                new ObjectParameter("CustomerControlAcID", typeof(int));
    
            var cashControlAcIDParameter = cashControlAcID.HasValue ?
                new ObjectParameter("CashControlAcID", cashControlAcID) :
                new ObjectParameter("CashControlAcID", typeof(int));
    
            var supplierControlAcIDParameter = supplierControlAcID.HasValue ?
                new ObjectParameter("SupplierControlAcID", supplierControlAcID) :
                new ObjectParameter("SupplierControlAcID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadAssignInsert", provisionCostControlAcIDParameter, accruedCostControlAcIDParameter, openJobRevenueAcIDParameter, customerControlAcIDParameter, cashControlAcIDParameter, supplierControlAcIDParameter);
        }
    
        public virtual ObjectResult<AcHeadAssignSelectAll_Result> AcHeadAssignSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadAssignSelectAll_Result>("AcHeadAssignSelectAll");
        }
    
        public virtual int AcHeadAssignUpdate(Nullable<int> customerAcHeadID, Nullable<int> cashAcHeadID, Nullable<int> salesAcHeadID, Nullable<int> inventoryAcHeadID, Nullable<int> supplierAcHeadID, Nullable<int> unEarrmedRevemieID, Nullable<int> discountAcHeadID)
        {
            var customerAcHeadIDParameter = customerAcHeadID.HasValue ?
                new ObjectParameter("CustomerAcHeadID", customerAcHeadID) :
                new ObjectParameter("CustomerAcHeadID", typeof(int));
    
            var cashAcHeadIDParameter = cashAcHeadID.HasValue ?
                new ObjectParameter("CashAcHeadID", cashAcHeadID) :
                new ObjectParameter("CashAcHeadID", typeof(int));
    
            var salesAcHeadIDParameter = salesAcHeadID.HasValue ?
                new ObjectParameter("SalesAcHeadID", salesAcHeadID) :
                new ObjectParameter("SalesAcHeadID", typeof(int));
    
            var inventoryAcHeadIDParameter = inventoryAcHeadID.HasValue ?
                new ObjectParameter("InventoryAcHeadID", inventoryAcHeadID) :
                new ObjectParameter("InventoryAcHeadID", typeof(int));
    
            var supplierAcHeadIDParameter = supplierAcHeadID.HasValue ?
                new ObjectParameter("SupplierAcHeadID", supplierAcHeadID) :
                new ObjectParameter("SupplierAcHeadID", typeof(int));
    
            var unEarrmedRevemieIDParameter = unEarrmedRevemieID.HasValue ?
                new ObjectParameter("UnEarrmedRevemieID", unEarrmedRevemieID) :
                new ObjectParameter("UnEarrmedRevemieID", typeof(int));
    
            var discountAcHeadIDParameter = discountAcHeadID.HasValue ?
                new ObjectParameter("DiscountAcHeadID", discountAcHeadID) :
                new ObjectParameter("DiscountAcHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadAssignUpdate", customerAcHeadIDParameter, cashAcHeadIDParameter, salesAcHeadIDParameter, inventoryAcHeadIDParameter, supplierAcHeadIDParameter, unEarrmedRevemieIDParameter, discountAcHeadIDParameter);
        }
    
        public virtual int AcHeadDelete(string acHeadIDs)
        {
            var acHeadIDsParameter = acHeadIDs != null ?
                new ObjectParameter("AcHeadIDs", acHeadIDs) :
                new ObjectParameter("AcHeadIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadDelete", acHeadIDsParameter);
        }
    
        public virtual int AcHeadInsert(Nullable<int> acHeadID, string acHeadKey, string acHead, Nullable<int> acGroupID, Nullable<int> userID, string prefix, string accountDescription)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acHeadKeyParameter = acHeadKey != null ?
                new ObjectParameter("AcHeadKey", acHeadKey) :
                new ObjectParameter("AcHeadKey", typeof(string));
    
            var acHeadParameter = acHead != null ?
                new ObjectParameter("AcHead", acHead) :
                new ObjectParameter("AcHead", typeof(string));
    
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var accountDescriptionParameter = accountDescription != null ?
                new ObjectParameter("AccountDescription", accountDescription) :
                new ObjectParameter("AccountDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadInsert", acHeadIDParameter, acHeadKeyParameter, acHeadParameter, acGroupIDParameter, userIDParameter, prefixParameter, accountDescriptionParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectAll_Result> AcHeadSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectAll_Result>("AcHeadSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectByID_Result> AcHeadSelectByID(Nullable<int> acHeadID)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectByID_Result>("AcHeadSelectByID", acHeadIDParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectForBank_Result> AcHeadSelectForBank(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectForBank_Result>("AcHeadSelectForBank", branchIDParameter);
        }
    
        public virtual ObjectResult<AcHeadSelectForCash_Result> AcHeadSelectForCash(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcHeadSelectForCash_Result>("AcHeadSelectForCash", branchIDParameter);
        }
    
        public virtual int AcHeadUpdate(string acHeadKey, Nullable<int> acHeadID, string acHead, Nullable<int> acGroupID, string prefix)
        {
            var acHeadKeyParameter = acHeadKey != null ?
                new ObjectParameter("AcHeadKey", acHeadKey) :
                new ObjectParameter("AcHeadKey", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acHeadParameter = acHead != null ?
                new ObjectParameter("AcHead", acHead) :
                new ObjectParameter("AcHead", typeof(string));
    
            var acGroupIDParameter = acGroupID.HasValue ?
                new ObjectParameter("AcGroupID", acGroupID) :
                new ObjectParameter("AcGroupID", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcHeadUpdate", acHeadKeyParameter, acHeadIDParameter, acHeadParameter, acGroupIDParameter, prefixParameter);
        }
    
        public virtual int AcJournalDetailDelete(string acJournalDetailIDs)
        {
            var acJournalDetailIDsParameter = acJournalDetailIDs != null ?
                new ObjectParameter("AcJournalDetailIDs", acJournalDetailIDs) :
                new ObjectParameter("AcJournalDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalDetailDelete", acJournalDetailIDsParameter);
        }
    
        public virtual int AcJournalDetailInsert(Nullable<int> acJournalID, Nullable<int> acHeadID, Nullable<decimal> amount, string remark, Nullable<int> branchID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalDetailInsert", acJournalIDParameter, acHeadIDParameter, amountParameter, remarkParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcJournalDetailSelectByAcJournalID_Result> AcJournalDetailSelectByAcJournalID(Nullable<int> acJournalID, string paymentType)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalDetailSelectByAcJournalID_Result>("AcJournalDetailSelectByAcJournalID", acJournalIDParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<AcJournalDetailSelectByAcJournalIDJV_Result> AcJournalDetailSelectByAcJournalIDJV(Nullable<int> acJournalID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalDetailSelectByAcJournalIDJV_Result>("AcJournalDetailSelectByAcJournalIDJV", acJournalIDParameter);
        }
    
        public virtual int AcJournalMasterDelete(string acJournalIDs)
        {
            var acJournalIDsParameter = acJournalIDs != null ?
                new ObjectParameter("AcJournalIDs", acJournalIDs) :
                new ObjectParameter("AcJournalIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterDelete", acJournalIDsParameter);
        }
    
        public virtual int AcJournalMasterInsert(Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<int> acHeadID, Nullable<short> transType, string remark, Nullable<int> userID, Nullable<decimal> amount, Nullable<int> branchID, string reference, string acJournalDetail, string acAnalysisHeadDetail, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(short));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterInsert", transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, acHeadIDParameter, transTypeParameter, remarkParameter, userIDParameter, amountParameter, branchIDParameter, referenceParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter);
        }
    
        public virtual int AcJournalMasterInsertJV(Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<short> transType, string remark, Nullable<int> userID, Nullable<int> branchID, string reference, string acJournalDetail, string acAnalysisHeadDetail)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(short));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterInsertJV", transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, transTypeParameter, remarkParameter, userIDParameter, branchIDParameter, referenceParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter);
        }
    
        public virtual ObjectResult<AcJournalMasterSelectAll_Result> AcJournalMasterSelectAll(Nullable<int> fYearID, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalMasterSelectAll_Result>("AcJournalMasterSelectAll", fYearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcJournalMasterSelectAllJV_Result> AcJournalMasterSelectAllJV(Nullable<int> fYearID, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalMasterSelectAllJV_Result>("AcJournalMasterSelectAllJV", fYearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcJournalMasterSelectByID_Result> AcJournalMasterSelectByID(Nullable<int> acJournalID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcJournalMasterSelectByID_Result>("AcJournalMasterSelectByID", acJournalIDParameter);
        }
    
        public virtual int AcJournalMasterUpdate(Nullable<int> acJournalID, Nullable<System.DateTime> transDate, string remark, Nullable<int> userID, Nullable<decimal> amount, string reference, string voucherType, Nullable<int> branchID, Nullable<int> acFinancialYearID, Nullable<int> acHeadID, string acJournalDetail, string acAnalysisHeadDetail, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterUpdate", acJournalIDParameter, transDateParameter, remarkParameter, userIDParameter, amountParameter, referenceParameter, voucherTypeParameter, branchIDParameter, acFinancialYearIDParameter, acHeadIDParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter);
        }
    
        public virtual int AcJournalMasterUpdateJV(Nullable<int> acJournalID, Nullable<System.DateTime> transDate, string remark, Nullable<int> userID, string reference)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcJournalMasterUpdateJV", acJournalIDParameter, transDateParameter, remarkParameter, userIDParameter, referenceParameter);
        }
    
        public virtual int AcMemoAnalysisHeadAllocationDelete(string acMemoAnalysisHeadAllocationIDs)
        {
            var acMemoAnalysisHeadAllocationIDsParameter = acMemoAnalysisHeadAllocationIDs != null ?
                new ObjectParameter("AcMemoAnalysisHeadAllocationIDs", acMemoAnalysisHeadAllocationIDs) :
                new ObjectParameter("AcMemoAnalysisHeadAllocationIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoAnalysisHeadAllocationDelete", acMemoAnalysisHeadAllocationIDsParameter);
        }
    
        public virtual int AcMemoAnalysisHeadAllocationInsert(Nullable<int> acMemoJournalDetailID, Nullable<int> analysisHeadID, Nullable<decimal> amount)
        {
            var acMemoJournalDetailIDParameter = acMemoJournalDetailID.HasValue ?
                new ObjectParameter("AcMemoJournalDetailID", acMemoJournalDetailID) :
                new ObjectParameter("AcMemoJournalDetailID", typeof(int));
    
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoAnalysisHeadAllocationInsert", acMemoJournalDetailIDParameter, analysisHeadIDParameter, amountParameter);
        }
    
        public virtual ObjectResult<AcMemoAnalysisHeadAllocationSelectByAcMemoJournalDetailID_Result> AcMemoAnalysisHeadAllocationSelectByAcMemoJournalDetailID(Nullable<int> acMemoJournalDetailID)
        {
            var acMemoJournalDetailIDParameter = acMemoJournalDetailID.HasValue ?
                new ObjectParameter("AcMemoJournalDetailID", acMemoJournalDetailID) :
                new ObjectParameter("AcMemoJournalDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoAnalysisHeadAllocationSelectByAcMemoJournalDetailID_Result>("AcMemoAnalysisHeadAllocationSelectByAcMemoJournalDetailID", acMemoJournalDetailIDParameter);
        }
    
        public virtual ObjectResult<AcMemoBankDetailsByAcJournalID_Result> AcMemoBankDetailsByAcJournalID(Nullable<int> acMemoJournalID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoBankDetailsByAcJournalID_Result>("AcMemoBankDetailsByAcJournalID", acMemoJournalIDParameter);
        }
    
        public virtual int AcMemoJournalDetailDelete(string acMemoJournalDetailIDs)
        {
            var acMemoJournalDetailIDsParameter = acMemoJournalDetailIDs != null ?
                new ObjectParameter("AcMemoJournalDetailIDs", acMemoJournalDetailIDs) :
                new ObjectParameter("AcMemoJournalDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalDetailDelete", acMemoJournalDetailIDsParameter);
        }
    
        public virtual int AcMemoJournalDetailInsert(Nullable<int> acMemoJournalID, Nullable<int> acHeadID, Nullable<decimal> amount, string remark, Nullable<int> branchID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalDetailInsert", acMemoJournalIDParameter, acHeadIDParameter, amountParameter, remarkParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcMemoJournalDetailSelectByAcJournalID_Result> AcMemoJournalDetailSelectByAcJournalID(Nullable<int> acMemoJournalID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoJournalDetailSelectByAcJournalID_Result>("AcMemoJournalDetailSelectByAcJournalID", acMemoJournalIDParameter);
        }
    
        public virtual int AcMemoJournalMasterDelete(string acMemoJournalIDs)
        {
            var acMemoJournalIDsParameter = acMemoJournalIDs != null ?
                new ObjectParameter("AcMemoJournalIDs", acMemoJournalIDs) :
                new ObjectParameter("AcMemoJournalIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalMasterDelete", acMemoJournalIDsParameter);
        }
    
        public virtual int AcMemoJournalMasterInsert(Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<int> acHeadID, string remark, Nullable<int> userID, Nullable<decimal> amount, Nullable<int> branchID, string acJournalDetail, string acAnalysisHeadDetail, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName, string statusTrans)
        {
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var acJournalDetailParameter = acJournalDetail != null ?
                new ObjectParameter("AcJournalDetail", acJournalDetail) :
                new ObjectParameter("AcJournalDetail", typeof(string));
    
            var acAnalysisHeadDetailParameter = acAnalysisHeadDetail != null ?
                new ObjectParameter("AcAnalysisHeadDetail", acAnalysisHeadDetail) :
                new ObjectParameter("AcAnalysisHeadDetail", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var statusTransParameter = statusTrans != null ?
                new ObjectParameter("StatusTrans", statusTrans) :
                new ObjectParameter("StatusTrans", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalMasterInsert", transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, acHeadIDParameter, remarkParameter, userIDParameter, amountParameter, branchIDParameter, acJournalDetailParameter, acAnalysisHeadDetailParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter, statusTransParameter);
        }
    
        public virtual ObjectResult<AcMemoJournalMasterSelectAll_Result> AcMemoJournalMasterSelectAll(Nullable<int> fYearID, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoJournalMasterSelectAll_Result>("AcMemoJournalMasterSelectAll", fYearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcMemoJournalMasterSelectByID_Result> AcMemoJournalMasterSelectByID(Nullable<int> acMemoJournalID)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcMemoJournalMasterSelectByID_Result>("AcMemoJournalMasterSelectByID", acMemoJournalIDParameter);
        }
    
        public virtual int AcMemoJournalMasterUpdate(Nullable<int> acMemoJournalID, Nullable<System.DateTime> transDate, string remark, Nullable<int> userID, Nullable<decimal> amount, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName)
        {
            var acMemoJournalIDParameter = acMemoJournalID.HasValue ?
                new ObjectParameter("AcMemoJournalID", acMemoJournalID) :
                new ObjectParameter("AcMemoJournalID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcMemoJournalMasterUpdate", acMemoJournalIDParameter, transDateParameter, remarkParameter, userIDParameter, amountParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter);
        }
    
        public virtual int AcOpeningMasterInsert(Nullable<int> fYearID, Nullable<System.DateTime> oPDate, Nullable<int> acHeadID, Nullable<decimal> amount, Nullable<int> branchID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var oPDateParameter = oPDate.HasValue ?
                new ObjectParameter("OPDate", oPDate) :
                new ObjectParameter("OPDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcOpeningMasterInsert", fYearIDParameter, oPDateParameter, acHeadIDParameter, amountParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AcOpeningMasterSelectAll_Result> AcOpeningMasterSelectAll(Nullable<int> fyearID, Nullable<int> companyID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcOpeningMasterSelectAll_Result>("AcOpeningMasterSelectAll", fyearIDParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<AcOPInvoiceDetailsSelectByInvoiceID_Result> AcOPInvoiceDetailsSelectByInvoiceID(Nullable<int> acOPInvoiceMasterID)
        {
            var acOPInvoiceMasterIDParameter = acOPInvoiceMasterID.HasValue ?
                new ObjectParameter("AcOPInvoiceMasterID", acOPInvoiceMasterID) :
                new ObjectParameter("AcOPInvoiceMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcOPInvoiceDetailsSelectByInvoiceID_Result>("AcOPInvoiceDetailsSelectByInvoiceID", acOPInvoiceMasterIDParameter);
        }
    
        public virtual int AcOPInvoiceMasterDelete(string acOPInvoiceMasterIDs)
        {
            var acOPInvoiceMasterIDsParameter = acOPInvoiceMasterIDs != null ?
                new ObjectParameter("AcOPInvoiceMasterIDs", acOPInvoiceMasterIDs) :
                new ObjectParameter("AcOPInvoiceMasterIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcOPInvoiceMasterDelete", acOPInvoiceMasterIDsParameter);
        }
    
        public virtual int AcOPInvoiceMasterInsert(Nullable<System.DateTime> oPDate, Nullable<int> fYearID, string remark, Nullable<int> branchID, Nullable<int> userID, Nullable<int> partyID, string statusSDSC, string statusSC, string details)
        {
            var oPDateParameter = oPDate.HasValue ?
                new ObjectParameter("OPDate", oPDate) :
                new ObjectParameter("OPDate", typeof(System.DateTime));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var statusSDSCParameter = statusSDSC != null ?
                new ObjectParameter("StatusSDSC", statusSDSC) :
                new ObjectParameter("StatusSDSC", typeof(string));
    
            var statusSCParameter = statusSC != null ?
                new ObjectParameter("StatusSC", statusSC) :
                new ObjectParameter("StatusSC", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcOPInvoiceMasterInsert", oPDateParameter, fYearIDParameter, remarkParameter, branchIDParameter, userIDParameter, partyIDParameter, statusSDSCParameter, statusSCParameter, detailsParameter);
        }
    
        public virtual ObjectResult<AcOPInvoiceMasterSelectAll_Result> AcOPInvoiceMasterSelectAll(Nullable<int> branchID, Nullable<int> fYearID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcOPInvoiceMasterSelectAll_Result>("AcOPInvoiceMasterSelectAll", branchIDParameter, fYearIDParameter);
        }
    
        public virtual ObjectResult<AcOPInvoiceMasterSelectByID_Result> AcOPInvoiceMasterSelectByID(Nullable<int> acOPInvoiceMasterID)
        {
            var acOPInvoiceMasterIDParameter = acOPInvoiceMasterID.HasValue ?
                new ObjectParameter("AcOPInvoiceMasterID", acOPInvoiceMasterID) :
                new ObjectParameter("AcOPInvoiceMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcOPInvoiceMasterSelectByID_Result>("AcOPInvoiceMasterSelectByID", acOPInvoiceMasterIDParameter);
        }
    
        public virtual int AcOPInvoiceMasterUpdate(Nullable<int> acOPInvoiceMasterID, Nullable<System.DateTime> oPDate, Nullable<int> fYearID, string remark, Nullable<int> branchID, Nullable<int> userID, Nullable<int> partyID, Nullable<int> acHeadID, string details)
        {
            var acOPInvoiceMasterIDParameter = acOPInvoiceMasterID.HasValue ?
                new ObjectParameter("AcOPInvoiceMasterID", acOPInvoiceMasterID) :
                new ObjectParameter("AcOPInvoiceMasterID", typeof(int));
    
            var oPDateParameter = oPDate.HasValue ?
                new ObjectParameter("OPDate", oPDate) :
                new ObjectParameter("OPDate", typeof(System.DateTime));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var partyIDParameter = partyID.HasValue ?
                new ObjectParameter("PartyID", partyID) :
                new ObjectParameter("PartyID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AcOPInvoiceMasterUpdate", acOPInvoiceMasterIDParameter, oPDateParameter, fYearIDParameter, remarkParameter, branchIDParameter, userIDParameter, partyIDParameter, acHeadIDParameter, detailsParameter);
        }
    
        public virtual ObjectResult<AcSubGroupSelectByCategoryID_Result> AcSubGroupSelectByCategoryID(Nullable<int> acCategoryID)
        {
            var acCategoryIDParameter = acCategoryID.HasValue ?
                new ObjectParameter("AcCategoryID", acCategoryID) :
                new ObjectParameter("AcCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AcSubGroupSelectByCategoryID_Result>("AcSubGroupSelectByCategoryID", acCategoryIDParameter);
        }
    
        public virtual int AddAgentInvoice(Nullable<int> agentID, Nullable<System.DateTime> invoiceDate, Nullable<decimal> invoiceTax, Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<int> userID, string type)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var invoiceTaxParameter = invoiceTax.HasValue ?
                new ObjectParameter("InvoiceTax", invoiceTax) :
                new ObjectParameter("InvoiceTax", typeof(decimal));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAgentInvoice", agentIDParameter, invoiceDateParameter, invoiceTaxParameter, fYearIDParameter, acCompanyIDParameter, userIDParameter, typeParameter);
        }
    
        public virtual int AddAgentPaymentReceipt(Nullable<int> agentID, Nullable<System.DateTime> transDate, Nullable<int> cashAcHeadID, Nullable<decimal> amount, string statusEntry, string referenceNo, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName, Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<int> branchID, Nullable<int> userID, string type)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var cashAcHeadIDParameter = cashAcHeadID.HasValue ?
                new ObjectParameter("CashAcHeadID", cashAcHeadID) :
                new ObjectParameter("CashAcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var statusEntryParameter = statusEntry != null ?
                new ObjectParameter("StatusEntry", statusEntry) :
                new ObjectParameter("StatusEntry", typeof(string));
    
            var referenceNoParameter = referenceNo != null ?
                new ObjectParameter("ReferenceNo", referenceNo) :
                new ObjectParameter("ReferenceNo", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddAgentPaymentReceipt", agentIDParameter, transDateParameter, cashAcHeadIDParameter, amountParameter, statusEntryParameter, referenceNoParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter, fYearIDParameter, acCompanyIDParameter, branchIDParameter, userIDParameter, typeParameter);
        }
    
        public virtual int AddCustomerInvoice(Nullable<int> customerID, Nullable<System.DateTime> invoiceDate, Nullable<decimal> customerInvoiceTax, Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<decimal> otherCharge, Nullable<int> userID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var customerInvoiceTaxParameter = customerInvoiceTax.HasValue ?
                new ObjectParameter("CustomerInvoiceTax", customerInvoiceTax) :
                new ObjectParameter("CustomerInvoiceTax", typeof(decimal));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var otherChargeParameter = otherCharge.HasValue ?
                new ObjectParameter("OtherCharge", otherCharge) :
                new ObjectParameter("OtherCharge", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerInvoice", customerIDParameter, invoiceDateParameter, customerInvoiceTaxParameter, fYearIDParameter, acCompanyIDParameter, otherChargeParameter, userIDParameter);
        }
    
        public virtual int AddMenu(string title, string link, Nullable<int> parentID, string userName, ObjectParameter menuID)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMenu", titleParameter, linkParameter, parentIDParameter, userNameParameter, menuID);
        }
    
        public virtual int AddMenuAccessLevel(Nullable<int> menuID, string roleID, string userName)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMenuAccessLevel", menuIDParameter, roleIDParameter, userNameParameter);
        }
    
        public virtual ObjectResult<AgentReceiptByAgentID_Result> AgentReceiptByAgentID(Nullable<int> agentID, string mode)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AgentReceiptByAgentID_Result>("AgentReceiptByAgentID", agentIDParameter, modeParameter);
        }
    
        public virtual int AnalysisGroupDelete(string analysisGroupIDs)
        {
            var analysisGroupIDsParameter = analysisGroupIDs != null ?
                new ObjectParameter("AnalysisGroupIDs", analysisGroupIDs) :
                new ObjectParameter("AnalysisGroupIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisGroupDelete", analysisGroupIDsParameter);
        }
    
        public virtual int AnalysisGroupInsert(Nullable<int> analysisGroupID, string analysisGroup)
        {
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            var analysisGroupParameter = analysisGroup != null ?
                new ObjectParameter("AnalysisGroup", analysisGroup) :
                new ObjectParameter("AnalysisGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisGroupInsert", analysisGroupIDParameter, analysisGroupParameter);
        }
    
        public virtual ObjectResult<AnalysisGroupSelectAll_Result> AnalysisGroupSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisGroupSelectAll_Result>("AnalysisGroupSelectAll");
        }
    
        public virtual ObjectResult<AnalysisGroupSelectByID_Result> AnalysisGroupSelectByID(Nullable<int> analysisGroupID)
        {
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisGroupSelectByID_Result>("AnalysisGroupSelectByID", analysisGroupIDParameter);
        }
    
        public virtual int AnalysisGroupUpdate(Nullable<int> analysisGroupID, string analysisGroup)
        {
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            var analysisGroupParameter = analysisGroup != null ?
                new ObjectParameter("AnalysisGroup", analysisGroup) :
                new ObjectParameter("AnalysisGroup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisGroupUpdate", analysisGroupIDParameter, analysisGroupParameter);
        }
    
        public virtual int AnalysisHeadDelete(string analysisHeadIDs)
        {
            var analysisHeadIDsParameter = analysisHeadIDs != null ?
                new ObjectParameter("AnalysisHeadIDs", analysisHeadIDs) :
                new ObjectParameter("AnalysisHeadIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisHeadDelete", analysisHeadIDsParameter);
        }
    
        public virtual int AnalysisHeadInsert(string analysisCode, string analysisHead, Nullable<int> analysisGroupID, Nullable<int> branchID)
        {
            var analysisCodeParameter = analysisCode != null ?
                new ObjectParameter("AnalysisCode", analysisCode) :
                new ObjectParameter("AnalysisCode", typeof(string));
    
            var analysisHeadParameter = analysisHead != null ?
                new ObjectParameter("AnalysisHead", analysisHead) :
                new ObjectParameter("AnalysisHead", typeof(string));
    
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisHeadInsert", analysisCodeParameter, analysisHeadParameter, analysisGroupIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<AnalysisHeadSelectAll_Result> AnalysisHeadSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisHeadSelectAll_Result>("AnalysisHeadSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<AnalysisHeadSelectByID_Result> AnalysisHeadSelectByID(Nullable<int> analysisHeadID)
        {
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AnalysisHeadSelectByID_Result>("AnalysisHeadSelectByID", analysisHeadIDParameter);
        }
    
        public virtual int AnalysisHeadUpdate(Nullable<int> analysisHeadID, string analysisCode, string analysisHead, Nullable<int> analysisGroupID)
        {
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            var analysisCodeParameter = analysisCode != null ?
                new ObjectParameter("AnalysisCode", analysisCode) :
                new ObjectParameter("AnalysisCode", typeof(string));
    
            var analysisHeadParameter = analysisHead != null ?
                new ObjectParameter("AnalysisHead", analysisHead) :
                new ObjectParameter("AnalysisHead", typeof(string));
    
            var analysisGroupIDParameter = analysisGroupID.HasValue ?
                new ObjectParameter("AnalysisGroupID", analysisGroupID) :
                new ObjectParameter("AnalysisGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AnalysisHeadUpdate", analysisHeadIDParameter, analysisCodeParameter, analysisHeadParameter, analysisGroupIDParameter);
        }
    
        public virtual int AreaMasterDelete(string areaIDs)
        {
            var areaIDsParameter = areaIDs != null ?
                new ObjectParameter("AreaIDs", areaIDs) :
                new ObjectParameter("AreaIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AreaMasterDelete", areaIDsParameter);
        }
    
        public virtual int AreaMasterInsert(Nullable<int> locationID, string areaName, ObjectParameter areaID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AreaMasterInsert", locationIDParameter, areaNameParameter, areaID);
        }
    
        public virtual ObjectResult<AreaMasterSelect_Result> AreaMasterSelect(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaMasterSelect_Result>("AreaMasterSelect", locationIDParameter);
        }
    
        public virtual ObjectResult<AreaMasterSelectAll_Result> AreaMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaMasterSelectAll_Result>("AreaMasterSelectAll");
        }
    
        public virtual ObjectResult<AreaMasterSelectByID_Result> AreaMasterSelectByID(Nullable<int> areaID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AreaMasterSelectByID_Result>("AreaMasterSelectByID", areaIDParameter);
        }
    
        public virtual int AreaMasterUpdate(Nullable<int> locationID, string areaName, Nullable<int> areaID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AreaMasterUpdate", locationIDParameter, areaNameParameter, areaIDParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual int BranchMasterDelete(string branchIDs)
        {
            var branchIDsParameter = branchIDs != null ?
                new ObjectParameter("BranchIDs", branchIDs) :
                new ObjectParameter("BranchIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchMasterDelete", branchIDsParameter);
        }
    
        public virtual int BranchMasterInsert(string branchName, string address1, string address2, string address3, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> locationID, string keyPerson, Nullable<int> designationID, string phone, string phoneNo1, string phoneNo2, string phoneNo3, string phoneNo4, string mobileNo1, string mobileNo2, string eMail, string website, string branchPrefix, Nullable<int> currencyID, Nullable<int> companyID, string aWBFormat, Nullable<bool> statusAssociate, ObjectParameter branchID)
        {
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var keyPersonParameter = keyPerson != null ?
                new ObjectParameter("KeyPerson", keyPerson) :
                new ObjectParameter("KeyPerson", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var phoneNo1Parameter = phoneNo1 != null ?
                new ObjectParameter("PhoneNo1", phoneNo1) :
                new ObjectParameter("PhoneNo1", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("PhoneNo2", phoneNo2) :
                new ObjectParameter("PhoneNo2", typeof(string));
    
            var phoneNo3Parameter = phoneNo3 != null ?
                new ObjectParameter("PhoneNo3", phoneNo3) :
                new ObjectParameter("PhoneNo3", typeof(string));
    
            var phoneNo4Parameter = phoneNo4 != null ?
                new ObjectParameter("PhoneNo4", phoneNo4) :
                new ObjectParameter("PhoneNo4", typeof(string));
    
            var mobileNo1Parameter = mobileNo1 != null ?
                new ObjectParameter("MobileNo1", mobileNo1) :
                new ObjectParameter("MobileNo1", typeof(string));
    
            var mobileNo2Parameter = mobileNo2 != null ?
                new ObjectParameter("MobileNo2", mobileNo2) :
                new ObjectParameter("MobileNo2", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var branchPrefixParameter = branchPrefix != null ?
                new ObjectParameter("BranchPrefix", branchPrefix) :
                new ObjectParameter("BranchPrefix", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var aWBFormatParameter = aWBFormat != null ?
                new ObjectParameter("AWBFormat", aWBFormat) :
                new ObjectParameter("AWBFormat", typeof(string));
    
            var statusAssociateParameter = statusAssociate.HasValue ?
                new ObjectParameter("StatusAssociate", statusAssociate) :
                new ObjectParameter("StatusAssociate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchMasterInsert", branchNameParameter, address1Parameter, address2Parameter, address3Parameter, countryIDParameter, cityIDParameter, locationIDParameter, keyPersonParameter, designationIDParameter, phoneParameter, phoneNo1Parameter, phoneNo2Parameter, phoneNo3Parameter, phoneNo4Parameter, mobileNo1Parameter, mobileNo2Parameter, eMailParameter, websiteParameter, branchPrefixParameter, currencyIDParameter, companyIDParameter, aWBFormatParameter, statusAssociateParameter, branchID);
        }
    
        public virtual ObjectResult<BranchMasterSelect_Result> BranchMasterSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BranchMasterSelect_Result>("BranchMasterSelect");
        }
    
        public virtual ObjectResult<BranchMasterSelectAll_Result> BranchMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BranchMasterSelectAll_Result>("BranchMasterSelectAll");
        }
    
        public virtual ObjectResult<BranchMasterSelectByID_Result> BranchMasterSelectByID(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BranchMasterSelectByID_Result>("BranchMasterSelectByID", branchIDParameter);
        }
    
        public virtual ObjectResult<BranchMasterSelectForTransit_Result> BranchMasterSelectForTransit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BranchMasterSelectForTransit_Result>("BranchMasterSelectForTransit");
        }
    
        public virtual int BranchMasterUpdate(Nullable<int> branchID, string branchName, string address1, string address2, string address3, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> locationID, string keyPerson, Nullable<int> designationID, string phone, string phoneNo1, string phoneNo2, string phoneNo3, string phoneNo4, string mobileNo1, string mobileNo2, string eMail, string website, string branchPrefix, Nullable<int> currencyID, string aWBFormat, Nullable<bool> statusAssociate)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var keyPersonParameter = keyPerson != null ?
                new ObjectParameter("KeyPerson", keyPerson) :
                new ObjectParameter("KeyPerson", typeof(string));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var phoneNo1Parameter = phoneNo1 != null ?
                new ObjectParameter("PhoneNo1", phoneNo1) :
                new ObjectParameter("PhoneNo1", typeof(string));
    
            var phoneNo2Parameter = phoneNo2 != null ?
                new ObjectParameter("PhoneNo2", phoneNo2) :
                new ObjectParameter("PhoneNo2", typeof(string));
    
            var phoneNo3Parameter = phoneNo3 != null ?
                new ObjectParameter("PhoneNo3", phoneNo3) :
                new ObjectParameter("PhoneNo3", typeof(string));
    
            var phoneNo4Parameter = phoneNo4 != null ?
                new ObjectParameter("PhoneNo4", phoneNo4) :
                new ObjectParameter("PhoneNo4", typeof(string));
    
            var mobileNo1Parameter = mobileNo1 != null ?
                new ObjectParameter("MobileNo1", mobileNo1) :
                new ObjectParameter("MobileNo1", typeof(string));
    
            var mobileNo2Parameter = mobileNo2 != null ?
                new ObjectParameter("MobileNo2", mobileNo2) :
                new ObjectParameter("MobileNo2", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var branchPrefixParameter = branchPrefix != null ?
                new ObjectParameter("BranchPrefix", branchPrefix) :
                new ObjectParameter("BranchPrefix", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var aWBFormatParameter = aWBFormat != null ?
                new ObjectParameter("AWBFormat", aWBFormat) :
                new ObjectParameter("AWBFormat", typeof(string));
    
            var statusAssociateParameter = statusAssociate.HasValue ?
                new ObjectParameter("StatusAssociate", statusAssociate) :
                new ObjectParameter("StatusAssociate", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BranchMasterUpdate", branchIDParameter, branchNameParameter, address1Parameter, address2Parameter, address3Parameter, countryIDParameter, cityIDParameter, locationIDParameter, keyPersonParameter, designationIDParameter, phoneParameter, phoneNo1Parameter, phoneNo2Parameter, phoneNo3Parameter, phoneNo4Parameter, mobileNo1Parameter, mobileNo2Parameter, eMailParameter, websiteParameter, branchPrefixParameter, currencyIDParameter, aWBFormatParameter, statusAssociateParameter);
        }
    
        public virtual ObjectResult<Cash_Result> Cash(string acType)
        {
            var acTypeParameter = acType != null ?
                new ObjectParameter("acType", acType) :
                new ObjectParameter("acType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cash_Result>("Cash", acTypeParameter);
        }
    
        public virtual int CategoryDelete(string categoryIDs)
        {
            var categoryIDsParameter = categoryIDs != null ?
                new ObjectParameter("CategoryIDs", categoryIDs) :
                new ObjectParameter("CategoryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoryDelete", categoryIDsParameter);
        }
    
        public virtual int CategoryInsert(string categoryName, string acHeadID, ObjectParameter categoryID)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var acHeadIDParameter = acHeadID != null ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoryInsert", categoryNameParameter, acHeadIDParameter, categoryID);
        }
    
        public virtual ObjectResult<CategorySelect_Result> CategorySelect(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategorySelect_Result>("CategorySelect", branchIDParameter);
        }
    
        public virtual ObjectResult<CategorySelectAll_Result> CategorySelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategorySelectAll_Result>("CategorySelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<CategorySelectByID_Result> CategorySelectByID(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategorySelectByID_Result>("CategorySelectByID", categoryIDParameter);
        }
    
        public virtual int CategoryUpdate(Nullable<int> categoryID, string categoryName, Nullable<int> acHeadID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CategoryUpdate", categoryIDParameter, categoryNameParameter, acHeadIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckDuplicateAwbNo(string awbNo)
        {
            var awbNoParameter = awbNo != null ?
                new ObjectParameter("awbNo", awbNo) :
                new ObjectParameter("awbNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckDuplicateAwbNo", awbNoParameter);
        }
    
        public virtual int CityMasterDelete(string cityIDs)
        {
            var cityIDsParameter = cityIDs != null ?
                new ObjectParameter("CityIDs", cityIDs) :
                new ObjectParameter("CityIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CityMasterDelete", cityIDsParameter);
        }
    
        public virtual int CityMasterInsert(string cityName, Nullable<int> countryID, string pinCode, string areaCode, string mobileCode, ObjectParameter cityID)
        {
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var areaCodeParameter = areaCode != null ?
                new ObjectParameter("AreaCode", areaCode) :
                new ObjectParameter("AreaCode", typeof(string));
    
            var mobileCodeParameter = mobileCode != null ?
                new ObjectParameter("MobileCode", mobileCode) :
                new ObjectParameter("MobileCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CityMasterInsert", cityNameParameter, countryIDParameter, pinCodeParameter, areaCodeParameter, mobileCodeParameter, cityID);
        }
    
        public virtual ObjectResult<CityMasterSelect_Result> CityMasterSelect(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMasterSelect_Result>("CityMasterSelect", countryIDParameter);
        }
    
        public virtual ObjectResult<CityMasterSelectAll_Result> CityMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMasterSelectAll_Result>("CityMasterSelectAll");
        }
    
        public virtual ObjectResult<CityMasterSelectByID_Result> CityMasterSelectByID(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CityMasterSelectByID_Result>("CityMasterSelectByID", cityIDParameter);
        }
    
        public virtual ObjectResult<CMSUserSellectAll_Result> CMSUserSellectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CMSUserSellectAll_Result>("CMSUserSellectAll");
        }
    
        public virtual int CompanyMasterDelete(string companyIDs)
        {
            var companyIDsParameter = companyIDs != null ?
                new ObjectParameter("CompanyIDs", companyIDs) :
                new ObjectParameter("CompanyIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CompanyMasterDelete", companyIDsParameter);
        }
    
        public virtual int ConvertJobEnquiryToJob(Nullable<int> jobEnquiryID)
        {
            var jobEnquiryIDParameter = jobEnquiryID.HasValue ?
                new ObjectParameter("JobEnquiryID", jobEnquiryID) :
                new ObjectParameter("JobEnquiryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertJobEnquiryToJob", jobEnquiryIDParameter);
        }
    
        public virtual int ConvertJobToJobEnquiry(Nullable<int> jobEnquiryID)
        {
            var jobEnquiryIDParameter = jobEnquiryID.HasValue ?
                new ObjectParameter("JobEnquiryID", jobEnquiryID) :
                new ObjectParameter("JobEnquiryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertJobToJobEnquiry", jobEnquiryIDParameter);
        }
    
        public virtual int ConvertJournaltoPDC(string acMemoJournalIDs)
        {
            var acMemoJournalIDsParameter = acMemoJournalIDs != null ?
                new ObjectParameter("AcMemoJournalIDs", acMemoJournalIDs) :
                new ObjectParameter("AcMemoJournalIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertJournaltoPDC", acMemoJournalIDsParameter);
        }
    
        public virtual int ConvertPDCtoJournal(string acMemoJournalIDs, Nullable<System.DateTime> transDate)
        {
            var acMemoJournalIDsParameter = acMemoJournalIDs != null ?
                new ObjectParameter("AcMemoJournalIDs", acMemoJournalIDs) :
                new ObjectParameter("AcMemoJournalIDs", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConvertPDCtoJournal", acMemoJournalIDsParameter, transDateParameter);
        }
    
        public virtual int CountryMasterDelete(string countryIDs)
        {
            var countryIDsParameter = countryIDs != null ?
                new ObjectParameter("CountryIDs", countryIDs) :
                new ObjectParameter("CountryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryMasterDelete", countryIDsParameter);
        }
    
        public virtual ObjectResult<CountryMasterSelect_Result> CountryMasterSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountryMasterSelect_Result>("CountryMasterSelect");
        }
    
        public virtual ObjectResult<CountryMasterSelectAll_Result> CountryMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountryMasterSelectAll_Result>("CountryMasterSelectAll");
        }
    
        public virtual ObjectResult<CountryMasterSelectByID_Result> CountryMasterSelectByID(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountryMasterSelectByID_Result>("CountryMasterSelectByID", countryIDParameter);
        }
    
        public virtual int CountryMasterUpdate(Nullable<int> countryID, string countryName, string countryCode, string telephoneCode)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var countryNameParameter = countryName != null ?
                new ObjectParameter("CountryName", countryName) :
                new ObjectParameter("CountryName", typeof(string));
    
            var countryCodeParameter = countryCode != null ?
                new ObjectParameter("CountryCode", countryCode) :
                new ObjectParameter("CountryCode", typeof(string));
    
            var telephoneCodeParameter = telephoneCode != null ?
                new ObjectParameter("TelephoneCode", telephoneCode) :
                new ObjectParameter("TelephoneCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CountryMasterUpdate", countryIDParameter, countryNameParameter, countryCodeParameter, telephoneCodeParameter);
        }
    
        public virtual int CurrencyMasterDelete(string currencyIDs)
        {
            var currencyIDsParameter = currencyIDs != null ?
                new ObjectParameter("CurrencyIDs", currencyIDs) :
                new ObjectParameter("CurrencyIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CurrencyMasterDelete", currencyIDsParameter);
        }
    
        public virtual int CurrencyMasterInsert(string currencyName, string symbol, Nullable<short> noOfDecimals, string monetaryUnit, Nullable<int> countryID, Nullable<bool> statusBaseCurrency, ObjectParameter currencyID)
        {
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var noOfDecimalsParameter = noOfDecimals.HasValue ?
                new ObjectParameter("NoOfDecimals", noOfDecimals) :
                new ObjectParameter("NoOfDecimals", typeof(short));
    
            var monetaryUnitParameter = monetaryUnit != null ?
                new ObjectParameter("MonetaryUnit", monetaryUnit) :
                new ObjectParameter("MonetaryUnit", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var statusBaseCurrencyParameter = statusBaseCurrency.HasValue ?
                new ObjectParameter("StatusBaseCurrency", statusBaseCurrency) :
                new ObjectParameter("StatusBaseCurrency", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CurrencyMasterInsert", currencyNameParameter, symbolParameter, noOfDecimalsParameter, monetaryUnitParameter, countryIDParameter, statusBaseCurrencyParameter, currencyID);
        }
    
        public virtual ObjectResult<CurrencyMasterSelect_Result> CurrencyMasterSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyMasterSelect_Result>("CurrencyMasterSelect");
        }
    
        public virtual ObjectResult<CurrencyMasterSelectAll_Result> CurrencyMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyMasterSelectAll_Result>("CurrencyMasterSelectAll");
        }
    
        public virtual ObjectResult<CurrencyMasterSelectByCountryID_Result> CurrencyMasterSelectByCountryID(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyMasterSelectByCountryID_Result>("CurrencyMasterSelectByCountryID", countryIDParameter);
        }
    
        public virtual ObjectResult<CurrencyMasterSelectByID_Result> CurrencyMasterSelectByID(Nullable<int> currencyID)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrencyMasterSelectByID_Result>("CurrencyMasterSelectByID", currencyIDParameter);
        }
    
        public virtual int CurrencyMasterUpdate(Nullable<int> currencyID, string currencyName, string symbol, Nullable<short> noOfDecimals, string monetaryUnit, Nullable<int> countryID, Nullable<bool> statusBaseCurrency)
        {
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var currencyNameParameter = currencyName != null ?
                new ObjectParameter("CurrencyName", currencyName) :
                new ObjectParameter("CurrencyName", typeof(string));
    
            var symbolParameter = symbol != null ?
                new ObjectParameter("Symbol", symbol) :
                new ObjectParameter("Symbol", typeof(string));
    
            var noOfDecimalsParameter = noOfDecimals.HasValue ?
                new ObjectParameter("NoOfDecimals", noOfDecimals) :
                new ObjectParameter("NoOfDecimals", typeof(short));
    
            var monetaryUnitParameter = monetaryUnit != null ?
                new ObjectParameter("MonetaryUnit", monetaryUnit) :
                new ObjectParameter("MonetaryUnit", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var statusBaseCurrencyParameter = statusBaseCurrency.HasValue ?
                new ObjectParameter("StatusBaseCurrency", statusBaseCurrency) :
                new ObjectParameter("StatusBaseCurrency", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CurrencyMasterUpdate", currencyIDParameter, currencyNameParameter, symbolParameter, noOfDecimalsParameter, monetaryUnitParameter, countryIDParameter, statusBaseCurrencyParameter);
        }
    
        public virtual ObjectResult<CustomerEnquirySelectAll_Result> CustomerEnquirySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerEnquirySelectAll_Result>("CustomerEnquirySelectAll");
        }
    
        public virtual int CustomerMasterActive(string customerIDs, Nullable<int> flag)
        {
            var customerIDsParameter = customerIDs != null ?
                new ObjectParameter("CustomerIDs", customerIDs) :
                new ObjectParameter("CustomerIDs", typeof(string));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerMasterActive", customerIDsParameter, flagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CustomerMasterDelete(string customerIDs)
        {
            var customerIDsParameter = customerIDs != null ?
                new ObjectParameter("CustomerIDs", customerIDs) :
                new ObjectParameter("CustomerIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CustomerMasterDelete", customerIDsParameter);
        }
    
        public virtual int CustomerMasterReport(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerMasterReport", searchParameter);
        }
    
        public virtual ObjectResult<CustomerMasterReportDummy_Result> CustomerMasterReportDummy(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerMasterReportDummy_Result>("CustomerMasterReportDummy", searchParameter);
        }
    
        public virtual ObjectResult<CustomerMasterSelect_Result> CustomerMasterSelect(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerMasterSelect_Result>("CustomerMasterSelect", branchIDParameter);
        }
    
        public virtual ObjectResult<CustomerMasterSelectByBranchID_Result> CustomerMasterSelectByBranchID(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerMasterSelectByBranchID_Result>("CustomerMasterSelectByBranchID", branchIDParameter);
        }
    
        public virtual ObjectResult<CustomerMasterSelectByID_Result> CustomerMasterSelectByID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerMasterSelectByID_Result>("CustomerMasterSelectByID", customerIDParameter);
        }
    
        public virtual int CustomerRateTypeDelete(string customerRateTypeIDs)
        {
            var customerRateTypeIDsParameter = customerRateTypeIDs != null ?
                new ObjectParameter("CustomerRateTypeIDs", customerRateTypeIDs) :
                new ObjectParameter("CustomerRateTypeIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerRateTypeDelete", customerRateTypeIDsParameter);
        }
    
        public virtual ObjectResult<CustomerRateTypeSelect_Result> CustomerRateTypeSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRateTypeSelect_Result>("CustomerRateTypeSelect");
        }
    
        public virtual ObjectResult<CustomerRateTypeSelectAll_Result> CustomerRateTypeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRateTypeSelectAll_Result>("CustomerRateTypeSelectAll");
        }
    
        public virtual ObjectResult<CustomerRateTypeSelectByID_Result> CustomerRateTypeSelectByID(Nullable<int> customerRateTypeID)
        {
            var customerRateTypeIDParameter = customerRateTypeID.HasValue ?
                new ObjectParameter("CustomerRateTypeID", customerRateTypeID) :
                new ObjectParameter("CustomerRateTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRateTypeSelectByID_Result>("CustomerRateTypeSelectByID", customerRateTypeIDParameter);
        }
    
        public virtual int CustomerRateTypeUpdate(Nullable<int> customerRateTypeID, string customerRateType, Nullable<int> zoneCategoryId, Nullable<bool> statusDefault)
        {
            var customerRateTypeIDParameter = customerRateTypeID.HasValue ?
                new ObjectParameter("CustomerRateTypeID", customerRateTypeID) :
                new ObjectParameter("CustomerRateTypeID", typeof(int));
    
            var customerRateTypeParameter = customerRateType != null ?
                new ObjectParameter("CustomerRateType", customerRateType) :
                new ObjectParameter("CustomerRateType", typeof(string));
    
            var zoneCategoryIdParameter = zoneCategoryId.HasValue ?
                new ObjectParameter("ZoneCategoryId", zoneCategoryId) :
                new ObjectParameter("ZoneCategoryId", typeof(int));
    
            var statusDefaultParameter = statusDefault.HasValue ?
                new ObjectParameter("StatusDefault", statusDefault) :
                new ObjectParameter("StatusDefault", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerRateTypeUpdate", customerRateTypeIDParameter, customerRateTypeParameter, zoneCategoryIdParameter, statusDefaultParameter);
        }
    
        public virtual int CustomerReceiptsGetByCustomerID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerReceiptsGetByCustomerID", customerIDParameter);
        }
    
        public virtual int deleteacjournaldetail(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteacjournaldetail", iDParameter);
        }
    
        public virtual int deleteacjournalmaster(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteacjournalmaster", iDParameter);
        }
    
        public virtual int DeleteAgentInvoice(Nullable<int> agentInvoiceID)
        {
            var agentInvoiceIDParameter = agentInvoiceID.HasValue ?
                new ObjectParameter("AgentInvoiceID", agentInvoiceID) :
                new ObjectParameter("AgentInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAgentInvoice", agentInvoiceIDParameter);
        }
    
        public virtual int DeleteAgentPaymentReceipt(Nullable<int> agentReceiptID)
        {
            var agentReceiptIDParameter = agentReceiptID.HasValue ?
                new ObjectParameter("AgentReceiptID", agentReceiptID) :
                new ObjectParameter("AgentReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAgentPaymentReceipt", agentReceiptIDParameter);
        }
    
        public virtual int DeleteCustomerInvoice(Nullable<int> customerInvoiceID)
        {
            var customerInvoiceIDParameter = customerInvoiceID.HasValue ?
                new ObjectParameter("CustomerInvoiceID", customerInvoiceID) :
                new ObjectParameter("CustomerInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerInvoice", customerInvoiceIDParameter);
        }
    
        public virtual int DeleteCustomerReceipt(Nullable<int> customerReceiptID)
        {
            var customerReceiptIDParameter = customerReceiptID.HasValue ?
                new ObjectParameter("CustomerReceiptID", customerReceiptID) :
                new ObjectParameter("CustomerReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCustomerReceipt", customerReceiptIDParameter);
        }
    
        public virtual int DeleteMenuAccessLevel(Nullable<long> menuAccessID)
        {
            var menuAccessIDParameter = menuAccessID.HasValue ?
                new ObjectParameter("MenuAccessID", menuAccessID) :
                new ObjectParameter("MenuAccessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMenuAccessLevel", menuAccessIDParameter);
        }
    
        public virtual int deleterecpay(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleterecpay", iDParameter);
        }
    
        public virtual int deleterecpaydetail(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleterecpaydetail", iDParameter);
        }
    
        public virtual int DesignationDelete(string designationIDs)
        {
            var designationIDsParameter = designationIDs != null ?
                new ObjectParameter("DesignationIDs", designationIDs) :
                new ObjectParameter("DesignationIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DesignationDelete", designationIDsParameter);
        }
    
        public virtual int DesignationInsert(string designation, ObjectParameter designationID)
        {
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DesignationInsert", designationParameter, designationID);
        }
    
        public virtual ObjectResult<DesignationSelectAll_Result> DesignationSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DesignationSelectAll_Result>("DesignationSelectAll");
        }
    
        public virtual ObjectResult<DesignationSelectByID_Result> DesignationSelectByID(Nullable<int> designationID)
        {
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DesignationSelectByID_Result>("DesignationSelectByID", designationIDParameter);
        }
    
        public virtual int DesignationUpdate(Nullable<int> designationID, string designation)
        {
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DesignationUpdate", designationIDParameter, designationParameter);
        }
    
        public virtual ObjectResult<DestinationSelectAll_Result> DestinationSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DestinationSelectAll_Result>("DestinationSelectAll");
        }
    
        public virtual int EmployeeMasterDelete(string employeeIDs)
        {
            var employeeIDsParameter = employeeIDs != null ?
                new ObjectParameter("EmployeeIDs", employeeIDs) :
                new ObjectParameter("EmployeeIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeMasterDelete", employeeIDsParameter);
        }
    
        public virtual ObjectResult<EmployeeMasterSelect_Result> EmployeeMasterSelect(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMasterSelect_Result>("EmployeeMasterSelect", branchIDParameter);
        }
    
        public virtual ObjectResult<EmployeeMasterSelectAll_Result> EmployeeMasterSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMasterSelectAll_Result>("EmployeeMasterSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<EmployeeMasterSelectByID_Result> EmployeeMasterSelectByID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeMasterSelectByID_Result>("EmployeeMasterSelectByID", employeeIDParameter);
        }
    
        public virtual int ExpenseDelete(string expenseIDs)
        {
            var expenseIDsParameter = expenseIDs != null ?
                new ObjectParameter("ExpenseIDs", expenseIDs) :
                new ObjectParameter("ExpenseIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExpenseDelete", expenseIDsParameter);
        }
    
        public virtual ObjectResult<ExpenseDetailsSelectByExpenseID_Result> ExpenseDetailsSelectByExpenseID(Nullable<int> expenseID)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("ExpenseID", expenseID) :
                new ObjectParameter("ExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseDetailsSelectByExpenseID_Result>("ExpenseDetailsSelectByExpenseID", expenseIDParameter);
        }
    
        public virtual ObjectResult<ExpenseSelectAll_Result> ExpenseSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseSelectAll_Result>("ExpenseSelectAll");
        }
    
        public virtual ObjectResult<ExpenseSelectByID_Result> ExpenseSelectByID(Nullable<int> expenseID)
        {
            var expenseIDParameter = expenseID.HasValue ?
                new ObjectParameter("ExpenseID", expenseID) :
                new ObjectParameter("ExpenseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpenseSelectByID_Result>("ExpenseSelectByID", expenseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAccountBalanceByHeadID(Nullable<int> acHeadID, Nullable<int> fyearID)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAccountBalanceByHeadID", acHeadIDParameter, fyearIDParameter);
        }
    
        public virtual ObjectResult<GetAccountHead_Result> GetAccountHead(string acountType, Nullable<int> acCompanyID)
        {
            var acountTypeParameter = acountType != null ?
                new ObjectParameter("acountType", acountType) :
                new ObjectParameter("acountType", typeof(string));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("acCompanyID", acCompanyID) :
                new ObjectParameter("acCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAccountHead_Result>("GetAccountHead", acountTypeParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<GetAcHeadByAccount_Result> GetAcHeadByAccount(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcHeadByAccount_Result>("GetAcHeadByAccount", branchIDParameter);
        }
    
        public virtual ObjectResult<GetAcHeadByID_Result> GetAcHeadByID(Nullable<int> iD, Nullable<int> branchID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcHeadByID_Result>("GetAcHeadByID", iDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetAcJDetailsExpenseAllocation_Result> GetAcJDetailsExpenseAllocation(Nullable<int> acJournalDetailID)
        {
            var acJournalDetailIDParameter = acJournalDetailID.HasValue ?
                new ObjectParameter("AcJournalDetailID", acJournalDetailID) :
                new ObjectParameter("AcJournalDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAcJDetailsExpenseAllocation_Result>("GetAcJDetailsExpenseAllocation", acJournalDetailIDParameter);
        }
    
        public virtual int GetAdminMenu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAdminMenu");
        }
    
        public virtual int GetAgentAddInvoice(Nullable<int> agentID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string agentType)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var agentTypeParameter = agentType != null ?
                new ObjectParameter("AgentType", agentType) :
                new ObjectParameter("AgentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAgentAddInvoice", agentIDParameter, fromDateParameter, toDateParameter, agentTypeParameter);
        }
    
        public virtual ObjectResult<GetAgentAddInvoiceDummy_Result> GetAgentAddInvoiceDummy(Nullable<int> agentID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string agentType)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var agentTypeParameter = agentType != null ?
                new ObjectParameter("AgentType", agentType) :
                new ObjectParameter("AgentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentAddInvoiceDummy_Result>("GetAgentAddInvoiceDummy", agentIDParameter, fromDateParameter, toDateParameter, agentTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetAgentAdvanceAmount(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetAgentAdvanceAmount", agentIDParameter);
        }
    
        public virtual ObjectResult<GetAgentDeliveryRate_Result> GetAgentDeliveryRate(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("agentID", agentID) :
                new ObjectParameter("agentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentDeliveryRate_Result>("GetAgentDeliveryRate", agentIDParameter);
        }
    
        public virtual ObjectResult<GetAgentInvoiceReport_Result> GetAgentInvoiceReport(string invoiceNo)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("invoiceNo", invoiceNo) :
                new ObjectParameter("invoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentInvoiceReport_Result>("GetAgentInvoiceReport", invoiceNoParameter);
        }
    
        public virtual ObjectResult<GetAgentPaymentReceipt_Result> GetAgentPaymentReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentPaymentReceipt_Result>("GetAgentPaymentReceipt");
        }
    
        public virtual ObjectResult<GetAgentPaymentType_Result> GetAgentPaymentType(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentPaymentType_Result>("GetAgentPaymentType", typeParameter);
        }
    
        public virtual ObjectResult<GetAgentPaymetType_Result> GetAgentPaymetType(string paymentType)
        {
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("paymentType", paymentType) :
                new ObjectParameter("paymentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentPaymetType_Result>("GetAgentPaymetType", paymentTypeParameter);
        }
    
        public virtual ObjectResult<GetAgentRateChart_Result> GetAgentRateChart(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("agentID", agentID) :
                new ObjectParameter("agentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentRateChart_Result>("GetAgentRateChart", agentIDParameter);
        }
    
        public virtual ObjectResult<GetAgentReceipt_Result> GetAgentReceipt(string voucherNo)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentReceipt_Result>("GetAgentReceipt", voucherNoParameter);
        }
    
        public virtual ObjectResult<GetAgentReceiptByID_Result> GetAgentReceiptByID(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentReceiptByID_Result>("GetAgentReceiptByID", agentIDParameter);
        }
    
        public virtual ObjectResult<GetAgentReportDummy_Result> GetAgentReportDummy(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAgentReportDummy_Result>("GetAgentReportDummy", searchParameter);
        }
    
        public virtual int GetAgentReportDynamic(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAgentReportDynamic", searchParameter);
        }
    
        public virtual ObjectResult<GetAirBillWayReport_Result> GetAirBillWayReport(string aWBNO)
        {
            var aWBNOParameter = aWBNO != null ?
                new ObjectParameter("AWBNO", aWBNO) :
                new ObjectParameter("AWBNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAirBillWayReport_Result>("GetAirBillWayReport", aWBNOParameter);
        }
    
        public virtual ObjectResult<GetAirWayBillReport_Result> GetAirWayBillReport(string aWBNO)
        {
            var aWBNOParameter = aWBNO != null ?
                new ObjectParameter("AWBNO", aWBNO) :
                new ObjectParameter("AWBNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAirWayBillReport_Result>("GetAirWayBillReport", aWBNOParameter);
        }
    
        public virtual ObjectResult<GetAllAgentInvoice_Result> GetAllAgentInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllAgentInvoice_Result>("GetAllAgentInvoice");
        }
    
        public virtual ObjectResult<GetAllCourierStatus_Result> GetAllCourierStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCourierStatus_Result>("GetAllCourierStatus");
        }
    
        public virtual ObjectResult<GetAllCustomerRate_Result> GetAllCustomerRate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCustomerRate_Result>("GetAllCustomerRate");
        }
    
        public virtual ObjectResult<GetAllCustomersInvoices_Result> GetAllCustomersInvoices(string iCustomerID, string iStartDate, string iEndDate)
        {
            var iCustomerIDParameter = iCustomerID != null ?
                new ObjectParameter("iCustomerID", iCustomerID) :
                new ObjectParameter("iCustomerID", typeof(string));
    
            var iStartDateParameter = iStartDate != null ?
                new ObjectParameter("iStartDate", iStartDate) :
                new ObjectParameter("iStartDate", typeof(string));
    
            var iEndDateParameter = iEndDate != null ?
                new ObjectParameter("iEndDate", iEndDate) :
                new ObjectParameter("iEndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCustomersInvoices_Result>("GetAllCustomersInvoices", iCustomerIDParameter, iStartDateParameter, iEndDateParameter);
        }
    
        public virtual ObjectResult<GetAllDepot_Result> GetAllDepot(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDepot_Result>("GetAllDepot", countryIDParameter);
        }
    
        public virtual ObjectResult<GetAllLocationZoneChart_Result> GetAllLocationZoneChart(Nullable<int> zoneID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLocationZoneChart_Result>("GetAllLocationZoneChart", zoneIDParameter);
        }
    
        public virtual ObjectResult<GetAllPurchaseInvoice_Result> GetAllPurchaseInvoice(Nullable<int> fyearID, Nullable<int> branchID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPurchaseInvoice_Result>("GetAllPurchaseInvoice", fyearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetAllSalesInvoice_Result> GetAllSalesInvoice(Nullable<int> fyearID, Nullable<int> branchID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSalesInvoice_Result>("GetAllSalesInvoice", fyearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetAllStock_Result> GetAllStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStock_Result>("GetAllStock");
        }
    
        public virtual ObjectResult<GetAllStockIssue_Result> GetAllStockIssue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStockIssue_Result>("GetAllStockIssue");
        }
    
        public virtual int GetAllTaxConfiguration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllTaxConfiguration");
        }
    
        public virtual ObjectResult<GetAllTransitStationMasters_Result> GetAllTransitStationMasters()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTransitStationMasters_Result>("GetAllTransitStationMasters");
        }
    
        public virtual ObjectResult<GetAllZoneChartDetails_Result> GetAllZoneChartDetails(Nullable<int> zoneCategoryID, Nullable<int> zoneID)
        {
            var zoneCategoryIDParameter = zoneCategoryID.HasValue ?
                new ObjectParameter("ZoneCategoryID", zoneCategoryID) :
                new ObjectParameter("ZoneCategoryID", typeof(int));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllZoneChartDetails_Result>("GetAllZoneChartDetails", zoneCategoryIDParameter, zoneIDParameter);
        }
    
        public virtual ObjectResult<GetAutoAWB_Result> GetAutoAWB()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAutoAWB_Result>("GetAutoAWB");
        }
    
        public virtual ObjectResult<string> GetAWBNoByCargoCourier(string awbType)
        {
            var awbTypeParameter = awbType != null ?
                new ObjectParameter("AwbType", awbType) :
                new ObjectParameter("AwbType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAWBNoByCargoCourier", awbTypeParameter);
        }
    
        public virtual int GetAWBRegister(string where)
        {
            var whereParameter = where != null ?
                new ObjectParameter("where", where) :
                new ObjectParameter("where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAWBRegister", whereParameter);
        }
    
        public virtual ObjectResult<GetAWBRegisterDummy_Result> GetAWBRegisterDummy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAWBRegisterDummy_Result>("GetAWBRegisterDummy");
        }
    
        public virtual ObjectResult<GetAWBReportD_Result> GetAWBReportD(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAWBReportD_Result>("GetAWBReportD", searchParameter);
        }
    
        public virtual int GetAWBReportDynamic(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAWBReportDynamic", searchParameter);
        }
    
        public virtual ObjectResult<GetAWBStatus_Result> GetAWBStatus(string aWBNo)
        {
            var aWBNoParameter = aWBNo != null ?
                new ObjectParameter("AWBNo", aWBNo) :
                new ObjectParameter("AWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAWBStatus_Result>("GetAWBStatus", aWBNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAwbStockCountByAWBRange(Nullable<decimal> fromAWBNo, Nullable<decimal> toAWBNo, Nullable<int> iD)
        {
            var fromAWBNoParameter = fromAWBNo.HasValue ?
                new ObjectParameter("FromAWBNo", fromAWBNo) :
                new ObjectParameter("FromAWBNo", typeof(decimal));
    
            var toAWBNoParameter = toAWBNo.HasValue ?
                new ObjectParameter("ToAWBNo", toAWBNo) :
                new ObjectParameter("ToAWBNo", typeof(decimal));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAwbStockCountByAWBRange", fromAWBNoParameter, toAWBNoParameter, iDParameter);
        }
    
        public virtual ObjectResult<GetBankReconciliation_Result> GetBankReconciliation(Nullable<int> fyearID, Nullable<int> branchID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankReconciliation_Result>("GetBankReconciliation", fyearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetBankReconciliationOutStandings_Result> GetBankReconciliationOutStandings(Nullable<int> acHeadID, Nullable<System.DateTime> fYearFrom, Nullable<System.DateTime> fYearTo)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var fYearFromParameter = fYearFrom.HasValue ?
                new ObjectParameter("FYearFrom", fYearFrom) :
                new ObjectParameter("FYearFrom", typeof(System.DateTime));
    
            var fYearToParameter = fYearTo.HasValue ?
                new ObjectParameter("FYearTo", fYearTo) :
                new ObjectParameter("FYearTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBankReconciliationOutStandings_Result>("GetBankReconciliationOutStandings", acHeadIDParameter, fYearFromParameter, fYearToParameter);
        }
    
        public virtual ObjectResult<GetBranchDetails_Result> GetBranchDetails(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBranchDetails_Result>("GetBranchDetails", branchIDParameter);
        }
    
        public virtual int GetByDepotDate(Nullable<int> depotID, Nullable<System.DateTime> transferDate)
        {
            var depotIDParameter = depotID.HasValue ?
                new ObjectParameter("DepotID", depotID) :
                new ObjectParameter("DepotID", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetByDepotDate", depotIDParameter, transferDateParameter);
        }
    
        public virtual ObjectResult<GetCargoDetails_Result> GetCargoDetails(string aWBNo)
        {
            var aWBNoParameter = aWBNo != null ?
                new ObjectParameter("AWBNo", aWBNo) :
                new ObjectParameter("AWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCargoDetails_Result>("GetCargoDetails", aWBNoParameter);
        }
    
        public virtual ObjectResult<GetCargoInScanDetail_Result> GetCargoInScanDetail(string cargoAWBNo)
        {
            var cargoAWBNoParameter = cargoAWBNo != null ?
                new ObjectParameter("CargoAWBNo", cargoAWBNo) :
                new ObjectParameter("CargoAWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCargoInScanDetail_Result>("GetCargoInScanDetail", cargoAWBNoParameter);
        }
    
        public virtual ObjectResult<GetCargoInScanDetails_Result> GetCargoInScanDetails(Nullable<int> cargoInscanID)
        {
            var cargoInscanIDParameter = cargoInscanID.HasValue ?
                new ObjectParameter("CargoInscanID", cargoInscanID) :
                new ObjectParameter("CargoInscanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCargoInScanDetails_Result>("GetCargoInScanDetails", cargoInscanIDParameter);
        }
    
        public virtual int GetCargoManifest(Nullable<System.DateTime> dateTo, Nullable<System.DateTime> dateFrom, Nullable<int> originID, Nullable<int> destinationID)
        {
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var destinationIDParameter = destinationID.HasValue ?
                new ObjectParameter("DestinationID", destinationID) :
                new ObjectParameter("DestinationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCargoManifest", dateToParameter, dateFromParameter, originIDParameter, destinationIDParameter);
        }
    
        public virtual ObjectResult<GetComboMenu_Result> GetComboMenu()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComboMenu_Result>("GetComboMenu");
        }
    
        public virtual ObjectResult<GetConsignmentEntry_Domestic_Result> GetConsignmentEntry_Domestic(string aWBNo)
        {
            var aWBNoParameter = aWBNo != null ?
                new ObjectParameter("AWBNo", aWBNo) :
                new ObjectParameter("AWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsignmentEntry_Domestic_Result>("GetConsignmentEntry_Domestic", aWBNoParameter);
        }
    
        public virtual ObjectResult<GetConsignmentEntry_International_Result> GetConsignmentEntry_International(string aWBNo)
        {
            var aWBNoParameter = aWBNo != null ?
                new ObjectParameter("AWBNo", aWBNo) :
                new ObjectParameter("AWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsignmentEntry_International_Result>("GetConsignmentEntry_International", aWBNoParameter);
        }
    
        public virtual ObjectResult<GetCourierByDRSDate_Result> GetCourierByDRSDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourierByDRSDate_Result>("GetCourierByDRSDate", dateParameter);
        }
    
        public virtual ObjectResult<GetCourierStatusByID_Result> GetCourierStatusByID(Nullable<int> courierStatusID)
        {
            var courierStatusIDParameter = courierStatusID.HasValue ?
                new ObjectParameter("courierStatusID", courierStatusID) :
                new ObjectParameter("courierStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourierStatusByID_Result>("GetCourierStatusByID", courierStatusIDParameter);
        }
    
        public virtual ObjectResult<GetCurrencyByCountryID_Result> GetCurrencyByCountryID(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCurrencyByCountryID_Result>("GetCurrencyByCountryID", countryIDParameter);
        }
    
        public virtual int GetCustomerAdvanceAmount(Nullable<int> customerID, string type)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerAdvanceAmount", customerIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetCustomeRateChart_Result> GetCustomeRateChart(Nullable<int> customerID, Nullable<int> contractType)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var contractTypeParameter = contractType.HasValue ?
                new ObjectParameter("contractType", contractType) :
                new ObjectParameter("contractType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomeRateChart_Result>("GetCustomeRateChart", customerIDParameter, contractTypeParameter);
        }
    
        public virtual ObjectResult<GetCustomerContract_Result> GetCustomerContract()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerContract_Result>("GetCustomerContract");
        }
    
        public virtual ObjectResult<GetCustomerEnquiry_Result> GetCustomerEnquiry()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerEnquiry_Result>("GetCustomerEnquiry");
        }
    
        public virtual ObjectResult<GetCustomerEnquiryListByCustomerID_Result> GetCustomerEnquiryListByCustomerID(Nullable<int> customerID, string userRole)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerEnquiryListByCustomerID_Result>("GetCustomerEnquiryListByCustomerID", customerIDParameter, userRoleParameter);
        }
    
        public virtual ObjectResult<GetCustomerInovice4Rpt_Result> GetCustomerInovice4Rpt(Nullable<int> iCustomerInvoiceID)
        {
            var iCustomerInvoiceIDParameter = iCustomerInvoiceID.HasValue ?
                new ObjectParameter("iCustomerInvoiceID", iCustomerInvoiceID) :
                new ObjectParameter("iCustomerInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerInovice4Rpt_Result>("GetCustomerInovice4Rpt", iCustomerInvoiceIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerInvoice_Result> GetCustomerInvoice(Nullable<int> iCustomerID, string iStartDate, string iEndDate, string aWBType)
        {
            var iCustomerIDParameter = iCustomerID.HasValue ?
                new ObjectParameter("iCustomerID", iCustomerID) :
                new ObjectParameter("iCustomerID", typeof(int));
    
            var iStartDateParameter = iStartDate != null ?
                new ObjectParameter("iStartDate", iStartDate) :
                new ObjectParameter("iStartDate", typeof(string));
    
            var iEndDateParameter = iEndDate != null ?
                new ObjectParameter("iEndDate", iEndDate) :
                new ObjectParameter("iEndDate", typeof(string));
    
            var aWBTypeParameter = aWBType != null ?
                new ObjectParameter("AWBType", aWBType) :
                new ObjectParameter("AWBType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerInvoice_Result>("GetCustomerInvoice", iCustomerIDParameter, iStartDateParameter, iEndDateParameter, aWBTypeParameter);
        }
    
        public virtual int GetCustomerInvoiceByNo(string invoiceNo)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerInvoiceByNo", invoiceNoParameter);
        }
    
        public virtual int GetCustomerInvoiceDetailReport(Nullable<int> masterID)
        {
            var masterIDParameter = masterID.HasValue ?
                new ObjectParameter("masterID", masterID) :
                new ObjectParameter("masterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerInvoiceDetailReport", masterIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerInvoiceReport_Result> GetCustomerInvoiceReport(string invoiceNo)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("invoiceNo", invoiceNo) :
                new ObjectParameter("invoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerInvoiceReport_Result>("GetCustomerInvoiceReport", invoiceNoParameter);
        }
    
        public virtual ObjectResult<GetCustomerMultiContract_Result> GetCustomerMultiContract()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerMultiContract_Result>("GetCustomerMultiContract");
        }
    
        public virtual ObjectResult<GetCustomerRates_Result> GetCustomerRates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerRates_Result>("GetCustomerRates");
        }
    
        public virtual int GetCustomerReceiptForEdit(Nullable<int> recpayID)
        {
            var recpayIDParameter = recpayID.HasValue ?
                new ObjectParameter("RecpayID", recpayID) :
                new ObjectParameter("RecpayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerReceiptForEdit", recpayIDParameter);
        }
    
        public virtual int GetCustomerReciept(string voucherNo)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCustomerReciept", voucherNoParameter);
        }
    
        public virtual ObjectResult<GetCustomerReciepts_Result> GetCustomerReciepts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerReciepts_Result>("GetCustomerReciepts");
        }
    
        public virtual ObjectResult<GetCustomersInvoices_Result> GetCustomersInvoices()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomersInvoices_Result>("GetCustomersInvoices");
        }
    
        public virtual int GetDailySalesRegister(string where)
        {
            var whereParameter = where != null ?
                new ObjectParameter("where", where) :
                new ObjectParameter("where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDailySalesRegister", whereParameter);
        }
    
        public virtual ObjectResult<GetDailySalesRegisterDummy_Result> GetDailySalesRegisterDummy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDailySalesRegisterDummy_Result>("GetDailySalesRegisterDummy");
        }
    
        public virtual int GetDatabyDate(string fieldName, Nullable<System.DateTime> dateTime, Nullable<System.DateTime> inScanDate)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var inScanDateParameter = inScanDate.HasValue ?
                new ObjectParameter("InScanDate", inScanDate) :
                new ObjectParameter("InScanDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDatabyDate", fieldNameParameter, dateTimeParameter, inScanDateParameter);
        }
    
        public virtual ObjectResult<GetDepotByCountryID_Result> GetDepotByCountryID(Nullable<int> countryID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepotByCountryID_Result>("GetDepotByCountryID", countryIDParameter);
        }
    
        public virtual ObjectResult<GetDRSCourierList_Result> GetDRSCourierList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDRSCourierList_Result>("GetDRSCourierList");
        }
    
        public virtual ObjectResult<GetDrsCourierRecordByDrsID_Result> GetDrsCourierRecordByDrsID(string iDRSID)
        {
            var iDRSIDParameter = iDRSID != null ?
                new ObjectParameter("iDRSID", iDRSID) :
                new ObjectParameter("iDRSID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDrsCourierRecordByDrsID_Result>("GetDrsCourierRecordByDrsID", iDRSIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GETDRSMAXNO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GETDRSMAXNO");
        }
    
        public virtual ObjectResult<GetDRSReportDummy_Result> GetDRSReportDummy(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDRSReportDummy_Result>("GetDRSReportDummy", searchParameter);
        }
    
        public virtual int GetDRSReportDynamic(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDRSReportDynamic", searchParameter);
        }
    
        public virtual int GetFilterCreatedBy(string fieldName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFilterCreatedBy", fieldNameParameter);
        }
    
        public virtual int GetFilterData(string fieldName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFilterData", fieldNameParameter);
        }
    
        public virtual int GetFilterRecievedBy(string fieldName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetFilterRecievedBy", fieldNameParameter);
        }
    
        public virtual ObjectResult<GetforwadingAgentReport_Result> GetforwadingAgentReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetforwadingAgentReport_Result>("GetforwadingAgentReport");
        }
    
        public virtual int GetForwardingAgentRate(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetForwardingAgentRate", searchTextParameter);
        }
    
        public virtual ObjectResult<GetForwardingAgentRateChart_Result> GetForwardingAgentRateChart(Nullable<int> fAgentID)
        {
            var fAgentIDParameter = fAgentID.HasValue ?
                new ObjectParameter("fAgentID", fAgentID) :
                new ObjectParameter("fAgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetForwardingAgentRateChart_Result>("GetForwardingAgentRateChart", fAgentIDParameter);
        }
    
        public virtual int GetHoldReleaseAWB(Nullable<System.DateTime> dateTo, Nullable<System.DateTime> dateFrom, Nullable<int> originID, Nullable<int> destinationID, string awbNo, string awbType, string holdRelease)
        {
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var originIDParameter = originID.HasValue ?
                new ObjectParameter("OriginID", originID) :
                new ObjectParameter("OriginID", typeof(int));
    
            var destinationIDParameter = destinationID.HasValue ?
                new ObjectParameter("DestinationID", destinationID) :
                new ObjectParameter("DestinationID", typeof(int));
    
            var awbNoParameter = awbNo != null ?
                new ObjectParameter("AwbNo", awbNo) :
                new ObjectParameter("AwbNo", typeof(string));
    
            var awbTypeParameter = awbType != null ?
                new ObjectParameter("AwbType", awbType) :
                new ObjectParameter("AwbType", typeof(string));
    
            var holdReleaseParameter = holdRelease != null ?
                new ObjectParameter("HoldRelease", holdRelease) :
                new ObjectParameter("HoldRelease", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetHoldReleaseAWB", dateToParameter, dateFromParameter, originIDParameter, destinationIDParameter, awbNoParameter, awbTypeParameter, holdReleaseParameter);
        }
    
        public virtual ObjectResult<GetInScanByAWBNo_Result> GetInScanByAWBNo(string aWBNO)
        {
            var aWBNOParameter = aWBNO != null ?
                new ObjectParameter("AWBNO", aWBNO) :
                new ObjectParameter("AWBNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInScanByAWBNo_Result>("GetInScanByAWBNo", aWBNOParameter);
        }
    
        public virtual ObjectResult<GetInScanGridData_Result> GetInScanGridData(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInScanGridData_Result>("GetInScanGridData", branchIDParameter);
        }
    
        public virtual ObjectResult<GetInscanInternational_Result> GetInscanInternational()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInscanInternational_Result>("GetInscanInternational");
        }
    
        public virtual ObjectResult<GetInScanRecordsForSkyLark_Result> GetInScanRecordsForSkyLark()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInScanRecordsForSkyLark_Result>("GetInScanRecordsForSkyLark");
        }
    
        public virtual ObjectResult<GetInvoicesCustomerNames_Result> GetInvoicesCustomerNames(Nullable<System.DateTime> iStartDate, Nullable<System.DateTime> iEndDate)
        {
            var iStartDateParameter = iStartDate.HasValue ?
                new ObjectParameter("iStartDate", iStartDate) :
                new ObjectParameter("iStartDate", typeof(System.DateTime));
    
            var iEndDateParameter = iEndDate.HasValue ?
                new ObjectParameter("iEndDate", iEndDate) :
                new ObjectParameter("iEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInvoicesCustomerNames_Result>("GetInvoicesCustomerNames", iStartDateParameter, iEndDateParameter);
        }
    
        public virtual ObjectResult<GetLocationZoneChart_Result> GetLocationZoneChart(string cityID, Nullable<int> zoneID)
        {
            var cityIDParameter = cityID != null ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(string));
    
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocationZoneChart_Result>("GetLocationZoneChart", cityIDParameter, zoneIDParameter);
        }
    
        public virtual ObjectResult<GetManiFestReportDummy_Result> GetManiFestReportDummy(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetManiFestReportDummy_Result>("GetManiFestReportDummy", searchParameter);
        }
    
        public virtual int GetManiFestReportDynamic(string search)
        {
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetManiFestReportDynamic", searchParameter);
        }
    
        public virtual ObjectResult<string> GetMaxAWBNo(Nullable<int> companyId, Nullable<int> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxAWBNo", companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<string> GetMaxCustomerNo(Nullable<int> branchId)
        {
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxCustomerNo", branchIdParameter);
        }
    
        public virtual ObjectResult<string> GetMaxDRSSheetNo(Nullable<int> companyId, Nullable<int> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxDRSSheetNo", companyIdParameter, branchIdParameter);
        }
    
        public virtual ObjectResult<string> GetMaxInScanSheetNo(Nullable<int> companyId, Nullable<int> branchId, string sourceType)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            var sourceTypeParameter = sourceType != null ?
                new ObjectParameter("SourceType", sourceType) :
                new ObjectParameter("SourceType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxInScanSheetNo", companyIdParameter, branchIdParameter, sourceTypeParameter);
        }
    
        public virtual ObjectResult<string> GetMaxInvoiceNo(Nullable<int> companyId, Nullable<int> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxInvoiceNo", companyIdParameter, branchIdParameter);
        }
    
        public virtual int GetMaxNumber(string fieldName, string tableName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxNumber", fieldNameParameter, tableNameParameter);
        }
    
        public virtual ObjectResult<string> GetMaxPickupRequest(Nullable<int> companyId, Nullable<int> branchId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var branchIdParameter = branchId.HasValue ?
                new ObjectParameter("BranchId", branchId) :
                new ObjectParameter("BranchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMaxPickupRequest", companyIdParameter, branchIdParameter);
        }
    
        public virtual int GetMaxVouchrNo(string inputstring)
        {
            var inputstringParameter = inputstring != null ?
                new ObjectParameter("Inputstring", inputstring) :
                new ObjectParameter("Inputstring", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxVouchrNo", inputstringParameter);
        }
    
        public virtual int GetMenu(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMenu", userNameParameter);
        }
    
        public virtual int GetMenuAccessLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMenuAccessLevel");
        }
    
        public virtual int GetMultipleAWBStatus(Nullable<System.DateTime> dateTo, Nullable<System.DateTime> dateFrom, Nullable<int> originCountryID, Nullable<int> destinationCountryID, string awbNo, string awbType, Nullable<int> originCityID, Nullable<int> destinationCityID)
        {
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var originCountryIDParameter = originCountryID.HasValue ?
                new ObjectParameter("OriginCountryID", originCountryID) :
                new ObjectParameter("OriginCountryID", typeof(int));
    
            var destinationCountryIDParameter = destinationCountryID.HasValue ?
                new ObjectParameter("DestinationCountryID", destinationCountryID) :
                new ObjectParameter("DestinationCountryID", typeof(int));
    
            var awbNoParameter = awbNo != null ?
                new ObjectParameter("AwbNo", awbNo) :
                new ObjectParameter("AwbNo", typeof(string));
    
            var awbTypeParameter = awbType != null ?
                new ObjectParameter("AwbType", awbType) :
                new ObjectParameter("AwbType", typeof(string));
    
            var originCityIDParameter = originCityID.HasValue ?
                new ObjectParameter("OriginCityID", originCityID) :
                new ObjectParameter("OriginCityID", typeof(int));
    
            var destinationCityIDParameter = destinationCityID.HasValue ?
                new ObjectParameter("DestinationCityID", destinationCityID) :
                new ObjectParameter("DestinationCityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMultipleAWBStatus", dateToParameter, dateFromParameter, originCountryIDParameter, destinationCountryIDParameter, awbNoParameter, awbTypeParameter, originCityIDParameter, destinationCityIDParameter);
        }
    
        public virtual ObjectResult<GetOpeningBalanceForYE_Result> GetOpeningBalanceForYE(Nullable<int> acFyearID, Nullable<int> acCompanyID)
        {
            var acFyearIDParameter = acFyearID.HasValue ?
                new ObjectParameter("AcFyearID", acFyearID) :
                new ObjectParameter("AcFyearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOpeningBalanceForYE_Result>("GetOpeningBalanceForYE", acFyearIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<GetOutScanGridData_Result> GetOutScanGridData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOutScanGridData_Result>("GetOutScanGridData");
        }
    
        public virtual int GetParentMenuItems()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetParentMenuItems");
        }
    
        public virtual int GetPaymentBySupplierID(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPaymentBySupplierID", supplierIDParameter);
        }
    
        public virtual ObjectResult<GetPDCReminder_Result> GetPDCReminder(Nullable<System.DateTime> maturedDate, Nullable<int> flag, Nullable<int> branchID)
        {
            var maturedDateParameter = maturedDate.HasValue ?
                new ObjectParameter("MaturedDate", maturedDate) :
                new ObjectParameter("MaturedDate", typeof(System.DateTime));
    
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPDCReminder_Result>("GetPDCReminder", maturedDateParameter, flagParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetPLOpeningAmount_Result> GetPLOpeningAmount(Nullable<int> acFinancialYearID, Nullable<int> acCompanyID)
        {
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPLOpeningAmount_Result>("GetPLOpeningAmount", acFinancialYearIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<GetPODRecordsForSkyLark_Result> GetPODRecordsForSkyLark()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPODRecordsForSkyLark_Result>("GetPODRecordsForSkyLark");
        }
    
        public virtual ObjectResult<GetPrintAwbnoInvoice_Result> GetPrintAwbnoInvoice(string iAwbno)
        {
            var iAwbnoParameter = iAwbno != null ?
                new ObjectParameter("iAwbno", iAwbno) :
                new ObjectParameter("iAwbno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPrintAwbnoInvoice_Result>("GetPrintAwbnoInvoice", iAwbnoParameter);
        }
    
        public virtual ObjectResult<GetRateTypeByCustomer_Result> GetRateTypeByCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRateTypeByCustomer_Result>("GetRateTypeByCustomer", customerIDParameter);
        }
    
        public virtual int GetReceiptByCustomerID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReceiptByCustomerID", customerIDParameter);
        }
    
        public virtual int GetRecords(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetRecords", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual ObjectResult<GetRoles_Result> GetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoles_Result>("GetRoles");
        }
    
        public virtual ObjectResult<GetSubMenu_Result> GetSubMenu(Nullable<int> menuID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubMenu_Result>("GetSubMenu", menuIDParameter);
        }
    
        public virtual int GetSupplierPaymentByVoucherNo(string voucherNo)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("voucherNo", voucherNo) :
                new ObjectParameter("voucherNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSupplierPaymentByVoucherNo", voucherNoParameter);
        }
    
        public virtual int GetSupplierPaymentForEdit(Nullable<int> recpayID)
        {
            var recpayIDParameter = recpayID.HasValue ?
                new ObjectParameter("RecpayID", recpayID) :
                new ObjectParameter("RecpayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSupplierPaymentForEdit", recpayIDParameter);
        }
    
        public virtual int GetSupplierRecPayList(Nullable<int> fyearID, Nullable<int> branchID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSupplierRecPayList", fyearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<GetTempCustomerInvoice_Result> GetTempCustomerInvoice(string iAWBNo)
        {
            var iAWBNoParameter = iAWBNo != null ?
                new ObjectParameter("iAWBNo", iAWBNo) :
                new ObjectParameter("iAWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTempCustomerInvoice_Result>("GetTempCustomerInvoice", iAWBNoParameter);
        }
    
        public virtual ObjectResult<GetTempCustomerInvoice4All_Result> GetTempCustomerInvoice4All(string iCustomerID, string iStartDate, string iEndDate)
        {
            var iCustomerIDParameter = iCustomerID != null ?
                new ObjectParameter("iCustomerID", iCustomerID) :
                new ObjectParameter("iCustomerID", typeof(string));
    
            var iStartDateParameter = iStartDate != null ?
                new ObjectParameter("iStartDate", iStartDate) :
                new ObjectParameter("iStartDate", typeof(string));
    
            var iEndDateParameter = iEndDate != null ?
                new ObjectParameter("iEndDate", iEndDate) :
                new ObjectParameter("iEndDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTempCustomerInvoice4All_Result>("GetTempCustomerInvoice4All", iCustomerIDParameter, iStartDateParameter, iEndDateParameter);
        }
    
        public virtual ObjectResult<GetTrackingDetail_Result> GetTrackingDetail(string aWBNo)
        {
            var aWBNoParameter = aWBNo != null ?
                new ObjectParameter("AWBNo", aWBNo) :
                new ObjectParameter("AWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrackingDetail_Result>("GetTrackingDetail", aWBNoParameter);
        }
    
        public virtual int GetUnDeliveredAwb(string where)
        {
            var whereParameter = where != null ?
                new ObjectParameter("where", where) :
                new ObjectParameter("where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUnDeliveredAwb", whereParameter);
        }
    
        public virtual ObjectResult<GetUndeliveredAWBDummy_Result> GetUndeliveredAWBDummy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUndeliveredAWBDummy_Result>("GetUndeliveredAWBDummy");
        }
    
        public virtual int GetUserMenu(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetUserMenu", userNameParameter);
        }
    
        public virtual ObjectResult<string> GetUserMenuPagesList(string userName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserMenuPagesList", userNameParameter);
        }
    
        public virtual ObjectResult<GetVehiclesByDRSDate_Result> GetVehiclesByDRSDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehiclesByDRSDate_Result>("GetVehiclesByDRSDate", dateParameter);
        }
    
        public virtual ObjectResult<GetZoneChart_Result> GetZoneChart(string zoneStatus, Nullable<int> zoneCategoryID)
        {
            var zoneStatusParameter = zoneStatus != null ?
                new ObjectParameter("ZoneStatus", zoneStatus) :
                new ObjectParameter("ZoneStatus", typeof(string));
    
            var zoneCategoryIDParameter = zoneCategoryID.HasValue ?
                new ObjectParameter("ZoneCategoryID", zoneCategoryID) :
                new ObjectParameter("ZoneCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZoneChart_Result>("GetZoneChart", zoneStatusParameter, zoneCategoryIDParameter);
        }
    
        public virtual ObjectResult<GetZoneChartByAgentRate_Result> GetZoneChartByAgentRate(Nullable<int> agentID)
        {
            var agentIDParameter = agentID.HasValue ?
                new ObjectParameter("AgentID", agentID) :
                new ObjectParameter("AgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZoneChartByAgentRate_Result>("GetZoneChartByAgentRate", agentIDParameter);
        }
    
        public virtual ObjectResult<GetZoneChartByCustomer_Result> GetZoneChartByCustomer(Nullable<int> customerRateTypeID)
        {
            var customerRateTypeIDParameter = customerRateTypeID.HasValue ?
                new ObjectParameter("CustomerRateTypeID", customerRateTypeID) :
                new ObjectParameter("CustomerRateTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZoneChartByCustomer_Result>("GetZoneChartByCustomer", customerRateTypeIDParameter);
        }
    
        public virtual ObjectResult<GetZoneChartByForwardingAgent_Result> GetZoneChartByForwardingAgent(Nullable<int> fordardingAgentID)
        {
            var fordardingAgentIDParameter = fordardingAgentID.HasValue ?
                new ObjectParameter("FordardingAgentID", fordardingAgentID) :
                new ObjectParameter("FordardingAgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZoneChartByForwardingAgent_Result>("GetZoneChartByForwardingAgent", fordardingAgentIDParameter);
        }
    
        public virtual ObjectResult<GetZoneChartCity_Result> GetZoneChartCity(Nullable<int> zoneID, Nullable<int> countryID)
        {
            var zoneIDParameter = zoneID.HasValue ?
                new ObjectParameter("ZoneID", zoneID) :
                new ObjectParameter("ZoneID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZoneChartCity_Result>("GetZoneChartCity", zoneIDParameter, countryIDParameter);
        }
    
        public virtual int InsertAcJournalDetail(Nullable<int> acJournalID, Nullable<int> acHeadID, Nullable<decimal> amount, string remarks, Nullable<int> branchID)
        {
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAcJournalDetail", acJournalIDParameter, acHeadIDParameter, amountParameter, remarksParameter, branchIDParameter);
        }
    
        public virtual int InsertAcJournalMaster(ObjectParameter acjournalid, string voucherNo, Nullable<System.DateTime> transDate, Nullable<int> acFinancialYearID, string voucherType, Nullable<short> transType, Nullable<bool> statusDelete, string remarks, Nullable<int> acCompanyID)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            var voucherTypeParameter = voucherType != null ?
                new ObjectParameter("VoucherType", voucherType) :
                new ObjectParameter("VoucherType", typeof(string));
    
            var transTypeParameter = transType.HasValue ?
                new ObjectParameter("TransType", transType) :
                new ObjectParameter("TransType", typeof(short));
    
            var statusDeleteParameter = statusDelete.HasValue ?
                new ObjectParameter("StatusDelete", statusDelete) :
                new ObjectParameter("StatusDelete", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAcJournalMaster", acjournalid, voucherNoParameter, transDateParameter, acFinancialYearIDParameter, voucherTypeParameter, transTypeParameter, statusDeleteParameter, remarksParameter, acCompanyIDParameter);
        }
    
        public virtual int InsertRecPayDetail(Nullable<int> recPayID, Nullable<int> invoiceID, Nullable<decimal> amount, string remarks, Nullable<bool> statusAdvance, string statusinvoice)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusAdvanceParameter = statusAdvance.HasValue ?
                new ObjectParameter("StatusAdvance", statusAdvance) :
                new ObjectParameter("StatusAdvance", typeof(bool));
    
            var statusinvoiceParameter = statusinvoice != null ?
                new ObjectParameter("Statusinvoice", statusinvoice) :
                new ObjectParameter("Statusinvoice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRecPayDetail", recPayIDParameter, invoiceIDParameter, amountParameter, remarksParameter, statusAdvanceParameter, statusinvoiceParameter);
        }
    
        public virtual int InsertRecpaymaster(ObjectParameter redpayid, string voucherNo, Nullable<System.DateTime> recPayDate, Nullable<int> customerId, string partyType, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string remarks, Nullable<int> acJournalID, Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<bool> isopening)
        {
            var voucherNoParameter = voucherNo != null ?
                new ObjectParameter("VoucherNo", voucherNo) :
                new ObjectParameter("VoucherNo", typeof(string));
    
            var recPayDateParameter = recPayDate.HasValue ?
                new ObjectParameter("RecPayDate", recPayDate) :
                new ObjectParameter("RecPayDate", typeof(System.DateTime));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var partyTypeParameter = partyType != null ?
                new ObjectParameter("PartyType", partyType) :
                new ObjectParameter("PartyType", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var isopeningParameter = isopening.HasValue ?
                new ObjectParameter("Isopening", isopening) :
                new ObjectParameter("Isopening", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRecpaymaster", redpayid, voucherNoParameter, recPayDateParameter, customerIdParameter, partyTypeParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, remarksParameter, acJournalIDParameter, fYearIDParameter, acCompanyIDParameter, isopeningParameter);
        }
    
        public virtual int InvoiceRegisterReport(Nullable<int> fYearID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerID, Nullable<int> acCompanyID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InvoiceRegisterReport", fYearIDParameter, fromDateParameter, toDateParameter, customerIDParameter, acCompanyIDParameter);
        }
    
        public virtual int ItemUnitDelete(string itemUnitIDs)
        {
            var itemUnitIDsParameter = itemUnitIDs != null ?
                new ObjectParameter("ItemUnitIDs", itemUnitIDs) :
                new ObjectParameter("ItemUnitIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemUnitDelete", itemUnitIDsParameter);
        }
    
        public virtual int ItemUnitInsert(string unitName, Nullable<int> equalentQty, string remarks, ObjectParameter itemUnitID)
        {
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var equalentQtyParameter = equalentQty.HasValue ?
                new ObjectParameter("EqualentQty", equalentQty) :
                new ObjectParameter("EqualentQty", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemUnitInsert", unitNameParameter, equalentQtyParameter, remarksParameter, itemUnitID);
        }
    
        public virtual ObjectResult<ItemUnitSelect_Result> ItemUnitSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemUnitSelect_Result>("ItemUnitSelect");
        }
    
        public virtual ObjectResult<ItemUnitSelectAll_Result> ItemUnitSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemUnitSelectAll_Result>("ItemUnitSelectAll");
        }
    
        public virtual ObjectResult<ItemUnitSelectByID_Result> ItemUnitSelectByID(Nullable<int> itemUnitID)
        {
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemUnitSelectByID_Result>("ItemUnitSelectByID", itemUnitIDParameter);
        }
    
        public virtual int ItemUnitUpdate(Nullable<int> itemUnitID, string unitName, Nullable<int> equalentQty, string remarks)
        {
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var unitNameParameter = unitName != null ?
                new ObjectParameter("UnitName", unitName) :
                new ObjectParameter("UnitName", typeof(string));
    
            var equalentQtyParameter = equalentQty.HasValue ?
                new ObjectParameter("EqualentQty", equalentQty) :
                new ObjectParameter("EqualentQty", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ItemUnitUpdate", itemUnitIDParameter, unitNameParameter, equalentQtyParameter, remarksParameter);
        }
    
        public virtual int JobEnquiryDelete(string jobEnquiryIDs)
        {
            var jobEnquiryIDsParameter = jobEnquiryIDs != null ?
                new ObjectParameter("JobEnquiryIDs", jobEnquiryIDs) :
                new ObjectParameter("JobEnquiryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobEnquiryDelete", jobEnquiryIDsParameter);
        }
    
        public virtual int JobEnquiryDetailsDelete(string jobEnquiryDetailIDs)
        {
            var jobEnquiryDetailIDsParameter = jobEnquiryDetailIDs != null ?
                new ObjectParameter("JobEnquiryDetailIDs", jobEnquiryDetailIDs) :
                new ObjectParameter("JobEnquiryDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobEnquiryDetailsDelete", jobEnquiryDetailIDsParameter);
        }
    
        public virtual int JobEnquiryDetailsInsert(Nullable<int> jobEnquiryID, Nullable<int> productID, Nullable<int> quantity, Nullable<int> itemUnitID, Nullable<decimal> rate, Nullable<decimal> cost, Nullable<decimal> revenue, Nullable<decimal> profit, string description)
        {
            var jobEnquiryIDParameter = jobEnquiryID.HasValue ?
                new ObjectParameter("JobEnquiryID", jobEnquiryID) :
                new ObjectParameter("JobEnquiryID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var revenueParameter = revenue.HasValue ?
                new ObjectParameter("Revenue", revenue) :
                new ObjectParameter("Revenue", typeof(decimal));
    
            var profitParameter = profit.HasValue ?
                new ObjectParameter("Profit", profit) :
                new ObjectParameter("Profit", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobEnquiryDetailsInsert", jobEnquiryIDParameter, productIDParameter, quantityParameter, itemUnitIDParameter, rateParameter, costParameter, revenueParameter, profitParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<JobEnquiryDetailsSelectByJobEnquiryID_Result> JobEnquiryDetailsSelectByJobEnquiryID(Nullable<int> jobEnquiryID)
        {
            var jobEnquiryIDParameter = jobEnquiryID.HasValue ?
                new ObjectParameter("JobEnquiryID", jobEnquiryID) :
                new ObjectParameter("JobEnquiryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobEnquiryDetailsSelectByJobEnquiryID_Result>("JobEnquiryDetailsSelectByJobEnquiryID", jobEnquiryIDParameter);
        }
    
        public virtual int JobEnquiryInsert(Nullable<System.DateTime> jobEnquiryDate, string jobName, string jobDescription, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> contractValue, Nullable<int> customerID, Nullable<int> employeeID, Nullable<int> locationID, string remarks, string jobEnquiryDetails)
        {
            var jobEnquiryDateParameter = jobEnquiryDate.HasValue ?
                new ObjectParameter("JobEnquiryDate", jobEnquiryDate) :
                new ObjectParameter("JobEnquiryDate", typeof(System.DateTime));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var contractValueParameter = contractValue.HasValue ?
                new ObjectParameter("ContractValue", contractValue) :
                new ObjectParameter("ContractValue", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var jobEnquiryDetailsParameter = jobEnquiryDetails != null ?
                new ObjectParameter("JobEnquiryDetails", jobEnquiryDetails) :
                new ObjectParameter("JobEnquiryDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobEnquiryInsert", jobEnquiryDateParameter, jobNameParameter, jobDescriptionParameter, startDateParameter, endDateParameter, contractValueParameter, customerIDParameter, employeeIDParameter, locationIDParameter, remarksParameter, jobEnquiryDetailsParameter);
        }
    
        public virtual ObjectResult<JobEnquirySelectAll_Result> JobEnquirySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobEnquirySelectAll_Result>("JobEnquirySelectAll");
        }
    
        public virtual ObjectResult<JobEnquirySelectByID_Result> JobEnquirySelectByID(Nullable<int> jobEnquiryID)
        {
            var jobEnquiryIDParameter = jobEnquiryID.HasValue ?
                new ObjectParameter("JobEnquiryID", jobEnquiryID) :
                new ObjectParameter("JobEnquiryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobEnquirySelectByID_Result>("JobEnquirySelectByID", jobEnquiryIDParameter);
        }
    
        public virtual ObjectResult<JobEnquirySelectJob_Result> JobEnquirySelectJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobEnquirySelectJob_Result>("JobEnquirySelectJob");
        }
    
        public virtual int JobEnquiryUpdate(Nullable<int> jobEnquiryID, Nullable<System.DateTime> jobEnquiryDate, string jobName, string jobDescription, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> contractValue, Nullable<int> customerID, Nullable<int> employeeID, Nullable<int> locationID, string remarks)
        {
            var jobEnquiryIDParameter = jobEnquiryID.HasValue ?
                new ObjectParameter("JobEnquiryID", jobEnquiryID) :
                new ObjectParameter("JobEnquiryID", typeof(int));
    
            var jobEnquiryDateParameter = jobEnquiryDate.HasValue ?
                new ObjectParameter("JobEnquiryDate", jobEnquiryDate) :
                new ObjectParameter("JobEnquiryDate", typeof(System.DateTime));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var contractValueParameter = contractValue.HasValue ?
                new ObjectParameter("ContractValue", contractValue) :
                new ObjectParameter("ContractValue", typeof(decimal));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobEnquiryUpdate", jobEnquiryIDParameter, jobEnquiryDateParameter, jobNameParameter, jobDescriptionParameter, startDateParameter, endDateParameter, contractValueParameter, customerIDParameter, employeeIDParameter, locationIDParameter, remarksParameter);
        }
    
        public virtual int LocationMasterDelete(string locationIDs)
        {
            var locationIDsParameter = locationIDs != null ?
                new ObjectParameter("LocationIDs", locationIDs) :
                new ObjectParameter("LocationIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LocationMasterDelete", locationIDsParameter);
        }
    
        public virtual ObjectResult<LocationMasterSelect_Result> LocationMasterSelect(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationMasterSelect_Result>("LocationMasterSelect", cityIDParameter);
        }
    
        public virtual ObjectResult<LocationMasterSelectAll_Result> LocationMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationMasterSelectAll_Result>("LocationMasterSelectAll");
        }
    
        public virtual ObjectResult<LocationMasterSelectByID_Result> LocationMasterSelectByID(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationMasterSelectByID_Result>("LocationMasterSelectByID", locationIDParameter);
        }
    
        public virtual ObjectResult<LocationSelectAll_Result> LocationSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LocationSelectAll_Result>("LocationSelectAll");
        }
    
        public virtual ObjectResult<LTMSUserSellectAll_Result> LTMSUserSellectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LTMSUserSellectAll_Result>("LTMSUserSellectAll");
        }
    
        public virtual int MenuUpDown(Nullable<int> iD, Nullable<int> uP)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var uPParameter = uP.HasValue ?
                new ObjectParameter("UP", uP) :
                new ObjectParameter("UP", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MenuUpDown", iDParameter, uPParameter);
        }
    
        public virtual int MUpdateInscanSheetNo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MUpdateInscanSheetNo");
        }
    
        public virtual ObjectResult<OriginSelectAll_Result> OriginSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OriginSelectAll_Result>("OriginSelectAll");
        }
    
        public virtual int proACBalanceSheet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proACBalanceSheet");
        }
    
        public virtual int proAcLedger()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proAcLedger");
        }
    
        public virtual int proAgeingAnalysis(Nullable<int> intCustomerID, string dteFromDate, string dteToDate, Nullable<int> intcurrencyID, Nullable<int> intCompanyID, Nullable<int> intControlHeadID)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intcurrencyIDParameter = intcurrencyID.HasValue ?
                new ObjectParameter("intcurrencyID", intcurrencyID) :
                new ObjectParameter("intcurrencyID", typeof(int));
    
            var intCompanyIDParameter = intCompanyID.HasValue ?
                new ObjectParameter("intCompanyID", intCompanyID) :
                new ObjectParameter("intCompanyID", typeof(int));
    
            var intControlHeadIDParameter = intControlHeadID.HasValue ?
                new ObjectParameter("intControlHeadID", intControlHeadID) :
                new ObjectParameter("intControlHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proAgeingAnalysis", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter, intcurrencyIDParameter, intCompanyIDParameter, intControlHeadIDParameter);
        }
    
        public virtual int proAWBDetails(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proAWBDetails", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proAWBDetailsDatewise_Result> proAWBDetailsDatewise(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proAWBDetailsDatewise_Result>("proAWBDetailsDatewise", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proAWBImportDetails_Result> proAWBImportDetails(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proAWBImportDetails_Result>("proAWBImportDetails", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proAWBInscan_Result> proAWBInscan(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proAWBInscan_Result>("proAWBInscan", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proAWBNotInvoiced_Result> proAWBNotInvoiced(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proAWBNotInvoiced_Result>("proAWBNotInvoiced", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual int proAWBNotOutscan(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proAWBNotOutscan", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proAWBOutScan_Result> proAWBOutScan(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID, string chrStatus)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            var chrStatusParameter = chrStatus != null ?
                new ObjectParameter("chrStatus", chrStatus) :
                new ObjectParameter("chrStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proAWBOutScan_Result>("proAWBOutScan", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter, chrStatusParameter);
        }
    
        public virtual ObjectResult<proAWBPODPenndingList_Result> proAWBPODPenndingList(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proAWBPODPenndingList_Result>("proAWBPODPenndingList", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proBranchExport_Result> proBranchExport(Nullable<int> intExportNo, string chrStatusInscan)
        {
            var intExportNoParameter = intExportNo.HasValue ?
                new ObjectParameter("intExportNo", intExportNo) :
                new ObjectParameter("intExportNo", typeof(int));
    
            var chrStatusInscanParameter = chrStatusInscan != null ?
                new ObjectParameter("chrStatusInscan", chrStatusInscan) :
                new ObjectParameter("chrStatusInscan", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proBranchExport_Result>("proBranchExport", intExportNoParameter, chrStatusInscanParameter);
        }
    
        public virtual ObjectResult<proCADCollectNotcollect_Result> proCADCollectNotcollect(Nullable<int> intEmployeeID, string dteDateFrom, string dteDateTo, string chrstatus)
        {
            var intEmployeeIDParameter = intEmployeeID.HasValue ?
                new ObjectParameter("intEmployeeID", intEmployeeID) :
                new ObjectParameter("intEmployeeID", typeof(int));
    
            var dteDateFromParameter = dteDateFrom != null ?
                new ObjectParameter("dteDateFrom", dteDateFrom) :
                new ObjectParameter("dteDateFrom", typeof(string));
    
            var dteDateToParameter = dteDateTo != null ?
                new ObjectParameter("dteDateTo", dteDateTo) :
                new ObjectParameter("dteDateTo", typeof(string));
    
            var chrstatusParameter = chrstatus != null ?
                new ObjectParameter("chrstatus", chrstatus) :
                new ObjectParameter("chrstatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proCADCollectNotcollect_Result>("proCADCollectNotcollect", intEmployeeIDParameter, dteDateFromParameter, dteDateToParameter, chrstatusParameter);
        }
    
        public virtual ObjectResult<proCashCollectionReports_Result> proCashCollectionReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proCashCollectionReports_Result>("proCashCollectionReports");
        }
    
        public virtual ObjectResult<ProCODPending_Result> ProCODPending(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProCODPending_Result>("ProCODPending", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual int proCollectionSaleCourierwise(Nullable<int> intEmployeeId, string dteDateFrom, string dteDateTo)
        {
            var intEmployeeIdParameter = intEmployeeId.HasValue ?
                new ObjectParameter("intEmployeeId", intEmployeeId) :
                new ObjectParameter("intEmployeeId", typeof(int));
    
            var dteDateFromParameter = dteDateFrom != null ?
                new ObjectParameter("DteDateFrom", dteDateFrom) :
                new ObjectParameter("DteDateFrom", typeof(string));
    
            var dteDateToParameter = dteDateTo != null ?
                new ObjectParameter("DteDateTo", dteDateTo) :
                new ObjectParameter("DteDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proCollectionSaleCourierwise", intEmployeeIdParameter, dteDateFromParameter, dteDateToParameter);
        }
    
        public virtual ObjectResult<proCollectionSaleReport_Result> proCollectionSaleReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proCollectionSaleReport_Result>("proCollectionSaleReport");
        }
    
        public virtual int proCollectionSalesCustomerWise(Nullable<int> intCustomerId, Nullable<int> intProductId, Nullable<int> intEmployeeID, string dtedatefrom, string dteDateto)
        {
            var intCustomerIdParameter = intCustomerId.HasValue ?
                new ObjectParameter("intCustomerId", intCustomerId) :
                new ObjectParameter("intCustomerId", typeof(int));
    
            var intProductIdParameter = intProductId.HasValue ?
                new ObjectParameter("intProductId", intProductId) :
                new ObjectParameter("intProductId", typeof(int));
    
            var intEmployeeIDParameter = intEmployeeID.HasValue ?
                new ObjectParameter("intEmployeeID", intEmployeeID) :
                new ObjectParameter("intEmployeeID", typeof(int));
    
            var dtedatefromParameter = dtedatefrom != null ?
                new ObjectParameter("Dtedatefrom", dtedatefrom) :
                new ObjectParameter("Dtedatefrom", typeof(string));
    
            var dteDatetoParameter = dteDateto != null ?
                new ObjectParameter("dteDateto", dteDateto) :
                new ObjectParameter("dteDateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proCollectionSalesCustomerWise", intCustomerIdParameter, intProductIdParameter, intEmployeeIDParameter, dtedatefromParameter, dteDatetoParameter);
        }
    
        public virtual ObjectResult<proCustomerInvoice_Result> proCustomerInvoice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proCustomerInvoice_Result>("proCustomerInvoice");
        }
    
        public virtual ObjectResult<proCustomerInvoiceReport_Result> proCustomerInvoiceReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proCustomerInvoiceReport_Result>("proCustomerInvoiceReport");
        }
    
        public virtual int ProCustomerOutstanding(Nullable<int> intCustomerID, string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID, Nullable<int> intCustomerControlHeadID)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            var intCustomerControlHeadIDParameter = intCustomerControlHeadID.HasValue ?
                new ObjectParameter("intCustomerControlHeadID", intCustomerControlHeadID) :
                new ObjectParameter("intCustomerControlHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProCustomerOutstanding", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter, intCustomerControlHeadIDParameter);
        }
    
        public virtual int ProCustomerStatement(Nullable<int> intCustomerID, string dteFromDate, string dteToDate, Nullable<int> intControlHeadID, Nullable<int> intAcCompanyID, Nullable<int> intCustomerControlHeadID)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var intControlHeadIDParameter = intControlHeadID.HasValue ?
                new ObjectParameter("intControlHeadID", intControlHeadID) :
                new ObjectParameter("intControlHeadID", typeof(int));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            var intCustomerControlHeadIDParameter = intCustomerControlHeadID.HasValue ?
                new ObjectParameter("intCustomerControlHeadID", intCustomerControlHeadID) :
                new ObjectParameter("intCustomerControlHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProCustomerStatement", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter, intControlHeadIDParameter, intAcCompanyIDParameter, intCustomerControlHeadIDParameter);
        }
    
        public virtual int ProCustomerStatementNew(Nullable<int> intCustomerID, Nullable<System.DateTime> dteFromDate, Nullable<System.DateTime> dteToDate, Nullable<int> intControlHeadID, Nullable<int> intAcCompanyID, Nullable<int> intCustomerControlHeadID)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate.HasValue ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(System.DateTime));
    
            var dteToDateParameter = dteToDate.HasValue ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(System.DateTime));
    
            var intControlHeadIDParameter = intControlHeadID.HasValue ?
                new ObjectParameter("intControlHeadID", intControlHeadID) :
                new ObjectParameter("intControlHeadID", typeof(int));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            var intCustomerControlHeadIDParameter = intCustomerControlHeadID.HasValue ?
                new ObjectParameter("intCustomerControlHeadID", intCustomerControlHeadID) :
                new ObjectParameter("intCustomerControlHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProCustomerStatementNew", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter, intControlHeadIDParameter, intAcCompanyIDParameter, intCustomerControlHeadIDParameter);
        }
    
        public virtual ObjectResult<proDailySalesCollection_Result> proDailySalesCollection()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proDailySalesCollection_Result>("proDailySalesCollection");
        }
    
        public virtual int proDataTransfer(string strSoueceDB, string strDestinationDB)
        {
            var strSoueceDBParameter = strSoueceDB != null ?
                new ObjectParameter("strSoueceDB", strSoueceDB) :
                new ObjectParameter("strSoueceDB", typeof(string));
    
            var strDestinationDBParameter = strDestinationDB != null ?
                new ObjectParameter("strDestinationDB", strDestinationDB) :
                new ObjectParameter("strDestinationDB", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proDataTransfer", strSoueceDBParameter, strDestinationDBParameter);
        }
    
        public virtual int proDeliveredAWBs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proDeliveredAWBs");
        }
    
        public virtual int proDeliveryPending(Nullable<int> intConsignor, Nullable<int> intConsignee, Nullable<int> intDestination, Nullable<int> intFagentID, string chrType, string dteFromDate, string dteToDate)
        {
            var intConsignorParameter = intConsignor.HasValue ?
                new ObjectParameter("intConsignor", intConsignor) :
                new ObjectParameter("intConsignor", typeof(int));
    
            var intConsigneeParameter = intConsignee.HasValue ?
                new ObjectParameter("intConsignee", intConsignee) :
                new ObjectParameter("intConsignee", typeof(int));
    
            var intDestinationParameter = intDestination.HasValue ?
                new ObjectParameter("intDestination", intDestination) :
                new ObjectParameter("intDestination", typeof(int));
    
            var intFagentIDParameter = intFagentID.HasValue ?
                new ObjectParameter("intFagentID", intFagentID) :
                new ObjectParameter("intFagentID", typeof(int));
    
            var chrTypeParameter = chrType != null ?
                new ObjectParameter("ChrType", chrType) :
                new ObjectParameter("ChrType", typeof(string));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proDeliveryPending", intConsignorParameter, intConsigneeParameter, intDestinationParameter, intFagentIDParameter, chrTypeParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual int proDeliveryPendingConsignments(Nullable<int> intConsignor, Nullable<int> intConsignee, Nullable<int> intDestination, string dteFromDate, string dteToDate)
        {
            var intConsignorParameter = intConsignor.HasValue ?
                new ObjectParameter("intConsignor", intConsignor) :
                new ObjectParameter("intConsignor", typeof(int));
    
            var intConsigneeParameter = intConsignee.HasValue ?
                new ObjectParameter("intConsignee", intConsignee) :
                new ObjectParameter("intConsignee", typeof(int));
    
            var intDestinationParameter = intDestination.HasValue ?
                new ObjectParameter("intDestination", intDestination) :
                new ObjectParameter("intDestination", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proDeliveryPendingConsignments", intConsignorParameter, intConsigneeParameter, intDestinationParameter, dteFromDateParameter, dteToDateParameter);
        }
    
        public virtual ObjectResult<ProDeliveryRunSheet_Result> ProDeliveryRunSheet(string intDrsNo)
        {
            var intDrsNoParameter = intDrsNo != null ?
                new ObjectParameter("intDrsNo", intDrsNo) :
                new ObjectParameter("intDrsNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProDeliveryRunSheet_Result>("ProDeliveryRunSheet", intDrsNoParameter);
        }
    
        public virtual ObjectResult<proDestinationWiseAWBCount_Result> proDestinationWiseAWBCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proDestinationWiseAWBCount_Result>("proDestinationWiseAWBCount");
        }
    
        public virtual ObjectResult<proDRSDetailed_Result> proDRSDetailed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proDRSDetailed_Result>("proDRSDetailed");
        }
    
        public virtual int proDRSPending(string dteDateFrom, string dteDateTo)
        {
            var dteDateFromParameter = dteDateFrom != null ?
                new ObjectParameter("DteDateFrom", dteDateFrom) :
                new ObjectParameter("DteDateFrom", typeof(string));
    
            var dteDateToParameter = dteDateTo != null ?
                new ObjectParameter("dteDateTo", dteDateTo) :
                new ObjectParameter("dteDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proDRSPending", dteDateFromParameter, dteDateToParameter);
        }
    
        public virtual ObjectResult<proDRSwiseSalesReport_Result> proDRSwiseSalesReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proDRSwiseSalesReport_Result>("proDRSwiseSalesReport");
        }
    
        public virtual int ProductCategoryMasterDelete(string productCategoryIDs)
        {
            var productCategoryIDsParameter = productCategoryIDs != null ?
                new ObjectParameter("ProductCategoryIDs", productCategoryIDs) :
                new ObjectParameter("ProductCategoryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductCategoryMasterDelete", productCategoryIDsParameter);
        }
    
        public virtual int ProductCategoryMasterInsert(string productCategoryName)
        {
            var productCategoryNameParameter = productCategoryName != null ?
                new ObjectParameter("ProductCategoryName", productCategoryName) :
                new ObjectParameter("ProductCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductCategoryMasterInsert", productCategoryNameParameter);
        }
    
        public virtual ObjectResult<ProductCategoryMasterSelect_Result> ProductCategoryMasterSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCategoryMasterSelect_Result>("ProductCategoryMasterSelect");
        }
    
        public virtual ObjectResult<ProductCategoryMasterSelectAll_Result> ProductCategoryMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCategoryMasterSelectAll_Result>("ProductCategoryMasterSelectAll");
        }
    
        public virtual ObjectResult<ProductCategoryMasterSelectByID_Result> ProductCategoryMasterSelectByID(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductCategoryMasterSelectByID_Result>("ProductCategoryMasterSelectByID", productCategoryIDParameter);
        }
    
        public virtual int ProductCategoryMasterUpdate(Nullable<int> productCategoryID, string productCategoryName)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var productCategoryNameParameter = productCategoryName != null ?
                new ObjectParameter("ProductCategoryName", productCategoryName) :
                new ObjectParameter("ProductCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductCategoryMasterUpdate", productCategoryIDParameter, productCategoryNameParameter);
        }
    
        public virtual int ProductItemMasterDelete(string productItemIDs)
        {
            var productItemIDsParameter = productItemIDs != null ?
                new ObjectParameter("ProductItemIDs", productItemIDs) :
                new ObjectParameter("ProductItemIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductItemMasterDelete", productItemIDsParameter);
        }
    
        public virtual int ProductItemMasterInsert(string productItemName, Nullable<int> productCategoryID, Nullable<decimal> minimumCharges)
        {
            var productItemNameParameter = productItemName != null ?
                new ObjectParameter("ProductItemName", productItemName) :
                new ObjectParameter("ProductItemName", typeof(string));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var minimumChargesParameter = minimumCharges.HasValue ?
                new ObjectParameter("MinimumCharges", minimumCharges) :
                new ObjectParameter("MinimumCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductItemMasterInsert", productItemNameParameter, productCategoryIDParameter, minimumChargesParameter);
        }
    
        public virtual ObjectResult<ProductItemMasterSelect_Result> ProductItemMasterSelect(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductItemMasterSelect_Result>("ProductItemMasterSelect", productCategoryIDParameter);
        }
    
        public virtual ObjectResult<ProductItemMasterSelectAll_Result> ProductItemMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductItemMasterSelectAll_Result>("ProductItemMasterSelectAll");
        }
    
        public virtual ObjectResult<ProductItemMasterSelectByID_Result> ProductItemMasterSelectByID(Nullable<int> productItemID)
        {
            var productItemIDParameter = productItemID.HasValue ?
                new ObjectParameter("ProductItemID", productItemID) :
                new ObjectParameter("ProductItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductItemMasterSelectByID_Result>("ProductItemMasterSelectByID", productItemIDParameter);
        }
    
        public virtual int ProductItemMasterUpdate(Nullable<int> productItemID, string productItemName, Nullable<int> productCategoryID, Nullable<decimal> minimumCharges)
        {
            var productItemIDParameter = productItemID.HasValue ?
                new ObjectParameter("ProductItemID", productItemID) :
                new ObjectParameter("ProductItemID", typeof(int));
    
            var productItemNameParameter = productItemName != null ?
                new ObjectParameter("ProductItemName", productItemName) :
                new ObjectParameter("ProductItemName", typeof(string));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var minimumChargesParameter = minimumCharges.HasValue ?
                new ObjectParameter("MinimumCharges", minimumCharges) :
                new ObjectParameter("MinimumCharges", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductItemMasterUpdate", productItemIDParameter, productItemNameParameter, productCategoryIDParameter, minimumChargesParameter);
        }
    
        public virtual int ProductsDelete(string productIDs)
        {
            var productIDsParameter = productIDs != null ?
                new ObjectParameter("ProductIDs", productIDs) :
                new ObjectParameter("ProductIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductsDelete", productIDsParameter);
        }
    
        public virtual int ProductsInsert(string productName, string productCode, Nullable<int> categoryID, Nullable<int> typeID, Nullable<decimal> endUserPrice, Nullable<decimal> resellerPrice, Nullable<decimal> specialPrice, ObjectParameter productID)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var endUserPriceParameter = endUserPrice.HasValue ?
                new ObjectParameter("EndUserPrice", endUserPrice) :
                new ObjectParameter("EndUserPrice", typeof(decimal));
    
            var resellerPriceParameter = resellerPrice.HasValue ?
                new ObjectParameter("ResellerPrice", resellerPrice) :
                new ObjectParameter("ResellerPrice", typeof(decimal));
    
            var specialPriceParameter = specialPrice.HasValue ?
                new ObjectParameter("SpecialPrice", specialPrice) :
                new ObjectParameter("SpecialPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductsInsert", productNameParameter, productCodeParameter, categoryIDParameter, typeIDParameter, endUserPriceParameter, resellerPriceParameter, specialPriceParameter, productID);
        }
    
        public virtual ObjectResult<ProductsSelect_Result> ProductsSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductsSelect_Result>("ProductsSelect");
        }
    
        public virtual ObjectResult<ProductsSelectAll_Result> ProductsSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductsSelectAll_Result>("ProductsSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<ProductsSelectByID_Result> ProductsSelectByID(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductsSelectByID_Result>("ProductsSelectByID", productIDParameter);
        }
    
        public virtual int ProductsUpdate(Nullable<int> productID, string productName, string productCode, Nullable<int> categoryID, Nullable<int> typeID, Nullable<decimal> endUserPrice, Nullable<decimal> resellerPrice, Nullable<decimal> specialPrice)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var endUserPriceParameter = endUserPrice.HasValue ?
                new ObjectParameter("EndUserPrice", endUserPrice) :
                new ObjectParameter("EndUserPrice", typeof(decimal));
    
            var resellerPriceParameter = resellerPrice.HasValue ?
                new ObjectParameter("ResellerPrice", resellerPrice) :
                new ObjectParameter("ResellerPrice", typeof(decimal));
    
            var specialPriceParameter = specialPrice.HasValue ?
                new ObjectParameter("SpecialPrice", specialPrice) :
                new ObjectParameter("SpecialPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductsUpdate", productIDParameter, productNameParameter, productCodeParameter, categoryIDParameter, typeIDParameter, endUserPriceParameter, resellerPriceParameter, specialPriceParameter);
        }
    
        public virtual int proEMPostAnalysis(string dteFromDate, string dteTodate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteTodateParameter = dteTodate != null ?
                new ObjectParameter("dteTodate", dteTodate) :
                new ObjectParameter("dteTodate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proEMPostAnalysis", dteFromDateParameter, dteTodateParameter, intAcCompanyIDParameter);
        }
    
        public virtual int proEMPostAnalysisNew(string dteFromDate, string dteTodate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteTodateParameter = dteTodate != null ?
                new ObjectParameter("dteTodate", dteTodate) :
                new ObjectParameter("dteTodate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proEMPostAnalysisNew", dteFromDateParameter, dteTodateParameter, intAcCompanyIDParameter);
        }
    
        public virtual int proEMPostAnalysisNewConsolidated(string dteFromDate, string dteTodate)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteTodateParameter = dteTodate != null ?
                new ObjectParameter("dteTodate", dteTodate) :
                new ObjectParameter("dteTodate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proEMPostAnalysisNewConsolidated", dteFromDateParameter, dteTodateParameter);
        }
    
        public virtual ObjectResult<proFAgentWiseCollection_Result> proFAgentWiseCollection()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proFAgentWiseCollection_Result>("proFAgentWiseCollection");
        }
    
        public virtual ObjectResult<Nullable<decimal>> proGetAgentCollectionRate(Nullable<int> intFAgentID, Nullable<int> intCountryID, Nullable<int> intCourierServiceID, Nullable<double> dblWeight, string charStatus, ObjectParameter monFAgentRate)
        {
            var intFAgentIDParameter = intFAgentID.HasValue ?
                new ObjectParameter("intFAgentID", intFAgentID) :
                new ObjectParameter("intFAgentID", typeof(int));
    
            var intCountryIDParameter = intCountryID.HasValue ?
                new ObjectParameter("intCountryID", intCountryID) :
                new ObjectParameter("intCountryID", typeof(int));
    
            var intCourierServiceIDParameter = intCourierServiceID.HasValue ?
                new ObjectParameter("intCourierServiceID", intCourierServiceID) :
                new ObjectParameter("intCourierServiceID", typeof(int));
    
            var dblWeightParameter = dblWeight.HasValue ?
                new ObjectParameter("dblWeight", dblWeight) :
                new ObjectParameter("dblWeight", typeof(double));
    
            var charStatusParameter = charStatus != null ?
                new ObjectParameter("charStatus", charStatus) :
                new ObjectParameter("charStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proGetAgentCollectionRate", intFAgentIDParameter, intCountryIDParameter, intCourierServiceIDParameter, dblWeightParameter, charStatusParameter, monFAgentRate);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proGetAgentDeliveryRate(Nullable<int> intFAgentID, Nullable<int> intCountryID, Nullable<int> intCourierServiceID, Nullable<double> dblWeight, string charStatus, ObjectParameter monFAgentRate)
        {
            var intFAgentIDParameter = intFAgentID.HasValue ?
                new ObjectParameter("intFAgentID", intFAgentID) :
                new ObjectParameter("intFAgentID", typeof(int));
    
            var intCountryIDParameter = intCountryID.HasValue ?
                new ObjectParameter("intCountryID", intCountryID) :
                new ObjectParameter("intCountryID", typeof(int));
    
            var intCourierServiceIDParameter = intCourierServiceID.HasValue ?
                new ObjectParameter("intCourierServiceID", intCourierServiceID) :
                new ObjectParameter("intCourierServiceID", typeof(int));
    
            var dblWeightParameter = dblWeight.HasValue ?
                new ObjectParameter("dblWeight", dblWeight) :
                new ObjectParameter("dblWeight", typeof(double));
    
            var charStatusParameter = charStatus != null ?
                new ObjectParameter("charStatus", charStatus) :
                new ObjectParameter("charStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proGetAgentDeliveryRate", intFAgentIDParameter, intCountryIDParameter, intCourierServiceIDParameter, dblWeightParameter, charStatusParameter, monFAgentRate);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proGetCustomerRate(Nullable<int> intCustomerRateTypeID, Nullable<int> intServiceID, Nullable<int> intCountryID, Nullable<int> intFAgentID, Nullable<double> dblWeight, string charStatus, ObjectParameter monCustomerRate)
        {
            var intCustomerRateTypeIDParameter = intCustomerRateTypeID.HasValue ?
                new ObjectParameter("intCustomerRateTypeID", intCustomerRateTypeID) :
                new ObjectParameter("intCustomerRateTypeID", typeof(int));
    
            var intServiceIDParameter = intServiceID.HasValue ?
                new ObjectParameter("intServiceID", intServiceID) :
                new ObjectParameter("intServiceID", typeof(int));
    
            var intCountryIDParameter = intCountryID.HasValue ?
                new ObjectParameter("intCountryID", intCountryID) :
                new ObjectParameter("intCountryID", typeof(int));
    
            var intFAgentIDParameter = intFAgentID.HasValue ?
                new ObjectParameter("intFAgentID", intFAgentID) :
                new ObjectParameter("intFAgentID", typeof(int));
    
            var dblWeightParameter = dblWeight.HasValue ?
                new ObjectParameter("dblWeight", dblWeight) :
                new ObjectParameter("dblWeight", typeof(double));
    
            var charStatusParameter = charStatus != null ?
                new ObjectParameter("charStatus", charStatus) :
                new ObjectParameter("charStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proGetCustomerRate", intCustomerRateTypeIDParameter, intServiceIDParameter, intCountryIDParameter, intFAgentIDParameter, dblWeightParameter, charStatusParameter, monCustomerRate);
        }
    
        public virtual ObjectResult<proGetCustomerRatelist_Result> proGetCustomerRatelist(Nullable<int> customerrateid)
        {
            var customerrateidParameter = customerrateid.HasValue ?
                new ObjectParameter("customerrateid", customerrateid) :
                new ObjectParameter("customerrateid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proGetCustomerRatelist_Result>("proGetCustomerRatelist", customerrateidParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> proGetForwardingRate(Nullable<int> intFAgentID, Nullable<int> intCountryID, Nullable<int> intCourierServiceID, Nullable<double> dblWeight, string charStatus, ObjectParameter monFAgentRate)
        {
            var intFAgentIDParameter = intFAgentID.HasValue ?
                new ObjectParameter("intFAgentID", intFAgentID) :
                new ObjectParameter("intFAgentID", typeof(int));
    
            var intCountryIDParameter = intCountryID.HasValue ?
                new ObjectParameter("intCountryID", intCountryID) :
                new ObjectParameter("intCountryID", typeof(int));
    
            var intCourierServiceIDParameter = intCourierServiceID.HasValue ?
                new ObjectParameter("intCourierServiceID", intCourierServiceID) :
                new ObjectParameter("intCourierServiceID", typeof(int));
    
            var dblWeightParameter = dblWeight.HasValue ?
                new ObjectParameter("dblWeight", dblWeight) :
                new ObjectParameter("dblWeight", typeof(double));
    
            var charStatusParameter = charStatus != null ?
                new ObjectParameter("charStatus", charStatus) :
                new ObjectParameter("charStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("proGetForwardingRate", intFAgentIDParameter, intCountryIDParameter, intCourierServiceIDParameter, dblWeightParameter, charStatusParameter, monFAgentRate);
        }
    
        public virtual int proGetForwardingRateAssign(Nullable<int> intFAgentID, Nullable<int> intCountryID, Nullable<int> intCourierServiceID, Nullable<double> dblWeight, string charStatus, ObjectParameter monFAgentRate)
        {
            var intFAgentIDParameter = intFAgentID.HasValue ?
                new ObjectParameter("intFAgentID", intFAgentID) :
                new ObjectParameter("intFAgentID", typeof(int));
    
            var intCountryIDParameter = intCountryID.HasValue ?
                new ObjectParameter("intCountryID", intCountryID) :
                new ObjectParameter("intCountryID", typeof(int));
    
            var intCourierServiceIDParameter = intCourierServiceID.HasValue ?
                new ObjectParameter("intCourierServiceID", intCourierServiceID) :
                new ObjectParameter("intCourierServiceID", typeof(int));
    
            var dblWeightParameter = dblWeight.HasValue ?
                new ObjectParameter("dblWeight", dblWeight) :
                new ObjectParameter("dblWeight", typeof(double));
    
            var charStatusParameter = charStatus != null ?
                new ObjectParameter("charStatus", charStatus) :
                new ObjectParameter("charStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proGetForwardingRateAssign", intFAgentIDParameter, intCountryIDParameter, intCourierServiceIDParameter, dblWeightParameter, charStatusParameter, monFAgentRate);
        }
    
        public virtual ObjectResult<proInvoiceDetailsGPA_Result> proInvoiceDetailsGPA(string charInvoiceNo)
        {
            var charInvoiceNoParameter = charInvoiceNo != null ?
                new ObjectParameter("CharInvoiceNo", charInvoiceNo) :
                new ObjectParameter("CharInvoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proInvoiceDetailsGPA_Result>("proInvoiceDetailsGPA", charInvoiceNoParameter);
        }
    
        public virtual ObjectResult<proInvoiceDetailsGPATEST_Result> proInvoiceDetailsGPATEST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proInvoiceDetailsGPATEST_Result>("proInvoiceDetailsGPATEST");
        }
    
        public virtual ObjectResult<proInvoiceDetailsGPATest1_Result> proInvoiceDetailsGPATest1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proInvoiceDetailsGPATest1_Result>("proInvoiceDetailsGPATest1");
        }
    
        public virtual ObjectResult<Nullable<bool>> proIsNewAWBNo(string vchrAWBNo, ObjectParameter bitReturnValue)
        {
            var vchrAWBNoParameter = vchrAWBNo != null ?
                new ObjectParameter("vchrAWBNo", vchrAWBNo) :
                new ObjectParameter("vchrAWBNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("proIsNewAWBNo", vchrAWBNoParameter, bitReturnValue);
        }
    
        public virtual ObjectResult<proListofAWBtobeInvoiced_Result> proListofAWBtobeInvoiced(string dteDateFrom, string dteDateTo)
        {
            var dteDateFromParameter = dteDateFrom != null ?
                new ObjectParameter("DteDateFrom", dteDateFrom) :
                new ObjectParameter("DteDateFrom", typeof(string));
    
            var dteDateToParameter = dteDateTo != null ?
                new ObjectParameter("DteDateTo", dteDateTo) :
                new ObjectParameter("DteDateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proListofAWBtobeInvoiced_Result>("proListofAWBtobeInvoiced", dteDateFromParameter, dteDateToParameter);
        }
    
        public virtual int proNotDeliveredAWBs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proNotDeliveredAWBs");
        }
    
        public virtual ObjectResult<proOutscanSummary_Result> proOutscanSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proOutscanSummary_Result>("proOutscanSummary");
        }
    
        public virtual ObjectResult<proPeriodWiseAnalysis_Result> proPeriodWiseAnalysis(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proPeriodWiseAnalysis_Result>("proPeriodWiseAnalysis", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual ObjectResult<proPKPCADCOD_Result> proPKPCADCOD()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proPKPCADCOD_Result>("proPKPCADCOD");
        }
    
        public virtual ObjectResult<proPrepaidAWBDetailsDatewise_Result> proPrepaidAWBDetailsDatewise(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proPrepaidAWBDetailsDatewise_Result>("proPrepaidAWBDetailsDatewise", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual int proRateChartWeightWise(Nullable<int> intZoneID, Nullable<int> intCourierServiceID, Nullable<float> realWeight)
        {
            var intZoneIDParameter = intZoneID.HasValue ?
                new ObjectParameter("intZoneID", intZoneID) :
                new ObjectParameter("intZoneID", typeof(int));
    
            var intCourierServiceIDParameter = intCourierServiceID.HasValue ?
                new ObjectParameter("intCourierServiceID", intCourierServiceID) :
                new ObjectParameter("intCourierServiceID", typeof(int));
    
            var realWeightParameter = realWeight.HasValue ?
                new ObjectParameter("realWeight", realWeight) :
                new ObjectParameter("realWeight", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proRateChartWeightWise", intZoneIDParameter, intCourierServiceIDParameter, realWeightParameter);
        }
    
        public virtual ObjectResult<ProSalesProductWise_Result> ProSalesProductWise(string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProSalesProductWise_Result>("ProSalesProductWise", dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter);
        }
    
        public virtual int ProSupplierLedger(Nullable<int> intCustomerID, string dteFromDate, string dteToDate, Nullable<int> intAcCompanyID, Nullable<int> intForwardingAgentControlHeadID)
        {
            var intCustomerIDParameter = intCustomerID.HasValue ?
                new ObjectParameter("intCustomerID", intCustomerID) :
                new ObjectParameter("intCustomerID", typeof(int));
    
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("DteFromDate", dteFromDate) :
                new ObjectParameter("DteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("DteToDate", dteToDate) :
                new ObjectParameter("DteToDate", typeof(string));
    
            var intAcCompanyIDParameter = intAcCompanyID.HasValue ?
                new ObjectParameter("intAcCompanyID", intAcCompanyID) :
                new ObjectParameter("intAcCompanyID", typeof(int));
    
            var intForwardingAgentControlHeadIDParameter = intForwardingAgentControlHeadID.HasValue ?
                new ObjectParameter("intForwardingAgentControlHeadID", intForwardingAgentControlHeadID) :
                new ObjectParameter("intForwardingAgentControlHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProSupplierLedger", intCustomerIDParameter, dteFromDateParameter, dteToDateParameter, intAcCompanyIDParameter, intForwardingAgentControlHeadIDParameter);
        }
    
        public virtual int proTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proTest");
        }
    
        public virtual int proUndispersedMeterialCost(string dteFromDate, string dteToDate, string charPaytype)
        {
            var dteFromDateParameter = dteFromDate != null ?
                new ObjectParameter("dteFromDate", dteFromDate) :
                new ObjectParameter("dteFromDate", typeof(string));
    
            var dteToDateParameter = dteToDate != null ?
                new ObjectParameter("dteToDate", dteToDate) :
                new ObjectParameter("dteToDate", typeof(string));
    
            var charPaytypeParameter = charPaytype != null ?
                new ObjectParameter("charPaytype", charPaytype) :
                new ObjectParameter("charPaytype", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proUndispersedMeterialCost", dteFromDateParameter, dteToDateParameter, charPaytypeParameter);
        }
    
        public virtual int pUpdateInscanFAgentRate(Nullable<int> fAgentID)
        {
            var fAgentIDParameter = fAgentID.HasValue ?
                new ObjectParameter("FAgentID", fAgentID) :
                new ObjectParameter("FAgentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pUpdateInscanFAgentRate", fAgentIDParameter);
        }
    
        public virtual int PurchaseInvoiceDelete(string purchaseInvoiceIDs)
        {
            var purchaseInvoiceIDsParameter = purchaseInvoiceIDs != null ?
                new ObjectParameter("PurchaseInvoiceIDs", purchaseInvoiceIDs) :
                new ObjectParameter("PurchaseInvoiceIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseInvoiceDelete", purchaseInvoiceIDsParameter);
        }
    
        public virtual ObjectResult<PurchaseInvoiceSelectAll_Result> PurchaseInvoiceSelectAll(Nullable<int> branchID, Nullable<int> fYearID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseInvoiceSelectAll_Result>("PurchaseInvoiceSelectAll", branchIDParameter, fYearIDParameter);
        }
    
        public virtual ObjectResult<PurchaseInvoiceSelectByID_Result> PurchaseInvoiceSelectByID(Nullable<int> purchaseInvoiceID)
        {
            var purchaseInvoiceIDParameter = purchaseInvoiceID.HasValue ?
                new ObjectParameter("PurchaseInvoiceID", purchaseInvoiceID) :
                new ObjectParameter("PurchaseInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseInvoiceSelectByID_Result>("PurchaseInvoiceSelectByID", purchaseInvoiceIDParameter);
        }
    
        public virtual int PurchaseOrderDelete(string purchaseOrderIDs)
        {
            var purchaseOrderIDsParameter = purchaseOrderIDs != null ?
                new ObjectParameter("PurchaseOrderIDs", purchaseOrderIDs) :
                new ObjectParameter("PurchaseOrderIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseOrderDelete", purchaseOrderIDsParameter);
        }
    
        public virtual int PurchaseOrderDetailsDelete(string purchaseOrderDetailIDs)
        {
            var purchaseOrderDetailIDsParameter = purchaseOrderDetailIDs != null ?
                new ObjectParameter("PurchaseOrderDetailIDs", purchaseOrderDetailIDs) :
                new ObjectParameter("PurchaseOrderDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseOrderDetailsDelete", purchaseOrderDetailIDsParameter);
        }
    
        public virtual int PurchaseOrderDetailsInsert(Nullable<int> purchaseOrderID, Nullable<int> productID, Nullable<int> quantity, Nullable<int> itemUnitID, Nullable<decimal> rate, string description)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseOrderDetailsInsert", purchaseOrderIDParameter, productIDParameter, quantityParameter, itemUnitIDParameter, rateParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<PurchaseOrderDetailsSelectByPurchaseOrderID_Result> PurchaseOrderDetailsSelectByPurchaseOrderID(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseOrderDetailsSelectByPurchaseOrderID_Result>("PurchaseOrderDetailsSelectByPurchaseOrderID", purchaseOrderIDParameter);
        }
    
        public virtual int PurchaseOrderInsert(Nullable<System.DateTime> purchaseOrderDate, Nullable<int> supplierID, Nullable<int> employeeID, Nullable<decimal> discount, Nullable<bool> statusDiscountAmt, string remarks, Nullable<System.DateTime> deliveryDate, Nullable<int> fyearID, string purchaseOrderDetails)
        {
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var statusDiscountAmtParameter = statusDiscountAmt.HasValue ?
                new ObjectParameter("StatusDiscountAmt", statusDiscountAmt) :
                new ObjectParameter("StatusDiscountAmt", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var purchaseOrderDetailsParameter = purchaseOrderDetails != null ?
                new ObjectParameter("PurchaseOrderDetails", purchaseOrderDetails) :
                new ObjectParameter("PurchaseOrderDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseOrderInsert", purchaseOrderDateParameter, supplierIDParameter, employeeIDParameter, discountParameter, statusDiscountAmtParameter, remarksParameter, deliveryDateParameter, fyearIDParameter, purchaseOrderDetailsParameter);
        }
    
        public virtual ObjectResult<PurchaseOrderSelectAll_Result> PurchaseOrderSelectAll(Nullable<int> fyearID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseOrderSelectAll_Result>("PurchaseOrderSelectAll", fyearIDParameter);
        }
    
        public virtual ObjectResult<PurchaseOrderSelectByID_Result> PurchaseOrderSelectByID(Nullable<int> purchaseOrderID)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseOrderSelectByID_Result>("PurchaseOrderSelectByID", purchaseOrderIDParameter);
        }
    
        public virtual int PurchaseOrderUpdate(Nullable<int> purchaseOrderID, Nullable<System.DateTime> purchaseOrderDate, Nullable<int> supplierID, Nullable<int> employeeID, string remarks, Nullable<decimal> discount, Nullable<bool> statusDiscountAmt, Nullable<System.DateTime> deliveryDate)
        {
            var purchaseOrderIDParameter = purchaseOrderID.HasValue ?
                new ObjectParameter("PurchaseOrderID", purchaseOrderID) :
                new ObjectParameter("PurchaseOrderID", typeof(int));
    
            var purchaseOrderDateParameter = purchaseOrderDate.HasValue ?
                new ObjectParameter("PurchaseOrderDate", purchaseOrderDate) :
                new ObjectParameter("PurchaseOrderDate", typeof(System.DateTime));
    
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var statusDiscountAmtParameter = statusDiscountAmt.HasValue ?
                new ObjectParameter("StatusDiscountAmt", statusDiscountAmt) :
                new ObjectParameter("StatusDiscountAmt", typeof(bool));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PurchaseOrderUpdate", purchaseOrderIDParameter, purchaseOrderDateParameter, supplierIDParameter, employeeIDParameter, remarksParameter, discountParameter, statusDiscountAmtParameter, deliveryDateParameter);
        }
    
        public virtual int QuotationDelete(string quotationIDs)
        {
            var quotationIDsParameter = quotationIDs != null ?
                new ObjectParameter("QuotationIDs", quotationIDs) :
                new ObjectParameter("QuotationIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuotationDelete", quotationIDsParameter);
        }
    
        public virtual int QuotationDetailsDelete(string quotationDetailIDs)
        {
            var quotationDetailIDsParameter = quotationDetailIDs != null ?
                new ObjectParameter("QuotationDetailIDs", quotationDetailIDs) :
                new ObjectParameter("QuotationDetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuotationDetailsDelete", quotationDetailIDsParameter);
        }
    
        public virtual int QuotationDetailsInsert(Nullable<int> quotationID, Nullable<int> productID, Nullable<int> quantity, Nullable<int> itemUnitID, Nullable<int> customerRateTypeID, Nullable<decimal> rate, Nullable<int> jobID, string description)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var itemUnitIDParameter = itemUnitID.HasValue ?
                new ObjectParameter("ItemUnitID", itemUnitID) :
                new ObjectParameter("ItemUnitID", typeof(int));
    
            var customerRateTypeIDParameter = customerRateTypeID.HasValue ?
                new ObjectParameter("CustomerRateTypeID", customerRateTypeID) :
                new ObjectParameter("CustomerRateTypeID", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuotationDetailsInsert", quotationIDParameter, productIDParameter, quantityParameter, itemUnitIDParameter, customerRateTypeIDParameter, rateParameter, jobIDParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<QuotationDetailsSelectByQuotationID_Result> QuotationDetailsSelectByQuotationID(Nullable<int> quotationID)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationDetailsSelectByQuotationID_Result>("QuotationDetailsSelectByQuotationID", quotationIDParameter);
        }
    
        public virtual int QuotationInsert(Nullable<System.DateTime> quotationDate, Nullable<int> customerID, Nullable<int> employeeID, Nullable<int> branchID, Nullable<decimal> discount, Nullable<bool> statusDiscountAmt, string remarks, string quotationDetails)
        {
            var quotationDateParameter = quotationDate.HasValue ?
                new ObjectParameter("QuotationDate", quotationDate) :
                new ObjectParameter("QuotationDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var statusDiscountAmtParameter = statusDiscountAmt.HasValue ?
                new ObjectParameter("StatusDiscountAmt", statusDiscountAmt) :
                new ObjectParameter("StatusDiscountAmt", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var quotationDetailsParameter = quotationDetails != null ?
                new ObjectParameter("QuotationDetails", quotationDetails) :
                new ObjectParameter("QuotationDetails", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuotationInsert", quotationDateParameter, customerIDParameter, employeeIDParameter, branchIDParameter, discountParameter, statusDiscountAmtParameter, remarksParameter, quotationDetailsParameter);
        }
    
        public virtual ObjectResult<QuotationSelect_Result> QuotationSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationSelect_Result>("QuotationSelect");
        }
    
        public virtual ObjectResult<QuotationSelectAll_Result> QuotationSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationSelectAll_Result>("QuotationSelectAll");
        }
    
        public virtual ObjectResult<QuotationSelectByID_Result> QuotationSelectByID(Nullable<int> quotationID)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<QuotationSelectByID_Result>("QuotationSelectByID", quotationIDParameter);
        }
    
        public virtual int QuotationUpdate(Nullable<int> quotationID, Nullable<System.DateTime> quotationDate, Nullable<int> customerID, Nullable<int> employeeID, string remarks, Nullable<decimal> discount, Nullable<bool> statusDiscountAmt)
        {
            var quotationIDParameter = quotationID.HasValue ?
                new ObjectParameter("QuotationID", quotationID) :
                new ObjectParameter("QuotationID", typeof(int));
    
            var quotationDateParameter = quotationDate.HasValue ?
                new ObjectParameter("QuotationDate", quotationDate) :
                new ObjectParameter("QuotationDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var statusDiscountAmtParameter = statusDiscountAmt.HasValue ?
                new ObjectParameter("StatusDiscountAmt", statusDiscountAmt) :
                new ObjectParameter("StatusDiscountAmt", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("QuotationUpdate", quotationIDParameter, quotationDateParameter, customerIDParameter, employeeIDParameter, remarksParameter, discountParameter, statusDiscountAmtParameter);
        }
    
        public virtual int RecPayDetailList(Nullable<int> fyearID, Nullable<int> branchID)
        {
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecPayDetailList", fyearIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<Report_AnalysisHeadExpenses_Result> Report_AnalysisHeadExpenses(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> branchID, Nullable<int> analysisHeadID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var analysisHeadIDParameter = analysisHeadID.HasValue ?
                new ObjectParameter("AnalysisHeadID", analysisHeadID) :
                new ObjectParameter("AnalysisHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_AnalysisHeadExpenses_Result>("Report_AnalysisHeadExpenses", fromDateParameter, toDateParameter, branchIDParameter, analysisHeadIDParameter);
        }
    
        public virtual ObjectResult<Report_BalanceSheet_Result> Report_BalanceSheet(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fyearID, Nullable<int> acCompanyID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_BalanceSheet_Result>("Report_BalanceSheet", fromDateParameter, toDateParameter, fyearIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<Report_CashAndBankBook_Result> Report_CashAndBankBook(Nullable<int> fYearID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acHeadID, Nullable<int> acCompanyID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_CashAndBankBook_Result>("Report_CashAndBankBook", fYearIDParameter, fromDateParameter, toDateParameter, acHeadIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<Report_CashBook_Result> Report_CashBook(Nullable<int> fYearID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acHeadID, Nullable<int> acCompanyID)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_CashBook_Result>("Report_CashBook", fYearIDParameter, fromDateParameter, toDateParameter, acHeadIDParameter, acCompanyIDParameter);
        }
    
        public virtual ObjectResult<Report_CustomerInvoice_Result> Report_CustomerInvoice(Nullable<int> customerInvoiceId)
        {
            var customerInvoiceIdParameter = customerInvoiceId.HasValue ?
                new ObjectParameter("CustomerInvoiceId", customerInvoiceId) :
                new ObjectParameter("CustomerInvoiceId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_CustomerInvoice_Result>("Report_CustomerInvoice", customerInvoiceIdParameter);
        }
    
        public virtual ObjectResult<Report_DayBook_Result> Report_DayBook(Nullable<int> fYearID, Nullable<int> branchID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_DayBook_Result>("Report_DayBook", fYearIDParameter, branchIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Report_Ledger_Result> Report_Ledger(Nullable<int> acHeadID, Nullable<int> acCompanyID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> fYearID)
        {
            var acHeadIDParameter = acHeadID.HasValue ?
                new ObjectParameter("AcHeadID", acHeadID) :
                new ObjectParameter("AcHeadID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_Ledger_Result>("Report_Ledger", acHeadIDParameter, acCompanyIDParameter, fromDateParameter, toDateParameter, fYearIDParameter);
        }
    
        public virtual ObjectResult<Report_PAndLAccount_Result> Report_PAndLAccount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acCompanyID, Nullable<int> fyearID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_PAndLAccount_Result>("Report_PAndLAccount", fromDateParameter, toDateParameter, acCompanyIDParameter, fyearIDParameter);
        }
    
        public virtual ObjectResult<Report_ProfitAndLossAccount_Result> Report_ProfitAndLossAccount(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acCompanyID, Nullable<int> fyearID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_ProfitAndLossAccount_Result>("Report_ProfitAndLossAccount", fromDateParameter, toDateParameter, acCompanyIDParameter, fyearIDParameter);
        }
    
        public virtual ObjectResult<Report_SalesInvoice_Result> Report_SalesInvoice(Nullable<int> salesInvoiceID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_SalesInvoice_Result>("Report_SalesInvoice", salesInvoiceIDParameter);
        }
    
        public virtual ObjectResult<Report_TradingProfitAndLoss_Result> Report_TradingProfitAndLoss(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TradingProfitAndLoss_Result>("Report_TradingProfitAndLoss", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Report_TrialBalance_Result> Report_TrialBalance(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> acCompanyID, Nullable<int> fyearID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var fyearIDParameter = fyearID.HasValue ?
                new ObjectParameter("FyearID", fyearID) :
                new ObjectParameter("FyearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TrialBalance_Result>("Report_TrialBalance", fromDateParameter, toDateParameter, acCompanyIDParameter, fyearIDParameter);
        }
    
        public virtual int Report_WorkOrder(Nullable<int> wOID)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Report_WorkOrder", wOIDParameter);
        }
    
        public virtual int Report_WorkOrderInvoice(Nullable<int> wOInvoiceID)
        {
            var wOInvoiceIDParameter = wOInvoiceID.HasValue ?
                new ObjectParameter("WOInvoiceID", wOInvoiceID) :
                new ObjectParameter("WOInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Report_WorkOrderInvoice", wOInvoiceIDParameter);
        }
    
        public virtual int SalesInvoiceDelete(string salesInvoiceIDs)
        {
            var salesInvoiceIDsParameter = salesInvoiceIDs != null ?
                new ObjectParameter("SalesInvoiceIDs", salesInvoiceIDs) :
                new ObjectParameter("SalesInvoiceIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesInvoiceDelete", salesInvoiceIDsParameter);
        }
    
        public virtual ObjectResult<SalesInvoiceDetailsSelectBySalesInvoiceID_Result> SalesInvoiceDetailsSelectBySalesInvoiceID(Nullable<int> salesInvoiceID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesInvoiceDetailsSelectBySalesInvoiceID_Result>("SalesInvoiceDetailsSelectBySalesInvoiceID", salesInvoiceIDParameter);
        }
    
        public virtual ObjectResult<SalesInvoiceSelectAll_Result> SalesInvoiceSelectAll(Nullable<int> branchID, Nullable<int> fYearID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesInvoiceSelectAll_Result>("SalesInvoiceSelectAll", branchIDParameter, fYearIDParameter);
        }
    
        public virtual ObjectResult<SalesInvoiceSelectByID_Result> SalesInvoiceSelectByID(Nullable<int> salesInvoiceID)
        {
            var salesInvoiceIDParameter = salesInvoiceID.HasValue ?
                new ObjectParameter("SalesInvoiceID", salesInvoiceID) :
                new ObjectParameter("SalesInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalesInvoiceSelectByID_Result>("SalesInvoiceSelectByID", salesInvoiceIDParameter);
        }
    
        public virtual int SaveDRSNewRecord(Nullable<int> iDRSID, string iDRSNo, Nullable<System.DateTime> iDRSDate, Nullable<int> iDeliveredBy, Nullable<int> iCheckedBy, Nullable<decimal> iTotalAmountCollected, Nullable<int> iVehicleID, string iStatusDRS, Nullable<int> iAcCompanyID, Nullable<bool> iStatusInbound, string iDrsType)
        {
            var iDRSIDParameter = iDRSID.HasValue ?
                new ObjectParameter("iDRSID", iDRSID) :
                new ObjectParameter("iDRSID", typeof(int));
    
            var iDRSNoParameter = iDRSNo != null ?
                new ObjectParameter("iDRSNo", iDRSNo) :
                new ObjectParameter("iDRSNo", typeof(string));
    
            var iDRSDateParameter = iDRSDate.HasValue ?
                new ObjectParameter("iDRSDate", iDRSDate) :
                new ObjectParameter("iDRSDate", typeof(System.DateTime));
    
            var iDeliveredByParameter = iDeliveredBy.HasValue ?
                new ObjectParameter("iDeliveredBy", iDeliveredBy) :
                new ObjectParameter("iDeliveredBy", typeof(int));
    
            var iCheckedByParameter = iCheckedBy.HasValue ?
                new ObjectParameter("iCheckedBy", iCheckedBy) :
                new ObjectParameter("iCheckedBy", typeof(int));
    
            var iTotalAmountCollectedParameter = iTotalAmountCollected.HasValue ?
                new ObjectParameter("iTotalAmountCollected", iTotalAmountCollected) :
                new ObjectParameter("iTotalAmountCollected", typeof(decimal));
    
            var iVehicleIDParameter = iVehicleID.HasValue ?
                new ObjectParameter("iVehicleID", iVehicleID) :
                new ObjectParameter("iVehicleID", typeof(int));
    
            var iStatusDRSParameter = iStatusDRS != null ?
                new ObjectParameter("iStatusDRS", iStatusDRS) :
                new ObjectParameter("iStatusDRS", typeof(string));
    
            var iAcCompanyIDParameter = iAcCompanyID.HasValue ?
                new ObjectParameter("iAcCompanyID", iAcCompanyID) :
                new ObjectParameter("iAcCompanyID", typeof(int));
    
            var iStatusInboundParameter = iStatusInbound.HasValue ?
                new ObjectParameter("iStatusInbound", iStatusInbound) :
                new ObjectParameter("iStatusInbound", typeof(bool));
    
            var iDrsTypeParameter = iDrsType != null ?
                new ObjectParameter("iDrsType", iDrsType) :
                new ObjectParameter("iDrsType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveDRSNewRecord", iDRSIDParameter, iDRSNoParameter, iDRSDateParameter, iDeliveredByParameter, iCheckedByParameter, iTotalAmountCollectedParameter, iVehicleIDParameter, iStatusDRSParameter, iAcCompanyIDParameter, iStatusInboundParameter, iDrsTypeParameter);
        }
    
        public virtual int SaveFinancialYear(Nullable<int> acFyearID, Nullable<int> acCompanyID, Nullable<System.DateTime> newAcFyearFrom, Nullable<System.DateTime> newFyearTo, string newReferenceName, Nullable<int> userID, Nullable<int> newFinancialYearID)
        {
            var acFyearIDParameter = acFyearID.HasValue ?
                new ObjectParameter("AcFyearID", acFyearID) :
                new ObjectParameter("AcFyearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var newAcFyearFromParameter = newAcFyearFrom.HasValue ?
                new ObjectParameter("NewAcFyearFrom", newAcFyearFrom) :
                new ObjectParameter("NewAcFyearFrom", typeof(System.DateTime));
    
            var newFyearToParameter = newFyearTo.HasValue ?
                new ObjectParameter("NewFyearTo", newFyearTo) :
                new ObjectParameter("NewFyearTo", typeof(System.DateTime));
    
            var newReferenceNameParameter = newReferenceName != null ?
                new ObjectParameter("NewReferenceName", newReferenceName) :
                new ObjectParameter("NewReferenceName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var newFinancialYearIDParameter = newFinancialYearID.HasValue ?
                new ObjectParameter("NewFinancialYearID", newFinancialYearID) :
                new ObjectParameter("NewFinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveFinancialYear", acFyearIDParameter, acCompanyIDParameter, newAcFyearFromParameter, newFyearToParameter, newReferenceNameParameter, userIDParameter, newFinancialYearIDParameter);
        }
    
        public virtual int SaveRoleMenuAccessRights(Nullable<int> roleId, string menusList)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var menusListParameter = menusList != null ?
                new ObjectParameter("MenusList", menusList) :
                new ObjectParameter("MenusList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveRoleMenuAccessRights", roleIdParameter, menusListParameter);
        }
    
        public virtual int SaveTempCustomerInvoice(string iAWBNo, string iCustomerInvoiceID)
        {
            var iAWBNoParameter = iAWBNo != null ?
                new ObjectParameter("iAWBNo", iAWBNo) :
                new ObjectParameter("iAWBNo", typeof(string));
    
            var iCustomerInvoiceIDParameter = iCustomerInvoiceID != null ?
                new ObjectParameter("iCustomerInvoiceID", iCustomerInvoiceID) :
                new ObjectParameter("iCustomerInvoiceID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SaveTempCustomerInvoice", iAWBNoParameter, iCustomerInvoiceIDParameter);
        }
    
        public virtual ObjectResult<selectrecpay_Result> selectrecpay(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectrecpay_Result>("selectrecpay", iDParameter);
        }
    
        public virtual int SoftDeleteMenu(Nullable<int> menuID, string userName, Nullable<int> isActive)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SoftDeleteMenu", menuIDParameter, userNameParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SOP_AcHeadForCombo_Result> SOP_AcHeadForCombo(string acType, Nullable<int> branchID)
        {
            var acTypeParameter = acType != null ?
                new ObjectParameter("acType", acType) :
                new ObjectParameter("acType", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SOP_AcHeadForCombo_Result>("SOP_AcHeadForCombo", acTypeParameter, branchIDParameter);
        }
    
        public virtual int SP_DeleteCustomerReciepts(Nullable<int> recPayID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteCustomerReciepts", recPayIDParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_GetAdvanceAmountOfCustomer(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_GetAdvanceAmountOfCustomer", customerIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAllRecieptsDetails_Result> SP_GetAllRecieptsDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllRecieptsDetails_Result>("SP_GetAllRecieptsDetails");
        }
    
        public virtual ObjectResult<SP_GetAllRecieptsDetailsByDate_Result> SP_GetAllRecieptsDetailsByDate(string fromDate, string todate, Nullable<int> fyearId)
        {
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var todateParameter = todate != null ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(string));
    
            var fyearIdParameter = fyearId.HasValue ?
                new ObjectParameter("FyearId", fyearId) :
                new ObjectParameter("FyearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllRecieptsDetailsByDate_Result>("SP_GetAllRecieptsDetailsByDate", fromDateParameter, todateParameter, fyearIdParameter);
        }
    
        public virtual ObjectResult<sp_GetCargoTrackByAWBNo_Result> sp_GetCargoTrackByAWBNo(string iAWBNO)
        {
            var iAWBNOParameter = iAWBNO != null ?
                new ObjectParameter("iAWBNO", iAWBNO) :
                new ObjectParameter("iAWBNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCargoTrackByAWBNo_Result>("sp_GetCargoTrackByAWBNo", iAWBNOParameter);
        }
    
        public virtual ObjectResult<Sp_GetCustomerInvoice_Result> Sp_GetCustomerInvoice(string aWBType)
        {
            var aWBTypeParameter = aWBType != null ?
                new ObjectParameter("AWBType", aWBType) :
                new ObjectParameter("AWBType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetCustomerInvoice_Result>("Sp_GetCustomerInvoice", aWBTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetCustomerInvoiceDetailsForReciept_Result> SP_GetCustomerInvoiceDetailsForReciept(Nullable<int> customerID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCustomerInvoiceDetailsForReciept_Result>("SP_GetCustomerInvoiceDetailsForReciept", customerIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> SP_GetMaxPVID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetMaxPVID");
        }
    
        public virtual ObjectResult<string> SP_GetMaxRVID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetMaxRVID");
        }
    
        public virtual ObjectResult<sp_GetTrackByAWBNo_Result> sp_GetTrackByAWBNo(string iAWBNO)
        {
            var iAWBNOParameter = iAWBNO != null ?
                new ObjectParameter("iAWBNO", iAWBNO) :
                new ObjectParameter("iAWBNO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTrackByAWBNo_Result>("sp_GetTrackByAWBNo", iAWBNOParameter);
        }
    
        public virtual int SP_InsertJournalEntryForRecPay(Nullable<int> recPayID, Nullable<int> acFinnancialYearId)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var acFinnancialYearIdParameter = acFinnancialYearId.HasValue ?
                new ObjectParameter("AcFinnancialYearId", acFinnancialYearId) :
                new ObjectParameter("AcFinnancialYearId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertJournalEntryForRecPay", recPayIDParameter, acFinnancialYearIdParameter);
        }
    
        public virtual int SP_InsertOrUpdateAcBankDetails(Nullable<int> acBankDetailID, Nullable<int> acJournalID, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string partyName, string statusTrans, Nullable<bool> statusReconciled, Nullable<System.DateTime> valueDate, Nullable<int> isUpdate)
        {
            var acBankDetailIDParameter = acBankDetailID.HasValue ?
                new ObjectParameter("AcBankDetailID", acBankDetailID) :
                new ObjectParameter("AcBankDetailID", typeof(int));
    
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var statusTransParameter = statusTrans != null ?
                new ObjectParameter("StatusTrans", statusTrans) :
                new ObjectParameter("StatusTrans", typeof(string));
    
            var statusReconciledParameter = statusReconciled.HasValue ?
                new ObjectParameter("StatusReconciled", statusReconciled) :
                new ObjectParameter("StatusReconciled", typeof(bool));
    
            var valueDateParameter = valueDate.HasValue ?
                new ObjectParameter("ValueDate", valueDate) :
                new ObjectParameter("ValueDate", typeof(System.DateTime));
    
            var isUpdateParameter = isUpdate.HasValue ?
                new ObjectParameter("IsUpdate", isUpdate) :
                new ObjectParameter("IsUpdate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertOrUpdateAcBankDetails", acBankDetailIDParameter, acJournalIDParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, partyNameParameter, statusTransParameter, statusReconciledParameter, valueDateParameter, isUpdateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_InsertRecPay(Nullable<System.DateTime> recPayDate, string documentNo, Nullable<int> customerID, Nullable<int> businessCentreID, string bankName, string chequeNo, Nullable<System.DateTime> chequeDate, string remarks, Nullable<int> acJournalID, Nullable<bool> statusRec, string statusEntry, string statusOrigin, Nullable<int> fYearID, Nullable<int> acCompanyID, Nullable<decimal> eXRate, Nullable<decimal> fMoney, Nullable<int> userID)
        {
            var recPayDateParameter = recPayDate.HasValue ?
                new ObjectParameter("RecPayDate", recPayDate) :
                new ObjectParameter("RecPayDate", typeof(System.DateTime));
    
            var documentNoParameter = documentNo != null ?
                new ObjectParameter("DocumentNo", documentNo) :
                new ObjectParameter("DocumentNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var businessCentreIDParameter = businessCentreID.HasValue ?
                new ObjectParameter("BusinessCentreID", businessCentreID) :
                new ObjectParameter("BusinessCentreID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var chequeNoParameter = chequeNo != null ?
                new ObjectParameter("ChequeNo", chequeNo) :
                new ObjectParameter("ChequeNo", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var acJournalIDParameter = acJournalID.HasValue ?
                new ObjectParameter("AcJournalID", acJournalID) :
                new ObjectParameter("AcJournalID", typeof(int));
    
            var statusRecParameter = statusRec.HasValue ?
                new ObjectParameter("StatusRec", statusRec) :
                new ObjectParameter("StatusRec", typeof(bool));
    
            var statusEntryParameter = statusEntry != null ?
                new ObjectParameter("StatusEntry", statusEntry) :
                new ObjectParameter("StatusEntry", typeof(string));
    
            var statusOriginParameter = statusOrigin != null ?
                new ObjectParameter("StatusOrigin", statusOrigin) :
                new ObjectParameter("StatusOrigin", typeof(string));
    
            var fYearIDParameter = fYearID.HasValue ?
                new ObjectParameter("FYearID", fYearID) :
                new ObjectParameter("FYearID", typeof(int));
    
            var acCompanyIDParameter = acCompanyID.HasValue ?
                new ObjectParameter("AcCompanyID", acCompanyID) :
                new ObjectParameter("AcCompanyID", typeof(int));
    
            var eXRateParameter = eXRate.HasValue ?
                new ObjectParameter("EXRate", eXRate) :
                new ObjectParameter("EXRate", typeof(decimal));
    
            var fMoneyParameter = fMoney.HasValue ?
                new ObjectParameter("FMoney", fMoney) :
                new ObjectParameter("FMoney", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_InsertRecPay", recPayDateParameter, documentNoParameter, customerIDParameter, businessCentreIDParameter, bankNameParameter, chequeNoParameter, chequeDateParameter, remarksParameter, acJournalIDParameter, statusRecParameter, statusEntryParameter, statusOriginParameter, fYearIDParameter, acCompanyIDParameter, eXRateParameter, fMoneyParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_InsertRecPayDetailsForCustomer(Nullable<int> recPayID, Nullable<int> invoiceID, Nullable<decimal> amount, string remarks, string statusInvoice, Nullable<bool> statusAdvance, string statusReceipt, string invDate, string invNo, Nullable<int> currencyID, Nullable<int> invoiceStatus, Nullable<int> jobID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusInvoiceParameter = statusInvoice != null ?
                new ObjectParameter("StatusInvoice", statusInvoice) :
                new ObjectParameter("StatusInvoice", typeof(string));
    
            var statusAdvanceParameter = statusAdvance.HasValue ?
                new ObjectParameter("StatusAdvance", statusAdvance) :
                new ObjectParameter("StatusAdvance", typeof(bool));
    
            var statusReceiptParameter = statusReceipt != null ?
                new ObjectParameter("statusReceipt", statusReceipt) :
                new ObjectParameter("statusReceipt", typeof(string));
    
            var invDateParameter = invDate != null ?
                new ObjectParameter("InvDate", invDate) :
                new ObjectParameter("InvDate", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var invoiceStatusParameter = invoiceStatus.HasValue ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_InsertRecPayDetailsForCustomer", recPayIDParameter, invoiceIDParameter, amountParameter, remarksParameter, statusInvoiceParameter, statusAdvanceParameter, statusReceiptParameter, invDateParameter, invNoParameter, currencyIDParameter, invoiceStatusParameter, jobIDParameter);
        }
    
        public virtual int SP_InsertRecPayDetailsForSupplier(Nullable<int> recPayID, Nullable<int> invoiceID, Nullable<decimal> amount, string remarks, string statusInvoice, Nullable<bool> statusAdvance, string statusReceipt, string invDate, string invNo, Nullable<int> currencyID, Nullable<int> invoiceStatus, Nullable<int> jobID)
        {
            var recPayIDParameter = recPayID.HasValue ?
                new ObjectParameter("RecPayID", recPayID) :
                new ObjectParameter("RecPayID", typeof(int));
    
            var invoiceIDParameter = invoiceID.HasValue ?
                new ObjectParameter("InvoiceID", invoiceID) :
                new ObjectParameter("InvoiceID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var statusInvoiceParameter = statusInvoice != null ?
                new ObjectParameter("StatusInvoice", statusInvoice) :
                new ObjectParameter("StatusInvoice", typeof(string));
    
            var statusAdvanceParameter = statusAdvance.HasValue ?
                new ObjectParameter("StatusAdvance", statusAdvance) :
                new ObjectParameter("StatusAdvance", typeof(bool));
    
            var statusReceiptParameter = statusReceipt != null ?
                new ObjectParameter("statusReceipt", statusReceipt) :
                new ObjectParameter("statusReceipt", typeof(string));
    
            var invDateParameter = invDate != null ?
                new ObjectParameter("InvDate", invDate) :
                new ObjectParameter("InvDate", typeof(string));
    
            var invNoParameter = invNo != null ?
                new ObjectParameter("InvNo", invNo) :
                new ObjectParameter("InvNo", typeof(string));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var invoiceStatusParameter = invoiceStatus.HasValue ?
                new ObjectParameter("InvoiceStatus", invoiceStatus) :
                new ObjectParameter("InvoiceStatus", typeof(int));
    
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertRecPayDetailsForSupplier", recPayIDParameter, invoiceIDParameter, amountParameter, remarksParameter, statusInvoiceParameter, statusAdvanceParameter, statusReceiptParameter, invDateParameter, invNoParameter, currencyIDParameter, invoiceStatusParameter, jobIDParameter);
        }
    
        public virtual int SPGetAllLocalCurrencyCustRecievable(Nullable<int> acFinancialYearID)
        {
            var acFinancialYearIDParameter = acFinancialYearID.HasValue ?
                new ObjectParameter("AcFinancialYearID", acFinancialYearID) :
                new ObjectParameter("AcFinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetAllLocalCurrencyCustRecievable", acFinancialYearIDParameter);
        }
    
        public virtual int SupplierMasterDelete(string supplierIDs)
        {
            var supplierIDsParameter = supplierIDs != null ?
                new ObjectParameter("SupplierIDs", supplierIDs) :
                new ObjectParameter("SupplierIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierMasterDelete", supplierIDsParameter);
        }
    
        public virtual int SupplierMasterInsert(string referenceCode, string supplierName, string contactPerson, string address1, string address2, string phone, string mobileNo, string fax, string email, string webSite, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> locationID, Nullable<int> currencyID, Nullable<int> branchID, Nullable<int> supplierTypeId, ObjectParameter supplierID)
        {
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var supplierTypeIdParameter = supplierTypeId.HasValue ?
                new ObjectParameter("SupplierTypeId", supplierTypeId) :
                new ObjectParameter("SupplierTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierMasterInsert", referenceCodeParameter, supplierNameParameter, contactPersonParameter, address1Parameter, address2Parameter, phoneParameter, mobileNoParameter, faxParameter, emailParameter, webSiteParameter, countryIDParameter, cityIDParameter, locationIDParameter, currencyIDParameter, branchIDParameter, supplierTypeIdParameter, supplierID);
        }
    
        public virtual ObjectResult<SupplierMasterSelect_Result> SupplierMasterSelect(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierMasterSelect_Result>("SupplierMasterSelect", branchIDParameter);
        }
    
        public virtual ObjectResult<SupplierMasterSelectAll_Result> SupplierMasterSelectAll(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierMasterSelectAll_Result>("SupplierMasterSelectAll", branchIDParameter);
        }
    
        public virtual ObjectResult<SupplierMasterSelectByID_Result> SupplierMasterSelectByID(Nullable<int> supplierID)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierMasterSelectByID_Result>("SupplierMasterSelectByID", supplierIDParameter);
        }
    
        public virtual int SupplierMasterUpdate(Nullable<int> supplierID, string referenceCode, string supplierName, string contactPerson, string address1, string address2, string phone, string mobileNo, string fax, string email, string webSite, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> locationID, Nullable<int> currencyID, Nullable<int> branchID, Nullable<int> supplierTypeId)
        {
            var supplierIDParameter = supplierID.HasValue ?
                new ObjectParameter("SupplierID", supplierID) :
                new ObjectParameter("SupplierID", typeof(int));
    
            var referenceCodeParameter = referenceCode != null ?
                new ObjectParameter("ReferenceCode", referenceCode) :
                new ObjectParameter("ReferenceCode", typeof(string));
    
            var supplierNameParameter = supplierName != null ?
                new ObjectParameter("SupplierName", supplierName) :
                new ObjectParameter("SupplierName", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var webSiteParameter = webSite != null ?
                new ObjectParameter("WebSite", webSite) :
                new ObjectParameter("WebSite", typeof(string));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var currencyIDParameter = currencyID.HasValue ?
                new ObjectParameter("CurrencyID", currencyID) :
                new ObjectParameter("CurrencyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var supplierTypeIdParameter = supplierTypeId.HasValue ?
                new ObjectParameter("SupplierTypeId", supplierTypeId) :
                new ObjectParameter("SupplierTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierMasterUpdate", supplierIDParameter, referenceCodeParameter, supplierNameParameter, contactPersonParameter, address1Parameter, address2Parameter, phoneParameter, mobileNoParameter, faxParameter, emailParameter, webSiteParameter, countryIDParameter, cityIDParameter, locationIDParameter, currencyIDParameter, branchIDParameter, supplierTypeIdParameter);
        }
    
        public virtual int SupplierTypeDelete(string supplierTypeIDs)
        {
            var supplierTypeIDsParameter = supplierTypeIDs != null ?
                new ObjectParameter("SupplierTypeIDs", supplierTypeIDs) :
                new ObjectParameter("SupplierTypeIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierTypeDelete", supplierTypeIDsParameter);
        }
    
        public virtual ObjectResult<SupplierTypeSelectAll_Result> SupplierTypeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierTypeSelectAll_Result>("SupplierTypeSelectAll");
        }
    
        public virtual ObjectResult<SupplierTypeSelectByID_Result> SupplierTypeSelectByID(Nullable<int> supplierTypeID)
        {
            var supplierTypeIDParameter = supplierTypeID.HasValue ?
                new ObjectParameter("SupplierTypeID", supplierTypeID) :
                new ObjectParameter("SupplierTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SupplierTypeSelectByID_Result>("SupplierTypeSelectByID", supplierTypeIDParameter);
        }
    
        public virtual int SupplierTypeUpdate(Nullable<int> supplierTypeID, string supplierType)
        {
            var supplierTypeIDParameter = supplierTypeID.HasValue ?
                new ObjectParameter("SupplierTypeID", supplierTypeID) :
                new ObjectParameter("SupplierTypeID", typeof(int));
    
            var supplierTypeParameter = supplierType != null ?
                new ObjectParameter("SupplierType", supplierType) :
                new ObjectParameter("SupplierType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplierTypeUpdate", supplierTypeIDParameter, supplierTypeParameter);
        }
    
        public virtual ObjectResult<SystemUserSellectAll_Result> SystemUserSellectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SystemUserSellectAll_Result>("SystemUserSellectAll");
        }
    
        public virtual int TestProc(Nullable<int> inscanID, ObjectParameter cCHarge)
        {
            var inscanIDParameter = inscanID.HasValue ?
                new ObjectParameter("InscanID", inscanID) :
                new ObjectParameter("InscanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TestProc", inscanIDParameter, cCHarge);
        }
    
        public virtual int TypeDelete(string typeIDs)
        {
            var typeIDsParameter = typeIDs != null ?
                new ObjectParameter("TypeIDs", typeIDs) :
                new ObjectParameter("TypeIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TypeDelete", typeIDsParameter);
        }
    
        public virtual int TypeInsert(string typeName, ObjectParameter typeID)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TypeInsert", typeNameParameter, typeID);
        }
    
        public virtual ObjectResult<TypeSelectAll_Result> TypeSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TypeSelectAll_Result>("TypeSelectAll");
        }
    
        public virtual ObjectResult<TypeSelectByID_Result> TypeSelectByID(Nullable<int> typeID)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TypeSelectByID_Result>("TypeSelectByID", typeIDParameter);
        }
    
        public virtual int TypeUpdate(Nullable<int> typeID, string typeName)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TypeUpdate", typeIDParameter, typeNameParameter);
        }
    
        public virtual int UpdateMenu(Nullable<int> menuID, string title, string link, Nullable<int> parentID, string userName)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("MenuID", menuID) :
                new ObjectParameter("MenuID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMenu", menuIDParameter, titleParameter, linkParameter, parentIDParameter, userNameParameter);
        }
    
        public virtual int UserInBranchDelete(string userID, Nullable<int> branchID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserInBranchDelete", userIDParameter, branchIDParameter);
        }
    
        public virtual int UserInBranchInsert(string userID, Nullable<int> branchID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserInBranchInsert", userIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<UserInBranchSelectByUserID_Result> UserInBranchSelectByUserID(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserInBranchSelectByUserID_Result>("UserInBranchSelectByUserID", userIDParameter);
        }
    
        public virtual ObjectResult<usp_GetCustomerInvoice2_Result> usp_GetCustomerInvoice2(Nullable<int> cid, Nullable<System.DateTime> fdate, Nullable<System.DateTime> tdate)
        {
            var cidParameter = cid.HasValue ?
                new ObjectParameter("cid", cid) :
                new ObjectParameter("cid", typeof(int));
    
            var fdateParameter = fdate.HasValue ?
                new ObjectParameter("fdate", fdate) :
                new ObjectParameter("fdate", typeof(System.DateTime));
    
            var tdateParameter = tdate.HasValue ?
                new ObjectParameter("tdate", tdate) :
                new ObjectParameter("tdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetCustomerInvoice2_Result>("usp_GetCustomerInvoice2", cidParameter, fdateParameter, tdateParameter);
        }
    
        public virtual int WorkCategoryDelete(string workCategoryIDs)
        {
            var workCategoryIDsParameter = workCategoryIDs != null ?
                new ObjectParameter("WorkCategoryIDs", workCategoryIDs) :
                new ObjectParameter("WorkCategoryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkCategoryDelete", workCategoryIDsParameter);
        }
    
        public virtual int WorkCategoryInsert(string workCategoryName, ObjectParameter workCategoryID)
        {
            var workCategoryNameParameter = workCategoryName != null ?
                new ObjectParameter("WorkCategoryName", workCategoryName) :
                new ObjectParameter("WorkCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkCategoryInsert", workCategoryNameParameter, workCategoryID);
        }
    
        public virtual ObjectResult<WorkCategorySelectAll_Result> WorkCategorySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkCategorySelectAll_Result>("WorkCategorySelectAll");
        }
    
        public virtual ObjectResult<WorkCategorySelectByID_Result> WorkCategorySelectByID(Nullable<int> workCategoryID)
        {
            var workCategoryIDParameter = workCategoryID.HasValue ?
                new ObjectParameter("WorkCategoryID", workCategoryID) :
                new ObjectParameter("WorkCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkCategorySelectByID_Result>("WorkCategorySelectByID", workCategoryIDParameter);
        }
    
        public virtual int WorkCategoryUpdate(Nullable<int> workCategoryID, string workCategoryName)
        {
            var workCategoryIDParameter = workCategoryID.HasValue ?
                new ObjectParameter("WorkCategoryID", workCategoryID) :
                new ObjectParameter("WorkCategoryID", typeof(int));
    
            var workCategoryNameParameter = workCategoryName != null ?
                new ObjectParameter("WorkCategoryName", workCategoryName) :
                new ObjectParameter("WorkCategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkCategoryUpdate", workCategoryIDParameter, workCategoryNameParameter);
        }
    
        public virtual int WorkOrderDetailDelete(string wODetailIDs)
        {
            var wODetailIDsParameter = wODetailIDs != null ?
                new ObjectParameter("WODetailIDs", wODetailIDs) :
                new ObjectParameter("WODetailIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderDetailDelete", wODetailIDsParameter);
        }
    
        public virtual int WorkOrderDetailForEditInvoice(Nullable<int> wOID, Nullable<int> wOInvoiceID)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            var wOInvoiceIDParameter = wOInvoiceID.HasValue ?
                new ObjectParameter("WOInvoiceID", wOInvoiceID) :
                new ObjectParameter("WOInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderDetailForEditInvoice", wOIDParameter, wOInvoiceIDParameter);
        }
    
        public virtual int WorkOrderDetailForInvoice(Nullable<int> wOID)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderDetailForInvoice", wOIDParameter);
        }
    
        public virtual int WorkOrderDetailInsert(Nullable<int> wOID, Nullable<int> productItemID, string description, Nullable<decimal> qty, Nullable<decimal> rate)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            var productItemIDParameter = productItemID.HasValue ?
                new ObjectParameter("ProductItemID", productItemID) :
                new ObjectParameter("ProductItemID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderDetailInsert", wOIDParameter, productItemIDParameter, descriptionParameter, qtyParameter, rateParameter);
        }
    
        public virtual int WorkOrderDetailSelectByWOID(Nullable<int> wOID)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderDetailSelectByWOID", wOIDParameter);
        }
    
        public virtual int WorkOrderDetailUpdate(Nullable<int> autoID, Nullable<int> productItemID, string description, Nullable<decimal> qty, Nullable<decimal> rate)
        {
            var autoIDParameter = autoID.HasValue ?
                new ObjectParameter("AutoID", autoID) :
                new ObjectParameter("AutoID", typeof(int));
    
            var productItemIDParameter = productItemID.HasValue ?
                new ObjectParameter("ProductItemID", productItemID) :
                new ObjectParameter("ProductItemID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(decimal));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderDetailUpdate", autoIDParameter, productItemIDParameter, descriptionParameter, qtyParameter, rateParameter);
        }
    
        public virtual int WorkOrderInvoiceDelete(string wOInvoiceIDs)
        {
            var wOInvoiceIDsParameter = wOInvoiceIDs != null ?
                new ObjectParameter("WOInvoiceIDs", wOInvoiceIDs) :
                new ObjectParameter("WOInvoiceIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderInvoiceDelete", wOInvoiceIDsParameter);
        }
    
        public virtual int WorkOrderInvoiceInsert(Nullable<System.DateTime> invoiceDate, Nullable<int> employeeID, string shippingTerms, Nullable<System.DateTime> deliveryDate, string paymentTerms, Nullable<System.DateTime> paymentDueDate, Nullable<int> wOID, string remark, Nullable<decimal> tax, Nullable<decimal> discount, string details)
        {
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shippingTermsParameter = shippingTerms != null ?
                new ObjectParameter("ShippingTerms", shippingTerms) :
                new ObjectParameter("ShippingTerms", typeof(string));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderInvoiceInsert", invoiceDateParameter, employeeIDParameter, shippingTermsParameter, deliveryDateParameter, paymentTermsParameter, paymentDueDateParameter, wOIDParameter, remarkParameter, taxParameter, discountParameter, detailsParameter);
        }
    
        public virtual int WorkOrderInvoiceSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderInvoiceSelectAll");
        }
    
        public virtual int WorkOrderInvoiceSelectByID(Nullable<int> wOInvoiceID)
        {
            var wOInvoiceIDParameter = wOInvoiceID.HasValue ?
                new ObjectParameter("WOInvoiceID", wOInvoiceID) :
                new ObjectParameter("WOInvoiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderInvoiceSelectByID", wOInvoiceIDParameter);
        }
    
        public virtual int WorkOrderInvoiceUpdate(Nullable<int> wOInvoiceID, Nullable<System.DateTime> invoiceDate, Nullable<int> employeeID, string shippingTerms, Nullable<System.DateTime> deliveryDate, string paymentTerms, Nullable<System.DateTime> paymentDueDate, string remark, Nullable<decimal> tax, Nullable<decimal> discount, string details)
        {
            var wOInvoiceIDParameter = wOInvoiceID.HasValue ?
                new ObjectParameter("WOInvoiceID", wOInvoiceID) :
                new ObjectParameter("WOInvoiceID", typeof(int));
    
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var shippingTermsParameter = shippingTerms != null ?
                new ObjectParameter("ShippingTerms", shippingTerms) :
                new ObjectParameter("ShippingTerms", typeof(string));
    
            var deliveryDateParameter = deliveryDate.HasValue ?
                new ObjectParameter("DeliveryDate", deliveryDate) :
                new ObjectParameter("DeliveryDate", typeof(System.DateTime));
    
            var paymentTermsParameter = paymentTerms != null ?
                new ObjectParameter("PaymentTerms", paymentTerms) :
                new ObjectParameter("PaymentTerms", typeof(string));
    
            var paymentDueDateParameter = paymentDueDate.HasValue ?
                new ObjectParameter("PaymentDueDate", paymentDueDate) :
                new ObjectParameter("PaymentDueDate", typeof(System.DateTime));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var taxParameter = tax.HasValue ?
                new ObjectParameter("Tax", tax) :
                new ObjectParameter("Tax", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderInvoiceUpdate", wOInvoiceIDParameter, invoiceDateParameter, employeeIDParameter, shippingTermsParameter, deliveryDateParameter, paymentTermsParameter, paymentDueDateParameter, remarkParameter, taxParameter, discountParameter, detailsParameter);
        }
    
        public virtual int WorkOrderMasterDelete(string wOIDs)
        {
            var wOIDsParameter = wOIDs != null ?
                new ObjectParameter("WOIDs", wOIDs) :
                new ObjectParameter("WOIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderMasterDelete", wOIDsParameter);
        }
    
        public virtual int WorkOrderMasterInsert(Nullable<System.DateTime> wODate, Nullable<int> customerID, Nullable<int> employeeID, string description, string status, string workCategoryIDs, Nullable<System.DateTime> followUpDate)
        {
            var wODateParameter = wODate.HasValue ?
                new ObjectParameter("WODate", wODate) :
                new ObjectParameter("WODate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var workCategoryIDsParameter = workCategoryIDs != null ?
                new ObjectParameter("WorkCategoryIDs", workCategoryIDs) :
                new ObjectParameter("WorkCategoryIDs", typeof(string));
    
            var followUpDateParameter = followUpDate.HasValue ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderMasterInsert", wODateParameter, customerIDParameter, employeeIDParameter, descriptionParameter, statusParameter, workCategoryIDsParameter, followUpDateParameter);
        }
    
        public virtual ObjectResult<WorkOrderMasterSelectAll_Result> WorkOrderMasterSelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkOrderMasterSelectAll_Result>("WorkOrderMasterSelectAll");
        }
    
        public virtual ObjectResult<WorkOrderMasterSelectByID_Result> WorkOrderMasterSelectByID(Nullable<int> wOID)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkOrderMasterSelectByID_Result>("WorkOrderMasterSelectByID", wOIDParameter);
        }
    
        public virtual int WorkOrderMasterUpdate(Nullable<int> wOID, Nullable<System.DateTime> wODate, Nullable<int> customerID, Nullable<int> employeeID, string description, string status, string workCategoryIDs, Nullable<System.DateTime> followUpDate)
        {
            var wOIDParameter = wOID.HasValue ?
                new ObjectParameter("WOID", wOID) :
                new ObjectParameter("WOID", typeof(int));
    
            var wODateParameter = wODate.HasValue ?
                new ObjectParameter("WODate", wODate) :
                new ObjectParameter("WODate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var workCategoryIDsParameter = workCategoryIDs != null ?
                new ObjectParameter("WorkCategoryIDs", workCategoryIDs) :
                new ObjectParameter("WorkCategoryIDs", typeof(string));
    
            var followUpDateParameter = followUpDate.HasValue ?
                new ObjectParameter("FollowUpDate", followUpDate) :
                new ObjectParameter("FollowUpDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkOrderMasterUpdate", wOIDParameter, wODateParameter, customerIDParameter, employeeIDParameter, descriptionParameter, statusParameter, workCategoryIDsParameter, followUpDateParameter);
        }
    
        public virtual ObjectResult<WorkOrderNoGetByCustomerID_Result> WorkOrderNoGetByCustomerID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkOrderNoGetByCustomerID_Result>("WorkOrderNoGetByCustomerID", customerIDParameter);
        }
    
        public virtual int ZoneCategoryDelete(string zoneCategoryIDs)
        {
            var zoneCategoryIDsParameter = zoneCategoryIDs != null ?
                new ObjectParameter("ZoneCategoryIDs", zoneCategoryIDs) :
                new ObjectParameter("ZoneCategoryIDs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZoneCategoryDelete", zoneCategoryIDsParameter);
        }
    
        public virtual int ZoneCategoryInsert(string zoneCategory, Nullable<bool> statusBaseCategory, ObjectParameter zoneCategoryID)
        {
            var zoneCategoryParameter = zoneCategory != null ?
                new ObjectParameter("ZoneCategory", zoneCategory) :
                new ObjectParameter("ZoneCategory", typeof(string));
    
            var statusBaseCategoryParameter = statusBaseCategory.HasValue ?
                new ObjectParameter("StatusBaseCategory", statusBaseCategory) :
                new ObjectParameter("StatusBaseCategory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZoneCategoryInsert", zoneCategoryParameter, statusBaseCategoryParameter, zoneCategoryID);
        }
    
        public virtual ObjectResult<ZoneCategorySelectAll_Result> ZoneCategorySelectAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZoneCategorySelectAll_Result>("ZoneCategorySelectAll");
        }
    
        public virtual ObjectResult<ZoneCategorySelectByID_Result> ZoneCategorySelectByID(Nullable<int> zoneCategoryID)
        {
            var zoneCategoryIDParameter = zoneCategoryID.HasValue ?
                new ObjectParameter("ZoneCategoryID", zoneCategoryID) :
                new ObjectParameter("ZoneCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ZoneCategorySelectByID_Result>("ZoneCategorySelectByID", zoneCategoryIDParameter);
        }
    
        public virtual int ZoneCategoryUpdate(Nullable<int> zoneCategoryID, string zoneCategory, Nullable<bool> statusBaseCategory)
        {
            var zoneCategoryIDParameter = zoneCategoryID.HasValue ?
                new ObjectParameter("ZoneCategoryID", zoneCategoryID) :
                new ObjectParameter("ZoneCategoryID", typeof(int));
    
            var zoneCategoryParameter = zoneCategory != null ?
                new ObjectParameter("ZoneCategory", zoneCategory) :
                new ObjectParameter("ZoneCategory", typeof(string));
    
            var statusBaseCategoryParameter = statusBaseCategory.HasValue ?
                new ObjectParameter("StatusBaseCategory", statusBaseCategory) :
                new ObjectParameter("StatusBaseCategory", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ZoneCategoryUpdate", zoneCategoryIDParameter, zoneCategoryParameter, statusBaseCategoryParameter);
        }
    }
}
