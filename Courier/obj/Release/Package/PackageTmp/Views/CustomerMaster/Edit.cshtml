@model LTMSV2.Models.CustmorVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />


<script>
    $(function () {
        $('#OfficeTimeFrom').datetimepicker({ format: 'HH:mm' });
    });

    $(function () {
        $('#OfficeTimeTo').datetimepicker({ format: 'HH:mm' });
    });
</script>

<script type="text/javascript">

    

   function checkEmail(value) {

    var valid = true;

    @*if (value.indexOf('@') == -1) {
        valid = false;
    } else {

        var parts = value.split('@');
        var domain = parts[1];

        if (domain.indexOf('.') == -1) {

            valid = false;

        } else {

            var domainParts = domain.split('.');
            var ext = domainParts[1];

            if (ext.length > 4 || ext.length < 2) {

                valid = false;
            }
        }*@

    

       if (valid == true)
       {
           $("#validations").html('* Please fill mandatory fields!');
          return true;
        }
       else {
        $("#validations").html('Invalid Email Address!');
        return valid;
    }

    

};

    function is_url(str)
{
  regexp =  /^(?:(?:https?|ftp):\/\/)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/;
        if (regexp.test(str))
        {
          $("#validations").html('* Please fill mandatory fields!');
          return true;
        }
        else
        {
            $("#validations").html('Invalid Website Link!');
          return false;
        }
}
    function checkmobileno(inputtxt) {
        debugger;
        //var phoneno = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;
        var phoneno = /^[0-9]{10}$/;
        if (inputtxt.match(phoneno)) {
            $("#validations").html('* Please fill mandatory fields!');
            return true;
        }
        else {
            $("#validations").html('The Mobile Number entered is invalid!');
            return false;
        }
    }
    function checkPhoneNumber(phoneNo) {
        var phoneRE = /^\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/; ///^\(\d\d\d\) \d\d\d-\d\d\d\d$/;
        if (phoneNo.match(phoneRE)) {
            $("#validations").html('* Please fill mandatory fields!');
            return true;
        } else {
            $("#validations").html('The phone number entered is invalid!');

            return false;
        }
    }
    function checkNumeric(numtext) {
        //^[1-9]\d * (\.\d +)?$
        var NumericRE = /^-?(0|[1-9]\d*)(\.\d+)?$/; ///^\^[1-9]\d * (\.\d +)?$/;
        if (numtext.match(NumericRE)) {
            $("#validations").html('* Please fill mandatory fields!');
            return true;
        } else {
            $("#validations").html('Invalid Credit Limit!');
            return false;
        }
    }

    $(document).ready(function () {

        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });
        $(":password").css({ "border-radius": "5px" });

        $("#CustomerType").focus();

        //$("#CountryID").change(function () {
        //    $("#CityID").empty();
        //    $('#CityID').append('<option value="0">Select</option>');
        //    $.ajax({
        //        type: "POST",
        //        url: "/CompanyMaster/GetCity",
        //        datatype: "Json",
        //        data: { id: $("#CountryID option:selected").val() },
        //        success: function (data) {


        //            $.each(data, function (index, value) {
        //                $('#CityID').append('<option value="' + value.CityID + '">' + value.City + '</option>');
        //            });

        //        }
        //    });
        //});

        //$("#CityID").change(function () {

        //    $("#LocationID").empty();
        //    $('#LocationID').append('<option value="0">Select</option>');
        //    $.ajax({
        //        type: "POST",
        //        url: "/CompanyMaster/GetLocation",
        //        datatype: "Json",
        //        data: { id: $("#CityID option:selected").val() },
        //        success: function (data) {


        //            $.each(data, function (index, value) {
        //                $('#LocationID').append('<option value="' + value.LocationID + '">' + value.Location + '</option>');
        //            });

        //        }
        //    });
        //});

        $("#btnsave").click(function () {
            debugger;
            var cust = $("#CustomerType option:selected").val();
            var name = $("#CustomerName").val();
            var code = $("#CustomerCode").val();
            var add1 = $("#Address1").val();
            var con = $("#ContactPerson").val();
            var cou = $("#CountryName").val();
            var city = $("#CityName").val();
            var loc = $("#autocomplete").val();
            var curr = $("#CurrenceyID option:selected").val();
            var mobile = $("#Mobile").val();
            var phoneno = $("#Phone").val();
            var cre = $("#CreditLimit").val();
            var emp = $("#EmployeeID").val();
            var email = $("#Email").val();
            var pass = $("#Password").val();
            var website = $("#Website").val();
            if (cust == "") {
                $("#validations").show();
                $("#CustomerType").focus();
                return false;
            }
            else if (name == "") {
                $("#validations").show();
                $("#CustomerName").focus();
                return false;
            }
             if (cust != "CR" &&  cust!="" && name!="") {
                 $("#validations").hide();
                return true;
            }
            //for credit 
            if (code == "") {
                $("#validations").show();
                $("#CustomerCode").focus();
                return false;
            }
            else if (add1 == "") {
                $("#validations").show();
                $("#Address1").focus();
                return false;
            }
            else if (con == "") {
                $("#validations").show();
                $("#ContactPerson").focus();
                return false;
            }
            //else if (code == "") {
            //    $("#validations").show();
            //    $("#CustomerCode").focus();
            //    return false;
            //}
            else if (cou == "" || cou==undefined ) {
                $("#validations").show();
                $("#CountryName").focus();
                return false;
            }
            else if (city == "" || city==undefined ) {
                $("#validations").show();
                $("#CityName").focus();
                return false;
            }
            else if (loc == "" || loc==undefined ) {
                $("#validations").show();
                $("#autocomplete").focus();
                return false;
            }
            else if (curr == "") {
                $("#validations").show();
                $("#CurrenceyID").focus();
                return false;
            }
            else if (mobile == "") {
                $("#Mobile").focus();
                $("#validations").show();
                return false;
            }
            //else if (phone == "") {
            //    $("#validations").show();
            //    return false;
            //}
            //else if (cre == "") {
            //    $("#validations").show();
            //    return false;
            //}
            else if (emp == "") {
                $("#validations").show();
                $("#EmployeeID").focus();
                return false;
            }
            else if (email == "") {
                $("#validations").show();
                $("#Email").focus();
                return false;
            }
            //else if (pass == "") {
            //    $("#validations").show();
            //    return false;
            //}

            if (cre != "") {
                if (checkNumeric(cre) == false) {
                    $("#CreditLimit").focus();
                    $("#validations").show();
                    return false;
                }
            }

            //if (phoneno != "") {
                
            //    if (checkPhoneNumber(phoneno) == false) {
            //        $("#PhoneNo").focus();
            //        $("#validations").show();
            //        return false;
            //    }

            //}

            //if (mobile != "") {                
            //    if (checkmobileno(mobile) == false) {
            //        $("#Mobile").focus();
            //        $("#validations").show();
            //        return false;
            //    }
            //}

            //if (email != "") {
            //    if (checkEmail(email) == false) {
            //        $("#Email").focus();
            //        $("#validations").show();
            //        return false;
            //    }
            //}
         
            if (website.trim() != "") {
                debugger;
                if (is_url(website.trim()) == false) {
                    $("#WebSite").focus();
                    $("#validations").show();
                    return false;
                }
                else {
                    $("#validations").hide();
                    return true;
                }
            }

            else {
                $("#validations").hide();
                return true;
            }
            
        });
    });
</script>

<section class="content-header">
    <h1 class="headingfont">Customer - Modify</h1>

</section>



@*<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false&libraries=places"></script>*@
<script type="text/javascript">
//    google.maps.event.addDomListener(window, 'load', function () {
//        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
//        google.maps.event.addListener(places, 'place_changed', function () {
//            var place = places.getPlace();
//    var address = place.formatted_address;
//    var latitude = place.geometry.location.A;
//    var longitude = place.geometry.location.F;
//    var mesg = "Address: " + address;
//    mesg += "\nLatitude: " + latitude;
//    mesg += "\nLongitude: " + longitude;
//    alert(mesg);
//});
//    });

    var placeSearch, autocomplete,autocompleteCity,autocompleteCountry;

var componentForm = {
  street_number: 'short_name',
  route: 'long_name',
  locality: 'long_name',
  administrative_area_level_1: 'short_name',
  country: 'long_name',
  postal_code: 'short_name'
};

    function initAutocomplete() {
  // Create the autocomplete object, restricting the search predictions to
  // geographical location types.
  autocomplete = new google.maps.places.Autocomplete(
      document.getElementById('autocomplete'), {types: ['geocode']});

  // Avoid paying for data that you don't need by restricting the set of
  // place fields that are returned to just the address components.
  autocomplete.setFields(['address_component']);

  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);


        autocompleteCity = new google.maps.places.Autocomplete(
            document.getElementById('CityName'), { types: ['geocode'] });

        autocompleteCountry = new google.maps.places.Autocomplete(
      document.getElementById('CountryName'), {types: ['geocode']});

    }

    function fillInAddress() {
        debugger;
  // Get the place details from the autocomplete object.
  var place = autocomplete.getPlace();
        console.log(place.address_components);

  //for (var component in componentForm) {
  //  document.getElementById(component).value = '';
  //  document.getElementById(component).disabled = false;
  //}

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  //for (var i = 0; i < place.address_components.length; i++) {
  //  var addressType = place.address_components[i].types[0];
  //  if (componentForm[addressType]) {
  //    var val = place.address_components[i][componentForm[addressType]];
  //    document.getElementById(addressType).value = val;
  //  }
  //      }

        var postcode = '';
         $.each(place.address_components, function (index, component) {
                        var types = component.types;
                        $.each(types, function (index, type) {
                            if (type == 'postal_code') {
                                postcode = component.long_name;
                            }
                            else if (type == 'locality') {
                                //$('#hdncity').val(component.long_name);
                                $('#CityName').val(component.long_name);
                            }
                            else if (type == 'country') {
                                $('#CountryName').val(component.long_name);
                            }

                            //if(type == 'administrative_area_level_1') {
                            //state = component.short_name;
                            //    }
                        });
                    });

    }

    // Bias the autocomplete object to the user's geographical location,
// as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }
</script>



<section class="content">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)

        <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>



        <fieldset>

            <div class="row no-margin">


                <div class="col-md-3">
                    @Html.HiddenFor(model => model.BranchID)
                    @Html.HiddenFor(model => model.AcCompanyID)
                    @Html.HiddenFor(model => model.UserID)
                    <label class="headinglabel required">Customer Type</label>
                    @Html.HiddenFor(model => model.CustomerID)
                    @Html.DropDownList("CustomerType", new List<SelectListItem>
                {
                    new SelectListItem{ Text="Credit", Value = "CR" },
                    new SelectListItem{ Text="Cash", Value = "CS" },
                    new SelectListItem{ Text="Shipper", Value = "SH" },
                    new SelectListItem{ Text="Consignee", Value = "CO" },

                 }, "Select", new { @class = "form-control",@disabled = "@disabled" })
                    @Html.ValidationMessageFor(model => model.CustomerType)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Customer Name</label>
                    @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.CustomerName)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Customer Code</label>
                    @Html.TextBoxFor(model => model.CustomerCode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Address2)
                </div>


                <div class="col-md-3">
                    <label class="headinglabel required">Flat/Building</label>
                    @Html.TextBoxFor(model => model.Address1, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address1)
                </div>
            </div>



            <div class="row no-margin" style="padding-top: 10px">

                <div class="col-md-3">
                    <label class="headinglabel">Street Name</label>
                    @Html.TextBoxFor(model => model.Address2, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address2)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Area</label>
                    @Html.TextBoxFor(model => model.Address3, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address3)
                </div>


                <div class="col-md-3">
                    <label class="headinglabel required">Contact Person</label>
                    @Html.TextBoxFor(model => model.ContactPerson, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ContactPerson)
                </div>

               

                <div class="col-md-3">
                    <label class="headinglabel required">Location</label>
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", id = "autocomplete", @onFocus = "geolocate()" })
                    @*<input class="form-control" id="autocomplete" name="LocationName" placeholder="Enter your address" onFocus="geolocate()" type="text" />*@
                    @*@Html.DropDownListFor(model => model.LocationID, new SelectList(@ViewBag.location, "LocationID", "Location"), "Select", new { @class = "form-control" })*@
                    @*@Html.ValidationMessageFor(model => model.LocationID)*@
                </div>
            </div>



            <div class="row no-margin" style="padding-top: 10px">

                <div class="col-md-3">
                    <label class="headinglabel required">City</label>
                    @Html.TextBoxFor(model => model.CityName, new { @class = "form-control", id = "CityName", @onFocus = "geoCitylocate()" })
                    @*<input class="form-control" id="CityID" name="CityName" placeholder="Enter your address" type="text" onFocus="geoCitylocate()" />*@
                    @*@Html.DropDownListFor(model => model.CityID, new SelectList(@ViewBag.city, "CityID", "City"), "Select", new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.CityName)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Country</label>
                    @*<input type="text" id="txtPlaces" style="width: 250px" placeholder="Enter a location" />*@
                    @*<input class="form-control" id="CountryID" name="CountryName" placeholder="Enter your Country" type="text" onFocus="geoCountrylocate()" />*@
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control", id = "CountryName", @onFocus = "geoCountrylocate()" })
                    @*@Html.DropDownListFor(model => model.CountryID, new SelectList(@ViewBag.country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.CountryName)
                </div>



                <div class="col-md-3">
                    <label class="headinglabel required">Currency</label>
                    @Html.DropDownListFor(model => model.CurrenceyID, new SelectList(@ViewBag.currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CurrenceyID)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Mobile</label>
                    @Html.TextBoxFor(model => model.Mobile, new { @class = "form-control textright", @maxlength = 25, @placeholder = "XXXXXXXXXX" })
                    @Html.ValidationMessageFor(model => model.Mobile)
                </div>


            </div>


            <div class="row no-margin" style="padding-top: 10px">



                <div class="col-md-3">
                    <label class="headinglabel">Phone</label>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control textright", @maxlength = 25, @placeholder = "XXX-XXX-XXXX" })
                    @Html.ValidationMessageFor(model => model.Phone)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Website</label>
                    @Html.TextBoxFor(model => model.Website, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Website)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Max Credit Limit</label>
                    @Html.TextBoxFor(model => model.CreditLimit, new { @class = "form-control text-right" })
                    @Html.ValidationMessageFor(model => model.CreditLimit)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Sale Executive</label>
                    @Html.DropDownListFor(model => model.EmployeeID, new SelectList(@ViewBag.employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmployeeID)
                </div>

            </div>




            <div class="row no-margin" style="padding-top: 10px">

                <div class="col-md-3">
                    <label class="headinglabel required">Role</label>
                    @Html.DropDownListFor(model => model.RoleID, new SelectList(@ViewBag.roles, "RoleID", "RoleName"), "Select", new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.EmployeeID)
                </div>


                <div class="col-md-3">
                    <label class="headinglabel">Email</label>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control"  })
                    @Html.ValidationMessageFor(model => model.Email)
                </div>

                @*<div class="col-md-3">
                        <label class="headinglabel">Password</label>
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password)
                    </div>*@

                <div class="col-md-3">
                    <label class="headinglabel">Office Time From</label>
                    @Html.TextBoxFor(model => model.OfficeTimeFrom, new { @class = "form-control text-right" })
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Office Time To</label>
                    @Html.TextBoxFor(model => model.OfficeTimeTo, new { @class = "form-control text-right" })
                </div>


            </div>



            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-3">
                    <label class="headinglabel">Referal</label>
                    @Html.TextBoxFor(model => model.Referal, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Referal)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Business Type</label>
                    @Html.DropDownListFor(model => model.BusinessTypeId, new SelectList(@ViewBag.businessType, "Id", "BusinessType1"), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BusinessTypeId)
                </div>
                <div class="col-md-2 checkboxdesign" style="padding-top:30px">
                    @Html.CheckBox("StatusCommission", new { @name = "StatusCommission" }) &nbsp
                    <label class="headinglabel">Allow Commission To Courier</label>
                    @Html.ValidationMessageFor(model => model.StatusCommission)
                </div>
                <div class="col-md-2 checkboxdesign" style="padding-top:30px">
                    @Html.CheckBox("StatusTaxable", new { @name = "StatusTaxable" }) &nbsp
                    <label class="headinglabel">Taxable</label>
                    @Html.ValidationMessageFor(model => model.StatusTaxable)
                </div>
                <div class="col-md-2 checkboxdesign" style="padding-top:30px">
                    @Html.CheckBox("StatusActive", new { @name = "StatusActive" }) &nbsp
                    <label class="headinglabel">Active</label>
                    @Html.ValidationMessageFor(model => model.StatusActive)
                </div>
            </div>

            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-3 hide">
                    <label class="headinglabel required">Depot</label>
                    @Html.DropDownListFor(model => model.DepotID, new SelectList(@ViewBag.Depot, "ID", "Depot"), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DepotID)

                </div>
                <div class="col-md-12 btn-right" style="padding-top:23px">

                    <input type="submit" value="Update" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;<a href='@Url.Action("Index", "CustomerMaster", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                </div>
            </div>
        </fieldset>
    }
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCexhtncgr1cTUh0hzKOrK_GsS_tifAEns&libraries=places&callback=initAutocomplete" async defer></script>
    @*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>*@

