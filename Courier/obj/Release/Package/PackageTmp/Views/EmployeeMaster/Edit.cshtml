@model LTMSV2.Models.EmployeeVM
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}

                <script type="text/javascript">
                    //    google.maps.event.addDomListener(window, 'load', function () {
                    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
                    //        google.maps.event.addListener(places, 'place_changed', function () {
                    //            var place = places.getPlace();
                    //    var address = place.formatted_address;
                    //    var latitude = place.geometry.location.A;
                    //    var longitude = place.geometry.location.F;
                    //    var mesg = "Address: " + address;
                    //    mesg += "\nLatitude: " + latitude;
                    //    mesg += "\nLongitude: " + longitude;
                    //    alert(mesg);
                    //});
                    //    });

                    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

                    var componentForm = {
                        street_number: 'short_name',
                        route: 'long_name',
                        locality: 'long_name',
                        administrative_area_level_1: 'short_name',
                        country: 'long_name',
                        postal_code: 'short_name'
                    };

                    function initAutocomplete() {
                        // Create the autocomplete object, restricting the search predictions to
                        // geographical location types.
                        autocomplete = new google.maps.places.Autocomplete(
                            document.getElementById('autocomplete'), { types: ['geocode'] });

                        // Avoid paying for data that you don't need by restricting the set of
                        // place fields that are returned to just the address components.
                        autocomplete.setFields(['address_component']);

                        // When the user selects an address from the drop-down, populate the
                        // address fields in the form.
                        //    autocomplete.addListener('place_changed', fillInAddress);


                        autocompleteCity = new google.maps.places.Autocomplete(
                            document.getElementById('CityName'), { types: ['geocode'] });

                        autocompleteCountry = new google.maps.places.Autocomplete(
                            document.getElementById('CountryName'), { types: ['geocode'] });

                    }

                    function fillInAddress() {
                        debugger;
                        // Get the place details from the autocomplete object.
                        var place = autocomplete.getPlace();
                        console.log(place.address_components);

                        //for (var component in componentForm) {
                        //  document.getElementById(component).value = '';
                        //  document.getElementById(component).disabled = false;
                        //}

                        // Get each component of the address from the place details,
                        // and then fill-in the corresponding field on the form.
                        //for (var i = 0; i < place.address_components.length; i++) {
                        //  var addressType = place.address_components[i].types[0];
                        //  if (componentForm[addressType]) {
                        //    var val = place.address_components[i][componentForm[addressType]];
                        //    document.getElementById(addressType).value = val;
                        //  }
                        //      }

                        var postcode = '';
                        $.each(place.address_components, function (index, component) {
                            var types = component.types;
                            $.each(types, function (index, type) {
                                if (type == 'postal_code') {
                                    postcode = component.long_name;
                                }
                                else if (type == 'locality') {
                                    //$('#hdncity').val(component.long_name);
                                    $('#CityName').val(component.long_name);
                                }
                                else if (type == 'country') {
                                    $('#CountryName').val(component.long_name);
                                }

                                //if(type == 'administrative_area_level_1') {
                                //state = component.short_name;
                                //    }
                            });
                        });

                    }

                    // Bias the autocomplete object to the user's geographical location,
                    // as supplied by the browser's 'navigator.geolocation' object.
                    function geolocate() {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(function (position) {
                                var geolocation = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };
                                var circle = new google.maps.Circle(
                                    { center: geolocation, radius: position.coords.accuracy });
                                autocomplete.setBounds(circle.getBounds());
                            });
                        }
                    }

                    function geoCitylocate() {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(function (position) {
                                var geolocation = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };
                                var circle = new google.maps.Circle(
                                    { center: geolocation, radius: position.coords.accuracy });
                                autocompleteCity.setBounds(circle.getBounds());
                            });
                        }
                    }

                    function geoCountrylocate() {
                        if (navigator.geolocation) {
                            navigator.geolocation.getCurrentPosition(function (position) {
                                var geolocation = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };
                                var circle = new google.maps.Circle(
                                    { center: geolocation, radius: position.coords.accuracy });
                                autocompleteCountry.setBounds(circle.getBounds());
                            });
                        }
                    }
</script>
<script type="text/javascript">
    //     function keypressHandler(e)
    //     {
    //         console.log('ee');
    //    if(e.which == 13) {
    //        e.preventDefault(); //stops default action: submitting form
    //        $(this).blur();
    //        console.log($(this).attr('name'));
    //        $('#btnsave').focus().click();//give your submit an ID
    //    }
    //}

    //$('#Myform').on("keypress",e)
    $(document).ready(function () {

    

            
            $(":text").css({ "border-radius": "5px" });
            $(":password").css({ "border-radius": "5px" });
            $("select").css({ "border-radius": "5px" });



            $(function () {
                //var date = new Date("2016-09-01");
                //var currentMonth = date.getMonth();
                //var currentDate = date.getDate();
                //var currentYear = date.getFullYear();

                //$("#DOJ").datepicker({ dateFormat: 'dd-mm-yy', maxDate: '0',changeYear:true,changeMonth:true });
                //$("#JoinDate").datepicker({ dateFormat: 'dd-M-yy', changeYear: true, changeMonth: true });
       $('#JoinDate').datetimepicker({ format: 'DD-MM-YYYY' });


                //$('#JoinDate').datepicker({
                //    dateFormat: 'dd-M-yy', maxDate: '0',
                //    changeYear: true, changeMonth: true,
                //});

                $(".dolclass").css({ "display": "none" });
                $(".chkclass").css({ "display": "block" });


                $("#StatusActive").click(function () {
                    if ($("#StatusActive").is(':checked')) {
                        $(".dolclass").css({ "display": "none" });

                    }
                    else {
                        $(".dolclass").css({ "display": "block" });

                    }
                });

            });

           $('#apassshow').click(function () {

            if ($('#apassshow').html() == 'Show') {

                if ($('#Password').val()!="")
                    $('#txtpass').val($('#Password').val());

                $('#Password').addClass('hide');
                $('#txtpass').removeClass('hide');
                $('#apassshow').html('Hide');
            }
            else {
             $('#Password').removeClass('hide');
                $('#txtpass').addClass('hide');
                  $('#apassshow').html('Show');
            }
            

           });


        $('#txtpass').change(function () {

            $('#Password').val($('#txtpass').val());

        })

        $("#btnsave1").click(function () {
            debugger;
                var code = $("#EmployeeCode").val();
                var name = $("#EmployeeName").val();
                var add1 = $("#Address1").val();
                var phone = $("#Phone").val();
                var email = $("#Email").val();
                var mob = $("#MobileNo").val();
                var cou = $("#CountryID option:selected").val();
                var des = $("#DesignationID option:selected").val();
                var dep = $("#Depot option:selected").val();
                var pass = $("#txtpass").val();
                var mobdev = $("#MobileDeviceID").val();
                var pwd = $("#MobileDevicePWD").val();

                if (code == "") {
                    $("#validations").show();
                    return false;
                }
                else if (name == "") {
                    $("#validations").show();
                    return false;
                }
                else if (add1 == "") {
                    $("#validations").show();
                    return false;
                }
                else if (phone == "") {
                    $("#validations").show();
                    return false;
                }
                else if (email == "") {
                    $("#validations").show();
                    return false;
                }
                else if (mob == "") {
                    $("#validations").show();
                    return false;
                }
                else if (cou == "") {
                    $("#validations").show();
                    return false;
                }
                else if (des == "") {
                    $("#validations").show();
                    return false;
                }
                else if (dep == "") {
                    $("#validations").show();
                    return false;
                }
                else if (pass == "") {
                    $("#validations").show();
                    return false;
                }
                //else if (mobdev == "") {
                //    $("#validations").show();
                //    return false;
                //}
                //else if (pwd == "") {
                //    $("#validations").show();
                //    return false;
                //}

                else {
                    $('#Password').val($('#txtpass').val());
                    $("#validations").hide();
                    return;
                    //$("#Myform").submit();
                    //return true;
                }   
            });

        });
</script>

<section class="content-header">
    <h1 class="headingfont">Employee - Modify</h1>

</section>


<section class="content">
    @using (@Html.BeginForm("Edit", "EmployeeMaster", new { @name = "Myform", @id = "Myform" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <fieldset>


            <div class="row no-margin">

                <div class="col-md-3">

                    <label class="headinglabel required">Employee Code</label>
                    @Html.HiddenFor(model => model.EmployeeID)
                    @Html.HiddenFor(model => model.BranchID)
                    @Html.HiddenFor(model => model.AcCompanyID)
                    @Html.HiddenFor(model => model.UserID)
                    @Html.TextBoxFor(model => model.EmployeeCode, new { @class = "form-control",@required="true" })
                    @Html.ValidationMessageFor(model => model.EmployeeCode)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required ">Employee Name</label>
                    @Html.TextBoxFor(model => model.EmployeeName, new { @class = "form-control txttarget", @required = "true" })
                    @Html.ValidationMessageFor(model => model.EmployeeName)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Building</label>
                    @Html.TextBoxFor(model => model.Address1, new { @class = "form-control txttarget" , @required = "true" })
                    @Html.ValidationMessageFor(model => model.Address1)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Street</label>
                    @Html.TextBoxFor(model => model.Address2, new { @class = "form-control txttarget" , @required = "true" })
                    @Html.ValidationMessageFor(model => model.Address2)

                </div>

            </div>

            <div class="row no-margin" style="padding-top: 10px">

                <div class="col-md-3">
                    <label class="headinglabel required">Phone No.</label>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control textright", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Phone)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Fax No.</label>
                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.Fax)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Email</label>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Email)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Mobile No</label>
                    @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control textright", @required = "true" })
                    @Html.ValidationMessageFor(model => model.MobileNo)
                </div>
            </div>


            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-3">
                    <label class="headinglabel required">Country</label>
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control", id = "CountryName", @onFocus = "geoCountrylocate()" , @required = "true" })
                    @Html.ValidationMessageFor(model => model.CountryID)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Designation</label>
                    @Html.DropDownListFor(model => model.DesignationID, new SelectList(@ViewBag.Designation, "DesignationID", "Designation1"), "Select", new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.DesignationID)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Join Date</label>
                    @Html.TextBoxFor(model => model.JoinDate,  new { @class = "form-control text-right" })
                    @Html.ValidationMessageFor(model => model.JoinDate)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Depot</label>
                    @Html.DropDownListFor(model => model.Depot, new SelectList(@ViewBag.Depots, "Depot", "Name"), "Select", new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Depot)

                </div>

            </div>



            <div class="row no-margin" style="padding-top: 10px">

                <div class="col-md-3">
                    <label class="headinglabel required">Role</label>
                    @Html.DropDownListFor(model => model.RoleID, new SelectList(@ViewBag.roles, "RoleID", "RoleName"), "Select", new { @class = "form-control" , @required = "true" })
                    @Html.ValidationMessageFor(model => model.EmployeeID)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Password <a id="apassshow">Show</a></label>                    
                    <input type="text" id="txtpass" value="@Model.Password" class="form-control hide" />
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control"  })
                    @Html.ValidationMessageFor(model => model.Password)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Mobile Device ID</label>
                    @Html.TextBoxFor(model => model.MobileDeviceID, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MobileDeviceID)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Device Password</label>
                    @Html.PasswordFor(model => model.MobileDevicePWD, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MobileDevicePWD)

                </div>



            </div>

            <div class="row no-margin" style="padding-top:10px">

                @*<div class="col-md-3" style="padding:20px">

                    @Html.CheckBox("StatusCommision", new { @name = "StatusCommision" }) &nbsp;&nbsp;
                    <label class="headinglabel">Allow Commission</label>
                    @Html.ValidationMessageFor(model => model.StatusCommision)
                </div>*@

                <div class="col-md-3" style="padding-top:15px">
                    @Html.CheckBox("StatusActive", new { @name = "StatusActive" }) &nbsp;&nbsp;
                    <label class="headinglabel">Active</label>
                    @Html.ValidationMessageFor(model => model.StatusActive)
                </div>

                @*<div class="col-md-3" style="padding-top:15px">
                    @Html.CheckBox("StatusDefault", new { @name = "StatusDefault" }) &nbsp;&nbsp;
                    <label class="headinglabel">Default</label>
                    @Html.ValidationMessageFor(model => model.StatusDefault)
                </div>*@
            </div>
            <div class="row no-margin" style="padding-top: 10px">



                <div class="col-md-12 btn-right">

                    <input type="submit" value="Update" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;   <a href='@Url.Action("Index", "EmployeeMaster", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here" style="margin-left:5px;">Cancel</a>


                </div>
            </div>
        </fieldset>
    }
</section>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>