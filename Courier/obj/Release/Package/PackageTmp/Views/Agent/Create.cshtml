@model LTMSV2.Models.AgentVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _decimal = Convert.ToInt32(@Session["Decimal"].ToString());
}


<script type="text/javascript">
    //    google.maps.event.addDomListener(window, 'load', function () {
    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
    //        google.maps.event.addListener(places, 'place_changed', function () {
    //            var place = places.getPlace();
    //    var address = place.formatted_address;
    //    var latitude = place.geometry.location.A;
    //    var longitude = place.geometry.location.F;
    //    var mesg = "Address: " + address;
    //    mesg += "\nLatitude: " + latitude;
    //    mesg += "\nLongitude: " + longitude;
    //    alert(mesg);
    //});
    //    });

    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);


        autocompleteCity = new google.maps.places.Autocomplete(
            document.getElementById('CityName'), { types: ['geocode'] });

        autocompleteCountry = new google.maps.places.Autocomplete(
            document.getElementById('CountryName'), { types: ['geocode'] });

    }

    function fillInAddress() {

        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">
      function setTwoNumberDecimal(obj) {
        debugger;

          //$(obj).val(parseFloat($(obj).val()).toFixed(@_decimal));
          var p = parseFloat($(obj).val()).toFixed(@_decimal);
          $('#CreditLimit').val(p);
          $(obj).val(addCommas(p.toString()));
    }

   

    function addCommas(nStr) {
        nStr += '';
        x = nStr.split('.');
        x1 = x[0];
        x2 = x.length > 1 ? '.' + x[1] : '';
        var rgx = /(\d+)(\d{3})/;
        while (rgx.test(x1)) {
                x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
    }

    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });
        $(":password").css({ "border-radius": "5px" });

        $("#CityID").empty();
        $("#LocationID").empty();

        $('#CityID').append('<option value="0">Select</option>');
        $('#LocationID').append('<option value="0">Select</option>');

        $("#IsAWBAutoGenerated").click(function () {
            if ($("#IsAWBAutoGenerated").is(':checked')) {
                $(".awbno").show();
            }
            else {
                $(".awbno").hide();
            }
        });

        $('#Email').change(function () {
            debugger;
            if ($('#ID').val() == 0) {
                if ($('#Email').val() != '') {
                    $.ajax({
                        type: "Get",
                        url: "/EmployeeMaster/CheckUserEmailExist",
                        datatype: "Json",
                        data: { EmailId: $('#Email').val() },
                        success: function (data) {
                            debugger;
                            console.log(data);
                            if (data == "true") {

                                $("#validations").html("User Emailid " + $('#Email').val() + " already exists!");
                                $('#Email').val('');
                                $("#validations").show();
                                return false;
                            }
                            else {

                                $("#validations").hide();
                                return true;
                            }


                        }
                    });
                }
            }
        });

        $("#EmployeeName").focus();

        $("#btnsave1").click(function () {
            var name = $("#EmployeeName").val();
            var ref = $("#ReferenceCode").val();
            var add1 = $("#Address1").val();
            var phone = $("#Phone").val();
            var con = $("#ContactPerson").val();
            var cou = $("#CountryID option:selected").val();
            var city = $("#CityID option:selected").val();
            var loc = $("#LocationID option:selected").val();
            var curr = $("#CurrenceyID option:selected").val();
            var zone = $("#ZoneCategoryID option:selected").val();
            var ac = $("#AcHeadID option:selected").val();
            var cre = $("#CreditLimit").val();
            var email = $("#Email").val();
            var pass = $("#Password").val();

            if (name == "") {
                $("#validations").show();
                return false;
            }
            else if (ref == "") {
                $("#validations").show();
                return false;
            }
            else if (add1 == "") {
                $("#validations").show();
                return false;
            }
            else if (phone == "") {
                $("#validations").show();
                return false;
            }
            else if (con == "") {
                $("#validations").show();
                return false;
            }
            else if (cou == "") {
                $("#validations").show();
                return false;
            }
            else if (city == "") {
                $("#validations").show();
                return false;
            }
            else if (loc == "") {
                $("#validations").show();
                return false;
            }

            else if (curr == "") {
                $("#validations").show();
                return false;
            }
            else if (zone == "") {
                $("#validations").show();
                return false;
            }
            else if (cre == "") {
                $("#validations").show();
                return false;
            }
            else if (email == "") {
                $("#validations").show();
                return false;
            }
            else if (pass == "") {
                $("#validations").show();
                return false;
            }
            else {
                $("#validations").hide();
                return true;
            }

        });
        $('#AgentName').focus();
    });
</script>

<section class="content-header">
    <h1 class="headingfont">Agent</h1>

</section>

<section class="content">
    @if (TempData["WarningMsg"] != null)
    {

        <script type="text/javascript">
                 $(document).ready(function () {
                     $.notify("@TempData["WarningMsg"]",, "error");
                      });
        </script>
    }
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
        <div id="validations" style="color:red;margin-left:7px;display:none"> *Please fill mandatory fields </div>

        <fieldset>

            <div class="row no-margin">

                <div class="col-md-3">
                    @Html.HiddenFor(model => model.ID)
                    @Html.HiddenFor(model => model.CreditLimit)
                    <label class="headinglabel required">Name</label>
                    @Html.TextBoxFor(model => model.AgentName, new { @class = "form-control txttarget", @required = "true" })
                    @Html.ValidationMessageFor(model => model.AgentName)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Agent Code</label>
                    @Html.TextBoxFor(model => model.AgentCode, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.AgentCode)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Building</label>
                    @Html.TextBoxFor(model => model.Address1, new { @class = "form-control txttarget", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Address1)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Street</label>
                    @Html.TextBoxFor(model => model.Address2, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address2)
                </div>



            </div>


            <div class="row no-margin" style="padding-top:10px">


                <div class="col-md-3">
                    <label class="headinglabel">Pincode</label>
                    @Html.TextBoxFor(model => model.Address3, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address3)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Phone</label>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control textright", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Phone)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Fax</label>
                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.Fax)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Website</label>
                    @Html.TextBoxFor(model => model.WebSite, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.WebSite)
                </div>


            </div>



            <div class="row no-margin" style="padding-top:10px">


                <div class="col-md-3">
                    <label class="headinglabel required">Contact Person</label>
                    @Html.TextBoxFor(model => model.ContactPerson, new { @class = "form-control txttarget", @required = "true" })
                    @Html.ValidationMessageFor(model => model.ContactPerson)

                </div>

                @*        <div class="col-md-3">
                                  <label class="headinglabel">Status</label>
                     @Html.TextBoxFor(model => model.StatusActive, new {@class="form-control" })
                    @Html.ValidationMessageFor(model => model.StatusActive)
                         </div>*@
                <div class="col-md-3">
                    <label class="headinglabel required">Location</label>
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", id = "autocomplete", @onFocus = "geolocate()", @required = "true" })
                    @Html.ValidationMessageFor(model => model.LocationName)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">City</label>
                    @Html.TextBoxFor(model => model.CityName, new { @class = "form-control", id = "CityName", @onFocus = "geoCitylocate()", @required = "true" })
                    @*@Html.DropDownListFor(model => model.CityID, new SelectList(@ViewBag.city, "CityID", "City"), "Select", new { @class = "form-control" })*@
                    @Html.ValidationMessageFor(model => model.CityName)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Country</label>
                    @*@Html.DropDownListFor(model => model.CountryID, new SelectList(@ViewBag.country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control", id = "CountryName", @onFocus = "geoCountrylocate()", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Address1)
                </div>





            </div>




            <div class="row no-margin" style="padding-top:10px">




                <div class="col-md-3">
                    <label class="headinglabel required">Currency</label>
                    @Html.DropDownListFor(model => model.CurrencyID, new SelectList(@ViewBag.currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.CurrencyID)

                </div>


                @*<div class="col-md-3">
                        <label class="headinglabel required">Zone Category</label>
                        @Html.DropDownListFor(model => model.ZoneCategoryID, new SelectList(@ViewBag.zonecategory, "ZoneCategoryID", "ZoneCategory1"), "Select", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ZoneCategoryID)

                    </div>*@


                @*<div class="col-md-3">
                        <label class="headinglabel required">Achead</label>
                        @Html.DropDownListFor(model => model.AcHeadID, new SelectList(@ViewBag.achead, "AcHeadID", "AcHead1"), "Select", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AcHeadID)

                    </div>*@

                @*<div class="col-md-3">
                        <label class="headinglabel required">Role</label>
                        @Html.DropDownListFor(model => model.RoleID, new SelectList(@ViewBag.roles, "RoleID", "RoleName"), "Select", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.EmployeeID)
                    </div>*@
                @*<div class="col-md-3" style="padding-top: 20px">
                        @Html.CheckBox("EmailNotify", new { @name = "EmailNotify" }) &nbsp
                        <label class="headinglabel">Email Notification to Customer</label>
                        @Html.ValidationMessageFor(model => model.EmailNotify)
                    </div>*@
                <div class="col-md-3">
                    <label class="headinglabel required">Credit Limit</label>
                    @Html.TextBoxFor(model => model.sCreditLimit, new { @class = "form-control textright", @required = "true" ,@onchange="setTwoNumberDecimal(this)", onblur="setTwoNumberDecimal(this)"})
                    @Html.ValidationMessageFor(model => model.sCreditLimit)

                </div>


                <div class="col-md-3">
                    <label class="headinglabel required">Email</label>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.Email)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Agent Type</label>
                    @Html.DropDownList("AgentType", new List<SelectListItem>
                {
                    new SelectListItem{ Text="Delivery Agent", Value = "1" },
                    new SelectListItem{ Text="Co-Loader", Value = "2" },
                    new SelectListItem{ Text="Depot Agent", Value = "3" },
                    new SelectListItem{ Text="Forwarding Agent", Value = "4" }
                 }, "Select", new { @class = "form-control", @required = "true" })


                </div>
            </div>

            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-3 checkboxdesign" style="padding-top:15px">
                    @Html.CheckBox("StatusActive", new { @name = "StatusActive" }) &nbsp;&nbsp;
                    <label class="headinglabel">Active</label>
                    @Html.ValidationMessageFor(model => model.StatusActive)
                </div>
                <div class="col-md-3" style="padding-top: 20px">
                    @Html.CheckBox("EmailNotify", new { @name = "EmailNotify" }) &nbsp
                    <label class="headinglabel">Email Notification to Agent</label>
                    @Html.ValidationMessageFor(model => model.EmailNotify)
                </div>


            </div>
            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-12 btn-right">
                    <input type="submit" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;<a href='@Url.Action("Index", "Agent", new { id = 0 })' class="btn btn-primary btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>
                </div>
            </div>
        </fieldset>
    }
</section>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>