@model LTMSV2.Models.ImportShipmentFormModel
@{
    int i = 0;
   
}
@foreach (var item in Model.Shipments)
{
    <tr>
        <td>

            @Html.HiddenFor(model => model.Shipments[i].ShipmentDetailID, new { @Value = item.ShipmentDetailID})
            @Html.HiddenFor(model => model.Shipments[i].HAWB, new { @Value = item.HAWB })
            @Html.HiddenFor(model => model.Shipments[i].AWB, new { @Value = item.AWB })
            @Html.HiddenFor(model => model.Shipments[i].BagNo, new { @Value = item.BagNo })
            @Html.HiddenFor(model => model.Shipments[i].Contents, new { @Value = item.Contents })
            @Html.HiddenFor(model => model.Shipments[i].Shipper, new { @Value = item.Shipper })
            @Html.HiddenFor(model => model.Shipments[i].Reciver, new { @Value = item.Reciver})
            @Html.HiddenFor(model => model.Shipments[i].PCS, new { @Value = item.PCS})
            @Html.HiddenFor(model => model.Shipments[i].Weight, new { @Value = item.Weight })
            @Html.HiddenFor(model => model.Shipments[i].Value, new { @Value = item.Value })
            @Html.HiddenFor(model => model.Shipments[i].CurrencyID, new { @Value =item.CurrencyID })            
            @Html.HiddenFor(model => model.Shipments[i].DestinationCountry, new { @Value =item.DestinationCountry })
            @Html.HiddenFor(model => model.Shipments[i].DestinationCity, new { @Value = item.DestinationCity })
            @(i + 1)
        </td>
        <td>
            @item.HAWB

            @*@Html.EditorFor(model => model.Shipments[i].HAWB, new { htmlAttributes = new { @class = "tbl-control", @required = "true", @Value = $"{item.HAWB}" } })*@
        </td>
        <td>
            @item.AWB

            @*@Html.EditorFor(model => model.Shipments[i].AWB, new { htmlAttributes = new { @class = "tbl-control", @required = "true", @Value = $"{item.AWB}" } })*@
        </td>

        <td>
            @item.BagNo

            @*@Html.EditorFor(model => model.Shipments[i].BagNo, new { htmlAttributes = new { @class = "tbl-control", @required = "true", @Value = $"{item.BagNo}" } })*@
        </td>

        <td>
            @item.Contents

            @*@Html.TextAreaFor(model => model.Shipments[i].Contents, new { @class = "tbl-control", @required = "true", @Value = $"{item.Contents}" })*@
        </td>

        <td>
            @item.Shipper

            @*@Html.TextAreaFor(model => model.Shipments[i].Shipper, new { @class = "tbl-control", @required = "true", @Value = $"{item.Shipper}" })*@
        </td>

        <td>
            @item.Reciver
            @*@Html.TextAreaFor(model => model.Shipments[i].Reciver, new { @class = "tbl-control", @required = "true", @Value = $"{item.Reciver}" })*@
        </td>

        <td>
            @item.PCS
            @*@Html.EditorFor(model => model.Shipments[i].PCS, new { htmlAttributes = new { @class = "tbl-control", @required = "true", @Value = $"{item.PCS}" } })*@
        </td>

        <td>
            @item.Weight
            @*@Html.EditorFor(model => model.Shipments[i].Weight, new { htmlAttributes = new { @class = "tbl-control", @type = "number", @required = "true", @Value = $"{item.Weight}", @step="0.001" } })*@
        </td>

        <td>
            @item.Value
            @*@Html.EditorFor(model => model.Shipments[i].Value, new { htmlAttributes = new { @class = "tbl-control", @type = "number", @required = "true", @Value = $"{item.Value}", @step="0.001" } })*@
        </td>

        <td>
            @*@item.CurrencyID*@
            @*@currencies.Where(d => d.CurrencyID == @item.CurrencyID).FirstOrDefault().CurrencyName*@
            Currency name
            @*@Html.DropDownListFor(model => model.Shipments[i].CurrencyID, new SelectList((SelectList)ViewBag.CurrencyID, "Value", "Text", item.CurrencyID), "Select Currency", htmlAttributes: new { @class = "tbl-control tbl-select", @required = "true", @Value = $"{item.CurrencyID}" })*@
        </td>
        
        <td>
            @item.DestinationCountry
            @*@countries.Where(d=>d.CountryID==@item.DestinationCountryID).FirstOrDefault().CountryName*@
            @*@item.DestinationCountryID*@
            @*@Html.DropDownListFor(model => model.Shipments[i].DestinationCountryID, new SelectList((SelectList)ViewBag.DestinationCountryID, "Value", "Text", item.DestinationCountryID), "Select Country", htmlAttributes: new { @class = "tbl-control tbl-select", @required = "true", @Value = $"{item.DestinationCountryID}", @onchange = $"populateCity(this, '#destCity{i}')" })*@
        </td>

        <td>
            @*@cities.Where(d => d.CityID == @item.DestinationCityID).FirstOrDefault().City*@
            @item.DestinationCity
            @*@item.DestinationCityID*@
            @*@Html.DropDownListFor(model => model.Shipments[i].DestinationCityID, new SelectList(cities.Where(x => x.CountryID == item.DestinationCountryID), "CityID", "City", item.DestinationCityID), "Select City", htmlAttributes: new { @class = "tbl-control tbl-select", @required = "true", @Value = $"{item.DestinationCityID}", @id = $"destCity{i}" })*@
        </td>


        <td style="width:101px">
            <button onclick="EditShipment('@i')" type="button"><span class="batch-icon batch-icon-pencil"></span></button>
            <button style="margin-left:0 !important" type="button"  
                     onclick="deleteShipment('@i')">
                <span class="batch-icon batch-icon-minus"></span>
            </button><br />
        </td>
    </tr>
    i++;
}

