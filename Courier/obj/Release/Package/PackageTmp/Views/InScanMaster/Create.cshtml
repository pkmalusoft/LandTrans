@model LTMSV2.Models.InScanMasterVM
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}

<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />

<script type="text/javascript">
    //    google.maps.event.addDomListener(window, 'load', function () {
    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
    //        google.maps.event.addListener(places, 'place_changed', function () {
    //            var place = places.getPlace();
    //    var address = place.formatted_address;
    //    var latitude = place.geometry.location.A;
    //    var longitude = place.geometry.location.F;
    //    var mesg = "Address: " + address;
    //    mesg += "\nLatitude: " + latitude;
    //    mesg += "\nLongitude: " + longitude;
    //    alert(mesg);
    //});
    //    });

    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;
    var consignorlocate, consignorcity, consignorcountry;

    var consigneelocate, consigneecity, consigneecountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });

        consignorlocate = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorLocationName'), { types: ['geocode'] });

        consignorlorcity = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorCityName'), { types: ['geocode'] });

        consignorlorcountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorCountryName'), { types: ['geocode'] });


        consigneelocate = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeLocationName'), { types: ['geocode'] });

        consigneecity = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCityName'), { types: ['geocode'] });

        consigneecountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCountryName'), { types: ['geocode'] });


        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        //    autocomplete.addListener('place_changed', fillInAddress);


        //autocompleteCity = new google.maps.places.Autocomplete(
        //    document.getElementById('CityName'), { types: ['geocode'] });

        //autocompleteCountry = new google.maps.places.Autocomplete(
        //    document.getElementById('CountryName'), { types: ['geocode'] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate(fieldtype) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });

                if (fieldtype == 'consignor') {
                    consignorlocate.setBounds(circle.getBounds());
                }
                else if (fieldtype == 'consignee') {
                    consigneelocate.setBounds(circle.getBounds());
                }

            });
        }
    }

    function geoCitylocate(fieldtype) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });

                if (fieldtype == 'consignor') {
                    consignorcity.setBounds(circle.getBounds());
                }
                else if (fieldtype == 'consignee') {
                    consigneecity.setBounds(circle.getBounds());
                }

            });
        }
    }

    function geoCountrylocate(fieldtype) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });

                if (fieldtype == 'consignor') {
                    consignorcountry.setBounds(circle.getBounds());
                }
                else if (fieldtype == 'consignee') {
                    consigneecountry.setBounds(circle.getBounds());
                }

            });
        }
    }
</script>
<script type="text/javascript">
    $(function () {
        $('#PickupRequestDate').datetimepicker({ format: 'DD-MM-YYYY' });
        $('#TransactionDate').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
        
    });

    $(function () {
        $('#PickupDateTime').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    });
    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#HAWBNo").focus();

        $("#CourierCharge").val('0.00');
        $("#PackingCharge").val('0.00');
        $("#OtherCharge").val('0.00');
        $("#CustomCharge").val('0.00');
        $("#totalCharge").val('0.00');

        //$('#InScanDate').datepicker({
        //    dateFormat: 'dd-M-yy',
        //    changeYear: true, changeMonth: true,

        //});


        function CalcTotal() {
            var x = $("#CourierCharge").val();
            var y = $("#PackingCharge").val();
            var z = $("#OtherCharge").val();
            var a = $("#CustomCharge").val();
            var tot = parseFloat(x) + parseFloat(y) + parseFloat(z) + parseFloat(a);

            $("#totalCharge").val(tot.toFixed(2));
        }

        $("#CourierCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#PackingCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#OtherCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#CustomCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });


        $("#CustomerID").change(function () {
            debugger;
            //$("#origincity").empty();
            //$('#origincity').append('<option value="0">Select</option>');

            //$("#originlocation").empty();
            //$('#originlocation').append('<option value="0">Select</option>');
            $.ajax({
                type: "POST",
                url: "/InScanMaster/GetCustomerData",
                datatype: "Json",
                data: { id: $('#CustomerID').val() },
                success: function (data) {
                    //$("#custcode").val(data.CustCode);
                    $("#Consignor").val(data.CustName);
                    $("#ConsignorContact").val(data.ContactPerson);
                    $("#ConsignerCountryName").val(data.CountryID);
                    $("#ConsignorCityName").val(data.CityName);
                    $("#ConsignorLocationName").val(data.CityName);
                    $("#ConsignorAddress1_Building").val(data.Address1);
                    $("#ConsignorAddress2_Street").val(data.Address2);
                    $("#ConsignorAddress3_Pincode").val(data.Address3);
                    $("#ConsignorPhone").val(data.Phone);

                    //BindCity(data.CityID, data.LocationID);
                }
            });

        });
             
    
        $("#btnsave").click(function () {

            $.ajax({
                type: "POST",
                url: "/QuickAWB/GetAWB",
                datatype: "Json",
                data: { id: $("#HAWBNo").val() },
                success: function (data) {
                    if (data.Exist == 0) {
                        $("#IsAvailable").val(0);
                    }
                    else {
                        $("#IsAvailable").val(1);
                    }

                }
            });



            var hawb = $("#HAWBNo").val();
            var customerid = $("#customerid option:selected").val();
            var shipper = $("#shipper").val();
            var shippercontact = $("#shippercontact").val();
            var consignorphone = $("#ConsignorPhone").val();
            var shipperaddress = $("#shipperaddress").val();
            var origincountry = $("#origincountry option:selected").val();
            var origincity = $("#origincity option:selected").val();
            var orilocation = $("#orilocation").val();
            consignee = $("#consignee").val();
            consigneecontact = $("#consigneecontact").val();
            ConsigneePhone = $("#ConsigneePhone").val();
            Consigneeaddress = $("#Consigneeaddress").val();

            destinationCountry = $("#destinationCountry option:selected").val();

            destinationCity = $("#destinationCity option:selected").val();

            destlocation = $("#destlocation").val();

            Description = $("#Description").val();

            Pieces = $("#Pieces").val();

            Weight = $("#Weight").val();





            if (hawb == "") {
                $("#validations").show();
                return false;

            }
            else if ($("#IsAvailable").val() == 1) {
                alert("AWB Already Exist..!");
                return false;
            }
            else if (customerid == "") {
                $("#validations").show();
                return false;
            }
            else if (shipper == "") {
                $("#validations").show();
                return false;
            }
            else if (shippercontact == "") {
                $("#validations").show();
                return false;
            }
            else if (consignorphone == "") {
                $("#validations").show();
                return false;
            }
            else if (shipperaddress == "") {
                $("#validations").show();
                return false;
            }
            else if (origincountry == "") {
                $("#validations").show();
                return false;
            }
            else if (origincity == "") {
                $("#validations").show();
                return false;
            }
            else if (orilocation == "") {
                $("#validations").show();
                return false;
            }
            else if ($("#paymentmode option:selected").val() == "") {
                $("#validations").show();
                return false;
            }
            else if (consignee == "") {
                $("#validations").show();
                return false;
            }
            else if (consigneecontact == "") {
                $("#validations").show();
                return false;
            }
            else if (ConsigneePhone == "") {
                $("#validations").show();
                return false;
            }
            else if (Consigneeaddress == "") {
                $("#validations").show();
                return false;
            }
            else if (destinationCountry == "") {
                $("#validations").show();
                return false;
            }
            else if (destinationCity == "") {
                $("#validations").show();
                return false;
            }
            else if (destlocation == "") {
                $("#validations").show();
                return false;
            }
            else if (Description == "") {
                $("#validations").show();
                return false;
            }
            else if (Pieces == "") {
                $("#validations").show();
                return false;
            }
            else if (Weight == "") {
                $("#validations").show();
                return false;
            }
            else if ($("#CourierCharge").val() == "") {
                $("#validations").show();
                return false;
            }
            else if ($("PackingCharge").val() == "") {
                $("#validations").show();
                return false;
            }
            else {
                return true;
            }
        });

        $("#HAWBNo").blur(function () {
            $.ajax({
                type: "POST",
                url: "/QuickAWB/GetPickUpData",
                datatype: "Json",
                data: { id: $('#AWBNo').val() },
                success: function (data) {

                    if (data.Exist == 1) {
                        $("#customerid").val(data.CustomerID);
                        $("#shipper").val(data.shipper);
                        $("#shippercontact").val(data.contactperson);
                        $("#shipperaddres").val(data.shipperaddress);
                        $("#ConsignorPhone").val(data.shipperphone);
                        $("#origincountry").val(data.shippercountry);
                        $("#orilocation").val(data.shipperlocation);
                        $("#Weight").val(data.weight);
                        BindCity(data.shippercity, data.LocationID);


                        $("#consignee").val(data.consignee);
                        $("#consigneecontact").val(data.consigneecontact);
                        $("#Consigneeaddress").val(data.consigneeaddress);
                        $("#ConsigneePhone").val(data.consigneephone);
                        $("#destinationCountry").val(data.consigneecountry);
                        $("#destlocation").val(data.consigneelocation);

                        BindConsigneeCity(data.consigneecity);

                    }


                }
            });
        });



        $("#EnquiryNo").blur(function () {
            $("#origincity").empty();
            $('#origincity').append('<option value="0">Select</option>');

            $("#originlocation").empty();
            $('#originlocation').append('<option value="0">Select</option>');

            $.ajax({
                type: "POST",
                url: "/QuickAWB/GetCustomerDataByNO",
                datatype: "Json",
                data: { id: $('#EnquiryNo').val() },
                success: function (data) {
                    if (data.Exist == 1) {
                        $("#customerid").val(data.CustomerID);
                        $("#Weight").val(data.Weight);
                        $("#destinationCountry").val(data.ConsignerCountryId);
                        $("#origincountry").val(data.ConsigneeCountryID);
                        $("#origincity").val(data.ConsignerCityId);
                        $("#CourierType").val(data.DescriptionID);
                        $("#consignee").val(data.Consignee);
                        $("#Consignor").val(data.shipper);
                        $("#Consigneeaddress").val(data.ConsigneeAddress);
                        $("#shipperaddres").val(data.ConsignorAddress);
                        $("#ConsigneePhone").val(data.ConsigneePhone);
                        $("#ConsignorPhone").val(data.ConsignorPhone);
                        $("#consigneecontact").val(data.ConsigneeContact);
                        $("#ConsignorContact").val(data.shippercontact);
                        $("#originlocation").val(data.ConsignorLocationName);
                        $("#destinationLocation").val(data.ConsigneeLocationName);


                        BindCity(data.CityID);




                    }
                    else {
                        alert("Data Not Found");
                    }
                }

            });
        });

    });
</script>

<section class="content-header">
    <h1 class="headingfont">InScan Master Entry</h1>

</section>




<section class="content">

    @using (Html.BeginForm())
    {

        <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <input type="hidden" id="IsAvailable" value="0" />


        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">
                <h3 style="color:white">PickUp Request</h3><hr />
            </div>

        </div>
        <div class="row no-margin">
            <div class="col-md-3">
                @Html.HiddenFor(model => model.BranchID)
                @Html.HiddenFor(model => model.AcCompanyID)
                @Html.HiddenFor(model => model.UserID)
                @Html.HiddenFor(model => model.DepotID)
                <label class="headinglabel required">Airway Bill No.</label>
                @Html.TextBoxFor(model => model.AWBNo, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Transaction Date</label>
                @Html.TextBoxFor(model => model.TransactionDate, new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">PickUp Request Date</label>
                @Html.TextBoxFor(model => model.PickupRequestDate, new { @class = "form-control" })
            </div>
            @*<div class="col-md-3">
                    <label class="headinglabel">Collected By</label>
                    @Html.DropDownListFor(model => model.CollectedBy, new SelectList(@ViewBag.employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
                </div>*@

            @*<div class="col-md-2">
                    <label class="headinglabel required">Device</label>
                    @Html.TextBoxFor(model => model.DeviceID, new { @class = "form-control" })
                </div>*@

        </div>


        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">
                <h3 style="color:white">Consignor Details</h3><hr />
            </div>
        </div>

        <div class="row no-margin">

            @*<div class="col-md-3">
                    <label class="headinglabel required">Custmor Enquiry No.</label>
                    @Html.TextBoxFor(model => model.EnquiryNo, new { @class = "form-control" })
                </div>*@

            <div class="col-md-3">
                <label class="headinglabel">Customer</label>
                @Html.DropDownListFor(model => model.CustomerID, new SelectList(@ViewBag.Customer, "CustomerID", "CustomerName"), "Select", new { @class = "form-control" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Consignor</label>
                @Html.TextBoxFor(model => model.Consignor, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Contact Person</label>
                @Html.TextBoxFor(model => model.ConsignorContact, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Telephone</label>
                @Html.TextBoxFor(model => model.ConsignorPhone, new { @class = "form-control textright" })
            </div>
        </div>

        <div class="row no-margin" style="padding-top: 10px">


            <div class="col-md-3">
                <label class="headinglabel required">Building No.</label>
                @Html.TextBoxFor(model => model.ConsignorAddress1_Building, new { @class = "form-control txttarget" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Street</label>
                @Html.TextBoxFor(model => model.ConsignorAddress2_Street, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">PinCode</label>
                @Html.TextBoxFor(model => model.ConsignorAddress2_Pincode, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Origin Country</label>
                @Html.TextBoxFor(model => model.ConsignorCountryName, new { @class = "form-control", id = "ConsignorCountryName", @onFocus = "geoCountrylocate('consignor')" })
            </div>

        </div>

        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-3">
                <label class="headinglabel required">Origin City</label>
                @Html.TextBoxFor(model => model.ConsignorCityName, new { @class = "form-control", id = "ConsignorCityName", @onFocus = "geoCitylocate('consignor')" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Origin Location</label>
                @Html.TextBoxFor(model => model.ConsignorLocationName, new { @class = "form-control", id = "ConsignorLocationName", @onFocus = "geolocate('consignor')" })
            </div>

        </div>

        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">
                <h3 style="color:white">Consignee Details</h3><hr />
            </div>

        </div>


        <div class="row no-margin" style="padding-top: 10px">
            @*<div class="col-md-3">
                    <label class="headinglabel required">Payment Mode</label>
                    @Html.DropDownList("paymentmode", new List<SelectListItem>
                       {
                           new SelectListItem{ Text="Pickup Cash", Value = "PKP" },
                           new SelectListItem{ Text="COD", Value = "COD" },
                           new SelectListItem{ Text="ACC", Value = "Account" },


                     }, "Select", new { @class = "form-control" })
                </div>*@

            <div class="col-md-3">
                <label class="headinglabel required">Consignee</label>
                @Html.TextBoxFor(model => model.Consignee, new { @class = "form-control txttarget" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Contact Person</label>
                @Html.TextBoxFor(model => model.ConsigneeContact, new { @class = "form-control txttarget" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Telephone No</label>
                @Html.TextBoxFor(model => model.ConsigneePhone, new { @class = "form-control textright" })
            </div>


            <div class="col-md-3">
                <label class="headinglabel required">Building</label>
                @Html.TextBoxFor(model => model.ConsignorAddress1_Building, new { @class = "form-control txttarget" })
            </div>

        </div>

        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-3">
                <label class="headinglabel required">Street</label>
                @Html.TextBoxFor(model => model.ConsigneeAddress2_Street, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">PinCode</label>
                @Html.TextBoxFor(model => model.ConsigneeAddress3_PinCode, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Destination Country</label>
                @Html.TextBoxFor(model => model.ConsigneeCountryName, new { @class = "form-control", id = "ConsigneeCountryName", @onFocus = "geoCountrylocate('consignee')" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Destination City</label>
                @Html.TextBoxFor(model => model.ConsigneeCityName, new { @class = "form-control", id = "ConsigneeCityName", @onFocus = "geoCitylocate('consignee')" })
            </div>


            <div class="col-md-3">
                <label class="headinglabel required">Destination Location</label>
                @Html.TextBoxFor(model => model.ConsigneeLocationName, new { @class = "form-control", id = "ConsigneeLocationName", @onFocus = "geolocate('consignee')" })
            </div>
        </div>

        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">
                <h3 style="color:white">Shipment Details</h3><hr />
            </div>

        </div>


        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-2">
                <label class="headinglabel required">Pieces</label>
                @Html.TextBoxFor(model => model.Pieces, new { @class = "form-control textright" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel required">Weight</label>
                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control textright" })
            </div>

            <div class="col-md-1">
                <label class="headinglabel required">Length</label>
                @Html.TextBoxFor(model => model.CBM_length, new { @class = "form-control textright" })
            </div>
            <div class="col-md-1">
                <label class="headinglabel required">Width</label>
                @Html.TextBoxFor(model => model.CBM_width, new { @class = "form-control textright" })
            </div>
            <div class="col-md-1">
                <label class="headinglabel required">Height</label>
                @Html.TextBoxFor(model => model.CBM_height, new { @class = "form-control textright" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel required">Volumn Weight</label>
                @Html.TextBoxFor(model => model.CBM, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Description</label>
                @Html.TextBoxFor(model => model.CargoDescription, new { @class = "form-control txttarget" })
            </div>



        </div>

        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-2">
                <label class="headinglabel required">Bag No.</label>
                @Html.TextBoxFor(model => model.BagNo, new { @class = "form-control textright" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel required">Pallet No</label>
                @Html.TextBoxFor(model => model.PalletNo, new { @class = "form-control textright" })
            </div>

            <div class="col-md-2">
                <label class="headinglabel required">Handling Instruction</label>
                @Html.TextBoxFor(model => model.HandlingInstruction, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">SpecialInstructionsh</label>
                @Html.TextBoxFor(model => model.SpecialInstructions, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Type of Goods</label>
                @Html.DropDownListFor(model => model.TypeOfGoodID, new SelectList(@ViewBag.TypeofGoods, "TypeOfGoodID", "TypeOfGood1"), "Select", new { @class = "form-control" })
            </div>           


        </div>

        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-12">
                <h3 style="color:white">Shipment Type</h3><hr />
            </div>

        </div>


        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-3">
                <label class="headinglabel required">Courier Movement Type</label>
                @Html.DropDownListFor(model => model.MovementID, new SelectList(@ViewBag.Movement, "MovementID", "MovementType"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Parcel Type</label>
                @Html.DropDownListFor(model => model.ParcelTypeID, new SelectList(@ViewBag.parceltype, "ID", "ParcelType1"), "Select", new { @class = "form-control" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Product Type</label>
                @Html.DropDownListFor(model => model.ProductTypeID, new SelectList(@ViewBag.ProductType, "ProductTypeID", "ProductName"), "Select", new { @class = "form-control" })
            </div>
        </div>
        <div class="row no-margin" style="padding-top: 10px">

            <h3 style="color:white">Rates And Charges</h3><hr />

        </div>

        <div class="row no-margin" style="padding-top: 10px">


            <div class="col-md-3">
                <label class="headinglabel required">Customer Rate</label>
                @Html.DropDownListFor(model => model.CustomerRateID, new SelectList(@ViewBag.customerrate, "CustomerRateTypeID", "CustomerRateType1"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Courier Charge</label>
                @Html.TextBoxFor(model => model.CourierCharge, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Packing Charge</label>
                @Html.TextBoxFor(model => model.PackingCharge, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Customs Charge/Value</label>
                @Html.TextBoxFor(model => model.CustomsValue, new { @class = "form-control textright" })
            </div>



        </div>

        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-3">
                <label class="headinglabel">Other Charge</label>
                @Html.TextBoxFor(model => model.OtherCharge, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Total</label>
                @Html.TextBoxFor(model => model.TotalCharge, new { @class = "form-control textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Material Cost</label>
                @Html.TextBoxFor(model => model.MaterialCost, new { @class = "form-control txtright textright" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Remarks</label>
                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control txttarget" })
            </div>








        </div>
        <div class="row no-margin" style="padding-top: 10px">

            <h3 style="color:white">Employee Details</h3><hr />

        </div>


        <div class="row no-margin" style="padding-top:10px">
            <div class="col-md-3">
                <label class="headinglabel">Picked up By</label>
                @Html.DropDownListFor(model => model.PickupBy, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Pickup Time</label>
                @Html.TextBoxFor(model => model.PickupDateTime, new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Depot Received By</label>
                @Html.DropDownListFor(model => model.ReceivedByID, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
            </div>
            @*<div class="col-md-3">
                    <label class="headinglabel">Depot Received By</label>
                    @Html.DropDownListFor(model => model.ReceivedByID, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
                </div>*@

        </div>


        <div class="row no-margin" style="padding-top: 10px">

            <h3 style="color:white">Forward Agent Details</h3><hr />

        </div>

        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-3">
                <label class="headinglabel">Forwarding Agent</label>
                @Html.TextBoxFor(model => model.FAgent, new { @class = "form-control" })
                @*@Html.DropDownListFor(model => model.FAgent, new SelectList(@ViewBag.FAgent, "FAgentID", "FAgentName"), "Select", new { @class = "form-control" })*@
            </div>


            <div class="col-md-3">
                <label class="headinglabel">Forwarding AWB</label>
                @Html.TextBoxFor(model => model.FAWBNo, new { @class = "form-control" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Forwarding Charge</label>
                @Html.TextBoxFor(model => model.FAgentCharges, new { @class = "form-control textright" })
            </div>
        </div>
        @*        <div class="col-md-3" style="padding-top:25px">

            <input type="button" value="Add" id="btnAddFAgent" class="btn btn-primary" />
               </div>*@

        @*</div>
            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-12">
                    <table class="table table=bordered table-responsive">
                        <thead>
                            <tr>
                                <th>ID</th>
                                 <th>Forwarding Agent Name</th>
                                 <th>Forwarding Agent AWB</th>
                                 <th>Forwarding Agent Charge</th>
                            </tr>
                        </thead>
                    </table>
                </div>
                </div>*@
        <div class="row no-margin" style="padding-top: 10px;">
            <div class="col-md-12">

                <input type="submit" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;<a href='@Url.Action("Index", "QuickAWB", new { id = 0 })' class="btn btn-primary btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


            </div>
        </div>

    }



</section>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>