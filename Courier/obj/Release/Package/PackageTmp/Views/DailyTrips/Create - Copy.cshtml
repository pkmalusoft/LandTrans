@model LTMSV2.Models.TruckDetail
@{
    /**/

    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _mindate = @LTMSV2.Models.CommanFunctions.GetMinFinancialDate(); //'2020/01/01',
    var _maxdate = @LTMSV2.Models.CommanFunctions.GetMaxFinancialDate();
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.2/jquery.validate.min.js"></script>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>*@

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        .error {
            color: red;
        }

        * {
            box-sizing: border-box
        }

        /* Set height of body and the document to 100% */
        body, html {
            height: 100%;
            margin: 0;
        }

        /* Style tab links */
        .tablink {
            background-color: #555;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            font-size: 17px;
            width: 25%;
        }

            .tablink:hover {
                background-color: #777;
            }

        /* Style the tab content (and add height:100% for full page content) */
        .tabcontent {
            display: none;
            padding: 100px 20px;
            height: 100%;
        }
        .tablink {
            color:white;
        }
    </style>

</head>

<body>

    <button class="tablink" onclick="openPage('Hire', this, '#07a7e3')" id="defaultOpen_H">Hired Vehicle</button>
    <button class="tablink" onclick="openPage('Own', this, '#07a7e3')" id="defaultOpen_O">Own Vehicle</button>
    <button class="tablink" onclick="openPage('Contract', this, '#07a7e3')" id="defaultOpen_C">Contract Vehicle</button>
    <button class="tablink" onclick="openPage('Forwarding', this, '#07a7e3')" id="defaultOpen_F">Forwarding Agent</button>

    <div id="Hire" class="tabcontent">
        @*@Html.Partial("_hiredVehicle");*@
        <section class="content">

            <form id="FormHired">
                <div id="validations" style="color: red; margin-left: 7px; display: none">* Please fill mandatory fields</div>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })




                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Hired Vehicle</h3>
                        <hr />
                    </div>

                </div>



                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        @Html.HiddenFor(model => model.TruckDetailID)
                        <input type="hidden" id="VehicleType" name="VehicleType" value="H" />
                        <label class="headinglabel required">Date</label>
                        @Html.TextBoxFor(model => model.TDDate, new { @class = "form-control datepicker", @required = "true" })


                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Driver</label>
                        @Html.TextBoxFor(model => model.DriverName, new { @class = "form-control", @required = "true" })
                        @Html.HiddenFor(model => model.DriverID)

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Registration Number</label>
                        @Html.DropDownListFor(model => model.VehicleID, new SelectList(ViewBag.Vehicles, "VehicleId", "RegistrationNo"), "Select", new { @class = "form-control" })

                        @*@Html.TextBoxFor(model => model.RegNo, new { @class = "form-control", @required = "true" })*@



                    </div>



                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Route</label>
                        @Html.DropDownListFor(model => model.RouteID, new SelectList(@ViewBag.Routes, "RouteID", "RouteName"), "Select", new { @class = "form-control" })

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Originating Location</label>
                        @Html.TextBoxFor(model => model.OriginName, new { @class = "form-control", id = "autocomplete", name = "HOriginName", @onFocus = "geolocate(1)", @required = "true" })

                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Destination Location</label>
                        @Html.TextBoxFor(model => model.DestinationName, new { @class = "form-control", id = "autocomplete1", name = "HDestinationName", @onFocus = "geolocate(2)", @required = "true" })


                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Type of Load</label>
                        <select class="form-control" id="TypeOfLoad" name="TypeOfLoad" required>
                            <option value="Consolidated Truck">Consolidated Truck</option>
                            <option value="Full Truck">Full Truck</option>
                        </select>
                        @*@Html.TextBoxFor(model => model.TypeOfLoad, new { @class = "form-control", @required = "true" })*@
                    </div>



                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Rent </label>

                        @Html.TextBoxFor(model => model.Rent, new { @class = "form-control", @required = "true" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Currency</label>
                        @Html.DropDownListFor(model => model.CurrencyIDRent, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control", @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Other Charges</label>

                        @Html.TextBoxFor(model => model.OtherCharges, new { @class = "form-control" })
                    </div>

                    @*<div class="col-md-3 form-group">
                            <label class="headinglabel required">Currency</label>

                            @Html.DropDownListFor(model => model.CurrencyRent, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })
                        </div>*@

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Account Head</label>
                        <input type="text" id="RentAcHead" name="RentAcHead" class="form-control" required />
                        @Html.HiddenFor(model => model.RentAcHeadID)

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Remark</label>

                        @Html.TextAreaFor(model => model.TDRemarks, new { @class = "form-control" })
                    </div>

                </div>
                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Payment Details</h3>
                        <hr />
                    </div>

                </div>
                <div class="row no-margin">


                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Payment Type</label>
                        <select class="form-control" id="StatusPaymentMode" name="StatusPaymentMode">
                            <option value="C">Cash</option>
                            <option value="B">Bank</option>
                        </select>
                        @*@Html.TextBoxFor(model => model.StatusPaymentMode, new { @class = "form-control", @maxlength = "2" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Account Head (Cr)</label>
                        <input type="text" class="form-control" id="PaymentHead" name="PaymentHead" required />
                        @Html.HiddenFor(model => model.PaymentHeadID)

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Control A/c (Dr)</label>
                        <input type="text" class="form-control" id="TDcontrolAcHead" name="TDcontrolAcHead" required />
                        @Html.HiddenFor(model => model.TDcontrolAcHeadID)

                        @*@Html.DropDownListFor(model => model.TDcontrolAcHeadID, new SelectList(@ViewBag.Achead, "AcHeadID", "AcHead1"), "Select", new { @class = "form-control" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Amount</label>

                        @Html.TextBoxFor(model => model.CurrencyAmount, new { @class = "form-control" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Currency</label>
                        @Html.DropDownListFor(model => model.PaymentCurrencyID, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Payment Remark</label>

                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                    </div>

                </div>





                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-12 btn-right">

                        <input type="button" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;
                        <a href='@Url.Action("Index", "DailyTrips")' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                    </div>
                </div>



            </form>

        </section>
    </div>

    <div id="Own" class="tabcontent">
        <section class="content">

            <form id="FormOwn">
                <div id="validations" style="color: red; margin-left: 7px; display: none">* Please fill mandatory fields</div>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })




                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Own Vehicle</h3>
                        <hr />
                    </div>

                </div>



                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        @Html.HiddenFor(model => model.TruckDetailID)
                        <input type="hidden" id="VehicleType" name="VehicleType" value="O" />
                        <label class="headinglabel required">Date</label>
                        @Html.TextBoxFor(model => model.TDDate, new { @class = "form-control datepicker", id = "OTDDate", @required = "true" })


                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Driver</label>
                        @Html.TextBoxFor(model => model.DriverName, new { @class = "form-control", id = "ODriverName", @required = "true" })
                        @Html.HiddenFor(model => model.DriverID, new { id = "ODriverID" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Registration Number</label>
                        @Html.DropDownListFor(model => model.VehicleID, new SelectList(ViewBag.Vehicles, "VehicleId", "RegistrationNo"), "Select", new { @class = "form-control" })

                        @*@Html.DropDownListFor(model => model.RegNo, new SelectList(ViewBag.Vehicles, "RegistrationNo", "RegistrationNo"), "Select", new { @class = "form-control" })*@

                        @*@Html.TextBoxFor(model => model.RegNo, new { @class = "form-control", @required = "true" })*@



                    </div>



                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Route</label>
                        @Html.DropDownListFor(model => model.RouteID, new SelectList(@ViewBag.Routes, "RouteID", "RouteName"), "Select", new { @class = "form-control" })

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Originating Location</label>
                        @Html.TextBoxFor(model => model.OriginName, new { @class = "form-control", id = "Oautocomplete", @onFocus = "Ogeolocate(1)", @required = "true" })

                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Destination Location</label>
                        @Html.TextBoxFor(model => model.DestinationName, new { @class = "form-control", id = "Dautocomplete1", @onFocus = "Ogeolocate(2)", @required = "true" })


                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Type of Load</label>
                        <select class="form-control" id="TypeOfLoad" name="TypeOfLoad" required>
                            <option value="Consolidated Truck">Consolidated Truck</option>
                            <option value="Full Truck">Full Truck</option>
                        </select>
                        @*@Html.TextBoxFor(model => model.TypeOfLoad, new { @class = "form-control", @required = "true" })*@
                    </div>



                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Rent </label>

                        @Html.TextBoxFor(model => model.Rent, new { @class = "form-control", @required = "true" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Currency</label>
                        @Html.DropDownListFor(model => model.CurrencyIDRent, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control", @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Other Charges</label>

                        @Html.TextBoxFor(model => model.OtherCharges, new { @class = "form-control" })
                    </div>

                    @*<div class="col-md-3 form-group">
                            <label class="headinglabel required">Currency</label>

                            @Html.DropDownListFor(model => model.CurrencyRent, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })
                        </div>*@

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Account Head</label>
                        <input type="text" id="ORentAcHead" name="ORentAcHead" class="form-control" required />
                        @Html.HiddenFor(model => model.RentAcHeadID, new { id = "ORentAcHeadID" })

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Remark</label>

                        @Html.TextAreaFor(model => model.TDRemarks, new { @class = "form-control" })
                    </div>

                </div>
                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Payment Details</h3>
                        <hr />
                    </div>

                </div>
                <div class="row no-margin">


                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Payment Type</label>
                        <select class="form-control" id="StatusPaymentMode" name="StatusPaymentMode">
                            <option value="C">Cash</option>
                            <option value="B">Bank</option>
                        </select>

                        @*@Html.TextBoxFor(model => model.StatusPaymentMode, new { @class = "form-control",@maxlength="2" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Account Head (Cr)</label>
                        <input type="text" class="form-control" id="OPaymentHead" name="PaymentHead" required />
                        @Html.HiddenFor(model => model.PaymentHeadID, new { id = "OPaymentHeadID" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Control A/c (Dr)</label>
                        <input type="text" class="form-control" id="OTDcontrolAcHead" name="TDcontrolAcHead" required />
                        @Html.HiddenFor(model => model.TDcontrolAcHeadID, new { id = "OTDcontrolAcHeadID" })

                        @*@Html.DropDownListFor(model => model.TDcontrolAcHeadID, new SelectList(@ViewBag.Achead, "AcHeadID", "AcHead1"), "Select", new { @class = "form-control" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Amount</label>

                        @Html.TextBoxFor(model => model.CurrencyAmount, new { @class = "form-control" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Currency</label>
                        @Html.DropDownListFor(model => model.PaymentCurrencyID, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Payment Remark</label>

                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                    </div>

                </div>





                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-12 btn-right">

                        <input type="button" value="Save" class="btn btn-primary btnwidth" id="btnsave1" />&nbsp;&nbsp;
                        <a href='@Url.Action("Index", "DailyTrips")' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                    </div>
                </div>



            </form>

        </section>
        @*@Html.Partial("_ownVehicle");*@
    </div>

    <div id="Contract" class="tabcontent">
        <section class="content">

            <form id="FormContract">
                <div id="validations" style="color: red; margin-left: 7px; display: none">* Please fill mandatory fields</div>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })




                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Contract Vehicle</h3>
                        <hr />
                    </div>

                </div>



                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Receipt No.</label>
                        @Html.TextBoxFor(model => model.ReceiptNo, new { @class = "form-control", @required = "true" })


                    </div>
                    <div class="col-md-3 form-group">
                        @Html.HiddenFor(model => model.TruckDetailID)
                        <input type="hidden" id="VehicleType" name="VehicleType" value="C" />
                        <label class="headinglabel required">Date</label>
                        @Html.TextBoxFor(model => model.TDDate, new { @class = "form-control datepicker", id = "CTDDate", @required = "true" })


                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Driver</label>
                        @Html.TextBoxFor(model => model.DriverName, new { @class = "form-control", id = "CDriverName", @required = "true" })
                        @Html.HiddenFor(model => model.DriverID, new { id = "CDriverID" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Registration Number</label>
                        @Html.DropDownListFor(model => model.VehicleID, new SelectList(ViewBag.Vehicles, "VehicleId", "RegistrationNo"), "Select", new { @class = "form-control" })

                        @*@Html.DropDownListFor(model => model.RegNo, new SelectList(ViewBag.Vehicles, "RegistrationNo", "RegistrationNo"), "Select", new { @class = "form-control" })*@

                        @*@Html.TextBoxFor(model => model.RegNo, new { @class = "form-control", @required = "true" })*@



                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Origin Country</label>
                        @*@Html.DropDownListFor(model => model.OriginCountry, new SelectList(ViewBag.Countries, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                        @Html.TextBoxFor(model => model.OriginCountry, new { @class = "form-control", id = "COriginCountry",  @required = "true" })

                    </div>


                   
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Origin</label>
                        @Html.TextBoxFor(model => model.OriginName, new { @class = "form-control", id = "Cautocomplete", @onFocus = "Cgeolocate(1)", @required = "true" })

                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Destination</label>
                        @Html.TextBoxFor(model => model.DestinationName, new { @class = "form-control", id = "Cautocomplete1", @onFocus = "Cgeolocate(2)", @required = "true" })


                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Vehicle Type</label>
                        @*<select class="form-control" id="VehicleTypeID" name="VehicleTypeID" required>
                            <option value="Consolidated Truck">Consolidated Truck</option>
                            <option value="Full Truck">Full Truck</option>
                        </select>*@
                        @Html.DropDownListFor(model => model.VehicleTypeID, new SelectList(ViewBag.VehicleTypes, "VehicleTypeID", "VehicleType1"), "Select", new { @class = "form-control" })

                        @*@Html.TextBoxFor(model => model.TypeOfLoad, new { @class = "form-control", @required = "true" })*@
                    </div>



                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Documents Made </label>
                        @Html.DropDownListFor(model => model.DocumentID, new SelectList(ViewBag.Documents, "DocumentSetupID", "DocumentName"), "Select", new { @class = "form-control" })

                    </div>

                    
                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Code</label>

                        @Html.TextBoxFor(model => model.Code, new { @class = "form-control" })
                    </div>

                   

                </div>
                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Payment Details</h3>
                        <hr />
                    </div>

                </div>
                <div class="row no-margin">


                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Payment Type</label>
                        <select class="form-control" id="StatusPaymentMode" name="StatusPaymentMode">
                            <option value="C">Cash</option>
                            <option value="B">Bank</option>
                        </select>

                        @*@Html.TextBoxFor(model => model.StatusPaymentMode, new { @class = "form-control",@maxlength="2" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Account Head (Cr)</label>
                        <input type="text" class="form-control" id="CPaymentHead" name="PaymentHead" required />
                        @Html.HiddenFor(model => model.PaymentHeadID, new { id = "CPaymentHeadID" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Control A/c (Dr)</label>
                        <input type="text" class="form-control" id="CTDcontrolAcHead" name="TDcontrolAcHead" required />
                        @Html.HiddenFor(model => model.TDcontrolAcHeadID, new { id = "CTDcontrolAcHeadID" })

                        @*@Html.DropDownListFor(model => model.TDcontrolAcHeadID, new SelectList(@ViewBag.Achead, "AcHeadID", "AcHead1"), "Select", new { @class = "form-control" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Amount</label>

                        @Html.TextBoxFor(model => model.CurrencyAmount, new { @class = "form-control" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Currency</label>
                        @Html.DropDownListFor(model => model.PaymentCurrencyID, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Payment Remark</label>

                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                    </div>

                </div>





                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-12 btn-right">

                        <input type="button" value="Save" class="btn btn-primary btnwidth" id="btnsaveContract" />&nbsp;&nbsp;
                        <a href='@Url.Action("Index", "DailyTrips")' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                    </div>
                </div>



            </form>

        </section>
        @*@Html.Partial("_contractVehicle");*@
    </div>

    <div id="Forwarding" class="tabcontent">
        <section class="content">

            <form id="FormFwd">
                <div id="validations" style="color: red; margin-left: 7px; display: none">* Please fill mandatory fields</div>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })




                <div class="row no-margin">
                    <div class="col-md-12">
                        <h3 style="color: white">Forwarding Agent</h3>
                        <hr />
                    </div>

                </div>



                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        @Html.HiddenFor(model => model.TruckDetailID)
                        <input type="hidden" id="VehicleType" name="VehicleType" value="F" />
                        <label class="headinglabel required">Date</label>
                        @Html.TextBoxFor(model => model.TDDate, new { @class = "form-control datepicker", id = "FTDDate", @required = "true" })


                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Phone Number </label>

                        @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", @required = "true" })
                    </div>


                    <div class="col-md-3 form-group ">
                        <label class="headinglabel required">Forwarding Agent</label>
                        @Html.DropDownListFor(model => model.ForwardAgentID, new SelectList(@ViewBag.FwdAgents, "FAgentID", "FAgentName"), "Select", new { @class = "form-control", @required = "true" })

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Route</label>
                        @Html.DropDownListFor(model => model.RouteID, new SelectList(@ViewBag.Routes, "RouteID", "RouteName"), "Select", new { @class = "form-control", @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Origin Country</label>
                        @Html.TextBoxFor(model => model.OriginCountry, new { @class = "form-control", id = "FOriginCountry", @required = "true" })

                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Origin City</label>
                        @Html.TextBoxFor(model => model.OriginCity, new { @class = "form-control",id="FOriginCity",  @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Origin Location</label>
                        @*@Html.TextBoxFor(model => model.OriginName, new { @class = "form-control", @required = "true" })*@
                        @Html.TextBoxFor(model => model.OriginName, new { @class = "form-control", id = "Fautocomplete", @onFocus = "Fgeolocate(1)", @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Account Head</label>
                        <input type="text" id="FRentAcHead" name="FRentAcHead" class="form-control" />
                        @Html.HiddenFor(model => model.RentAcHeadID, new { id = "FRentAcHeadID" })

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Remark</label>

                        @Html.TextAreaFor(model => model.TDRemarks, new { @class = "form-control" })
                    </div>

                </div>



                <div class="row no-margin" style="padding-top: 10px">

                    <div class="col-md-12 btn-right">

                        <input type="button" value="Save" class="btn btn-primary btnwidth" id="btnsaveFwd" />&nbsp;&nbsp;
                        <a href='@Url.Action("Index", "DailyTrips")' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                    </div>
                </div>



            </form>

        </section>
        @*@Html.Partial("_forwardingAgent");*@
    </div>

</body>
</html>

<script type="text/javascript">
    $(document).ready(function () {
        if ('@Model.TruckDetailID' > 0) {


            $(".tablink").prop('disabled',true);
            $("#RegNo").val('@Model.RegNo');
            $("#RouteID").val('@Model.RouteID');
            $("#TypeOfLoad").val('@Model.TypeOfLoad');
            $("#CurrencyIDRent").val('@Model.CurrencyIDRent');
            //$("#CurrencyRent").val('@Model.CurrencyRent');
         $("#PaymentCurrencyID").val('@Model.PaymentCurrencyID');
         $("#StatusPaymentMode").val('@Model.StatusPaymentMode'.trim());
            $("#OriginCity").val('@Model.OriginCity'.trim());
            $("#OriginCountry").val('@Model.OriginCountry'.trim());
            $("#PhoneNumber").val('@Model.PhoneNumber');
            @*$("#ForwardAgentID").val('@Model.ForwardAgentID');
            $("#RouteID").val('@Model.RouteID');*@

            $("#RouteID").change(function () {
                debugger;

               $.ajax({
                type: "Get",
                url: "/DailyTrips/GetRouteDetail",
                datatype: "Json",
                   data: { 'RouteId': $('#RouteID').val() },
                success: function (response) {
                    $("#OriginName").val(response.Origin);
                    $("#DestinationName").val(response.Destination);
                }
            });
              

            });

         if ('@Model.VehicleType' == 'O') {
             $.ajax({
                 type: "POST",
                 url: "/DailyTrips/GetAcHeadsById",
                 datatype: "Json",
                 data: { acheadid: '@Model.RentAcHeadID', paymentheadid: '@Model.PaymentHeadID', ControlAc: '@Model.TDcontrolAcHeadID' },
                 success: function (data) {
                     $("#ORentAcHead").val(data.Achead);
                     $("#OPaymentHead").val(data.PaymentAc);
                     $("#OTDcontrolAcHead").val(data.controlac);
                 }
             });
             $.ajax({
                 type: "POST",
                 url: "/DailyTrips/GetDriverById",
                 datatype: "Json",
                 data: { DriverId: '@Model.DriverID' },
                 success: function (data) {
                     $("#ODriverName").val(data.Driver);

                 }
             });
         } else if('@Model.VehicleType' == 'H'){
                  $.ajax({
                type: "POST",
                url: "/DailyTrips/GetAcHeadsById",
                datatype: "Json",
                data: { acheadid: '@Model.RentAcHeadID', paymentheadid: '@Model.PaymentHeadID', ControlAc: '@Model.TDcontrolAcHeadID' },
                success: function (data) {
                    $("#RentAcHead").val(data.Achead);
                    $("#PaymentHead").val(data.PaymentAc);
                    $("#TDcontrolAcHead").val(data.controlac);
                }
            });
            $.ajax({
                type: "POST",
                url: "/DailyTrips/GetDriverById",
                datatype: "Json",
                data: { DriverId: '@Model.DriverID' },
                success: function (data) {
                    $("#DriverName").val(data.Driver);

                }
            });
            }
         else if ('@Model.VehicleType' == 'C') {
             $("#DocumentID").val('@Model.DocumentID');

                  $.ajax({
                type: "POST",
                url: "/DailyTrips/GetContractAcHeadsById",
                datatype: "Json",
                data: { paymentheadid: '@Model.PaymentHeadID', ControlAc: '@Model.TDcontrolAcHeadID' },
                success: function (data) {
                    $("#CPaymentHead").val(data.PaymentAc);
                    $("#CTDcontrolAcHead").val(data.controlac);
                }
            });
            $.ajax({
                type: "POST",
                url: "/DailyTrips/GetDriverById",
                datatype: "Json",
                data: { DriverId: '@Model.DriverID' },
                success: function (data) {
                    $("#DriverName").val(data.Driver);

                }
            });
            }
            else if ('@Model.VehicleType' == 'F') {

                  $.ajax({
                type: "POST",
                url: "/DailyTrips/GetFwdAcHeadsById",
                datatype: "Json",
                data: { Acheadid: '@Model.RentAcHeadID' },
                success: function (data) {
                    $("#FRentAcHead").val(data.controlac);
                }
            });

         }
        }
        $('#TDDate').datetimepicker({
            maxDate: '@_maxdate',
            minDate: '@_mindate', format: 'DD-MM-YYYY HH:mm'
        });
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
        $('#TDDate').val(reqdate);
        $("#DriverName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/Drivers',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.DriverName,
                                value: val.DriverName,
                                Id: val.DriverID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#DriverName').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#DriverName").val(i.item.label);
                $('#DriverID').val(i.item.Id);
            },

        });
        $("#RentAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#RentAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#RentAcHead").val(i.item.label);
                $('#RentAcHeadID').val(i.item.Id);
            },

        });
        $("#PaymentHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#PaymentHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#PaymentHead").val(i.item.label);
                $('#PaymentHeadID').val(i.item.Id);
            },

        });
        $("#TDcontrolAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#TDcontrolAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#TDcontrolAcHead").val(i.item.label);
                $('#TDcontrolAcHeadID').val(i.item.Id);
            },

        });
        $('#FormHired').validate({ // initialize the plugin
            rules: {
                TDDate: {
                    required: true,

                },

                DriverID: {
                    required: true,

                },
                //RegNo: {
                //    required: true,

                //},
                OriginName: {
                    required: true,

                },
                DestinationName: {
                    required: true,

                },
                TypeOfLoad: {
                    required: true,

                },
                Rent: {
                    required: true,

                },
                CurrencyIDRent: {
                    required: true,

                },
                CurrencyRent: {
                    required: true,

                },
                RentAcHead: {
                    required: true,

                },
                PaymentHead: {
                    required: true,

                },
                TDcontrolAcHead: {
                    required: true,

                },
                CurrencyAmount: {
                    required: true,

                },
                PaymentCurrencyID: {
                    required: true,

                },
            },
        });
        $("#btnsave").click(function () {
            if ($('#FormHired').valid()) {
                var data = $('#FormHired').serialize();
                console.log(data);
                $.ajax({
                    type: 'POST',
                    url: "/DailyTrips/SaveHiredVehicle",
                    data: data,
                    success: function (response) {
                        if (response.success == true) {
                            $.notify("Submitted Successfully!", "success");
                            location.href = "/DailyTrips/Index";
                        } else {
                            $.notify(response.message, "error");
                        }
                    }
                });

            }
        });
          $('#OTDDate').datetimepicker({
            maxDate: '@_maxdate',
            minDate: '@_mindate', format: 'DD-MM-YYYY HH:mm'
        });
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
        $('#OTDDate').val(reqdate);
        $("#ODriverName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/Drivers',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.DriverName,
                                value: val.DriverName,
                                Id: val.DriverID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#ODriverName').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#ODriverName").val(i.item.label);
                $('#ODriverID').val(i.item.Id);
            },

        });
        $("#ORentAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#ORentAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#ORentAcHead").val(i.item.label);
                $('#ORentAcHeadID').val(i.item.Id);
            },

        });
        $("#OPaymentHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#OPaymentHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#OPaymentHead").val(i.item.label);
                $('#OPaymentHeadID').val(i.item.Id);
            },

        });
        $("#OTDcontrolAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#OTDcontrolAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#OTDcontrolAcHead").val(i.item.label);
                $('#OTDcontrolAcHeadID').val(i.item.Id);
            },

        });
        $('#FormOwn').validate({ // initialize the plugin
            rules: {
                OTDDate: {
                    required: true,

                },

                ODriverID: {
                    required: true,

                },
                //RegNo: {
                //    required: true,

                //},
                OOriginName: {
                    required: true,

                },
                ODestinationName: {
                    required: true,

                },
                TypeOfLoad: {
                    required: true,

                },
                ORent: {
                    required: true,

                },
                OCurrencyIDRent: {
                    required: true,

                },
                OCurrencyRent: {
                    required: true,

                },
                ORentAcHead: {
                    required: true,

                },
                OPaymentHead: {
                    required: true,

                },
                OTDcontrolAcHead: {
                    required: true,

                },
                OPaymentCurrencyID: {
                    required: true,

                },
            },
        });
        $("#btnsave1").click(function () {
            if ($('#FormOwn').valid()) {
                var data = $('#FormOwn').serialize();
                console.log(data);
                $.ajax({
                    type: 'POST',
                    url: "/DailyTrips/SaveHiredVehicle",
                    data: data,
                    success: function (response) {
                        if (response.success == true) {
                            $.notify("Submitted Successfully!", "success");
                            location.href = "/DailyTrips/Index";
                        } else {
                            $.notify(response.message, "error");
                        }
                    }
                });

            }
        });

       //*************Contract vehicle********//
          $('#CTDDate').datetimepicker({
            maxDate: '@_maxdate',
            minDate: '@_mindate', format: 'DD-MM-YYYY HH:mm'
        });
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
        $('#CTDDate').val(reqdate);
        $("#CDriverName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/Drivers',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.DriverName,
                                value: val.DriverName,
                                Id: val.DriverID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#CDriverName').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#CDriverName").val(i.item.label);
                $('#CDriverID').val(i.item.Id);
            },

        });

        $("#CPaymentHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#CPaymentHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#CPaymentHead").val(i.item.label);
                $('#CPaymentHeadID').val(i.item.Id);
            },

        });
        $("#CTDcontrolAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#CTDcontrolAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#CTDcontrolAcHead").val(i.item.label);
                $('#CTDcontrolAcHeadID').val(i.item.Id);
            },

        });
        $('#FormContract').validate({ // initialize the plugin
            rules: {
                CTDDate: {
                    required: true,

                },

                CDriverID: {
                    required: true,

                },
                //RegNo: {
                //    required: true,

                //},
                COriginName: {
                    required: true,

                },
                CDestinationName: {
                    required: true,

                },
                TypeOfLoad: {
                    required: true,

                },

                CPaymentHead: {
                    required: true,

                },
                CTDcontrolAcHead: {
                    required: true,

                },
                CPaymentCurrencyID: {
                    required: true,

                },
            },
        });
        $("#btnsaveContract").click(function () {
            if ($('#FormContract').valid()) {
                var data = $('#FormContract').serialize();
                console.log(data);
                $.ajax({
                    type: 'POST',
                    url: "/DailyTrips/SaveContractVehicle",
                    data: data,
                    success: function (response) {
                        if (response.success == true) {
                            $.notify("Submitted Successfully!", "success");
                            location.href = "/DailyTrips/Index";
                        } else {
                            $.notify(response.message, "error");
                        }
                    }
                });

            }
        });


         //*************Forwarding vehicle********//
          $('#FTDDate').datetimepicker({
            maxDate: '@_maxdate',
            minDate: '@_mindate', format: 'DD-MM-YYYY HH:mm'
        });
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
        $('#FTDDate').val(reqdate);

        $("#FRentAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#FRentAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#FRentAcHead").val(i.item.label);
                $('#FRentAcHeadID').val(i.item.Id);
            },

        });
        $('#FormFwd').validate({ // initialize the plugin
            rules: {
                FTDDate: {
                    required: true,

                },
                PhoneNumber: {
                    required: true,

                },
                ForwardAgentID: {
                    required: true,

                },
                RouteID: {
                    required: true,

                },
                OriginCountry: {
                    required: true,

                },
                OriginCity: {
                    required: true,

                },
                FOriginName: {
                    required: true,

                },
                FRentAcHead: {
                    required: true,

                },

            },
        });
        $("#btnsaveFwd").click(function () {
            if ($('#FormFwd').valid()) {
                var data = $('#FormFwd').serialize();
                console.log(data);
                $.ajax({
                    type: 'POST',
                    url: "/DailyTrips/SaveForwardVehicle",
                    data: data,
                    success: function (response) {
                        if (response.success == true) {
                            $.notify("Submitted Successfully!", "success");
                            location.href = "/DailyTrips/Index";
                        } else {
                            $.notify(response.message, "error");
                        }
                    }
                });

            }
        });

    });




    var autocomplete, autocomplete1, Oautocomplete, Oautocomplete1, CAutoComplete, CAutoComplete1, COriginCountry, Fautocomplete, FOriginCountry, FOriginCity;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);

        autocomplete1 = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete1'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete1.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete1.addListener('place_changed', fillInAddress);


        Oautocomplete = new google.maps.places.Autocomplete(
            document.getElementById('Oautocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        Oautocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        Oautocomplete.addListener('place_changed', OfillInAddress);

        Oautocomplete1 = new google.maps.places.Autocomplete(
            document.getElementById('Dautocomplete1'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        Oautocomplete1.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        Oautocomplete1.addListener('place_changed', OfillInAddress);

        // For Contract Vehicle
        Cautocomplete = new google.maps.places.Autocomplete(
            document.getElementById('Cautocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        Cautocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        Cautocomplete.addListener('place_changed', CfillInAddress);

        Cautocomplete1 = new google.maps.places.Autocomplete(
            document.getElementById('Cautocomplete1'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        Cautocomplete1.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        Cautocomplete1.addListener('place_changed', CfillInAddress);

        COriginCountry = new google.maps.places.Autocomplete(
            document.getElementById('COriginCountry'), { types: ['geocode'] });
        // For Forward Vehicle
        Fautocomplete = new google.maps.places.Autocomplete(
            document.getElementById('Fautocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        Fautocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        Fautocomplete.addListener('place_changed', FfillInAddress);

        FOriginCity = new google.maps.places.Autocomplete(
            document.getElementById('FOriginCity'), { types: ['geocode'] });

        FOriginCountry = new google.maps.places.Autocomplete(
            document.getElementById('FOriginCountry'), { types: ['geocode'] });


    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        var place1 = autocomplete1.getPlace();




    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                if (val == 1) {
                    autocomplete.setBounds(circle.getBounds());
                } else {
                    autocomplete1.setBounds(circle.getBounds());
                }
            });
        }
    }
    function OfillInAddress() {
        // Get the place details from the autocomplete object.
        var place = Oautocomplete.getPlace();
        var place1 = Oautocomplete1.getPlace();




    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function Ogeolocate(val) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                if (val == 1) {
                    Oautocomplete.setBounds(circle.getBounds());
                } else {
                    Oautocomplete1.setBounds(circle.getBounds());
                }
            });
        }
    }
    function CfillInAddress() {
        // Get the place details from the autocomplete object.
        var place = Cautocomplete.getPlace();
        var place1 = Cautocomplete1.getPlace();




    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function Cgeolocate(val) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                if (val == 1) {
                    Cautocomplete.setBounds(circle.getBounds());
                } else {
                    Cautocomplete1.setBounds(circle.getBounds());
                }
            });
        }
    }
    function FfillInAddress() {
        // Get the place details from the autocomplete object.
        var place = Fautocomplete.getPlace();
        var place1 = Fautocomplete1.getPlace();




    }


    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function Fgeolocate(val) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });

                    Fautocomplete.setBounds(circle.getBounds());


            });
        }
    }

    function openPage(pageName, elmnt, color) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablink");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].style.backgroundColor = "";
        }
        document.getElementById(pageName).style.display = "block";
        elmnt.style.backgroundColor = color;
    }

    // Get the element with id="defaultOpen" and click on it
    document.getElementById("defaultOpen_"+'@ViewBag.VehicleType').click();
</script>
