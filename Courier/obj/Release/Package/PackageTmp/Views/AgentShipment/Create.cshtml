@model LTMSV2.Models.ImportShipmentFormModel
@{
    
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _decimal =Convert.ToInt32(@Session["Decimal"].ToString());
    //var cities = (IEnumerable<CourierMVC.EntityFramework.S_CityMaster>)ViewBag.Cities;
}
<style>

    textarea{
	width:100%;
	resize:vertical;
	border-radius: 10px;
    border: 1px solid #ccc;
}
	input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
/*textarea{
	height:auto!important;
	resize:vertical;

}*/
#Details [class*="col"] {
    padding-left: 2px;
    padding-right: 2px;
}
#Details input,#Details select{
	font-size:12px;
	}
.reve_rates1 {
       width: 4%;
    }
.reve_rates2 {
    width:6%;
}
.reve_rates{
	width:8%;
}
.reve_rates3{
	width:12%;
}
.reve_rates4{
	width:12%;
}

    /*.reve_rates {
        min-width: 16%;
        padding-left: 13px !important;
    }

    .reve_rates1 {
        max-width: 4%;
        padding-left: 13px !important;
    }

    .reve_rates2 {
        max-width: 8%;
        padding-left: 13px !important;
    }

    .reve_rates3 {
        min-width: 20%;
        padding-left: 13px !important;
    }*/

    /*.reve_rates > label {
        font-size: 1.5rem !important;
    }

    .reve_rates1 > label {
        font-size: 1rem !important;
    }

    .reve_rates2 > label {
        font-size: 1rem !important;
    }*/

    .reve_rates > input {
        font-size: 12px !important;
    }

    .reve_rates1 > input {
        font-size: 12px !important;
    }

    .reve_rates2 > input {
        font-size: 12px !important;
    }

    /*.reve_rates3 > label {
        font-size: 1rem !important;
    }*/

    /*.reve_rates3 > textarea {
        min-height: 4rem !important;
        font-size: 12px !important;
    }*/

    /*table.table td {
        font-size: 12px !important;
    }*/

    /*.xdsoft_calendar > table.table th, table th {
        font-weight: 400 !important;
        line-height: 15px !important;
    }

    .xdsoft_calendar > table.table th, table.table td, table th, table td {
        font-size: 12px !important;
        vertical-align: middle !important;
        padding: 0 !important;
    }*/
</style>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
<script type="text/javascript">
    //    google.maps.event.addDomListener(window, 'load', function () {
    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
    //        google.maps.event.addListener(places, 'place_changed', function () {
    //            var place = places.getPlace();
    //    var address = place.formatted_address;
    //    var latitude = place.geometry.location.A;
    //    var longitude = place.geometry.location.F;
    //    var mesg = "Address: " + address;
    //    mesg += "\nLatitude: " + latitude;
    //    mesg += "\nLongitude: " + longitude;
    //    alert(mesg);
    //});
    //    });

    var placeSearch, autocomplete, originairportCity, destinationairportCity, destinationCity, destinationCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        //autocomplete = new google.maps.places.Autocomplete(
        //    document.getElementById('autocomplete'), { types: ['geocode'] });

        //// Avoid paying for data that you don't need by restricting the set of
        //// place fields that are returned to just the address components.
        //autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        //    autocomplete.addListener('place_changed', fillInAddress);


        originairportCity = new google.maps.places.Autocomplete(
            document.getElementById('OriginAirportCity'), { types: ['geocode'] });

         

        destinationairportCity = new google.maps.places.Autocomplete(
            document.getElementById('DestinationAirportCity'), { types: ['geocode'] });

        destinationCity = new google.maps.places.Autocomplete(
            document.getElementById('tDestinationCityID'), { types: ['geocode'] });
        
         destinationCountry = new google.maps.places.Autocomplete(
             document.getElementById('tDestinationCountryID'), { types: ['geocode'] });

        destinationCity.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = destinationCity.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                 else if (type == 'country') {
                    $('#tDestinationCountryID').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                destinationCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate(obj) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                 obj.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">

    function setTwoNumberDecimal(obj) {      
        
       $(obj).val(parseFloat($(obj).val()).toFixed(@_decimal));
    }
    function setThreeNumberDecimal(obj) {
               
       $(obj).val(parseFloat($(obj).val()).toFixed(3));
}
    //$(function () {
    //    $('#FromDate').datetimepicker({ format: 'DD-MM-YYYY' });

    //});

    //$(function () {
    //    $('#ToDate').datetimepicker({ format: 'DD-MM-YYYY' });

    //    $('#ToDate').datepicker("setDate", new Date());
    //});

    $(function () {
        $('#FlightDate').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    });
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">@ViewBag.Title</h1>
        </div>
        @*<div class="col-md-5 pull-right text-right">
                <h2 class="awb"><strong>@ViewBag.AWBNo</strong></h2>
                <h5 id="h1status" style="color:red">@ViewBag.Status</h5>

            </div>*@
        <hr />
    </div>
    <section class="content">
        @using (Html.BeginForm("create", "AgentShipment", FormMethod.Post, new { @id = "importShipment" }))
        {
            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-12">
                <div class="row">
                    <div class="col-md-6 row">
                        <div class="col-md-6 col-xs-12">
                            <div class="form-group">
                                @Html.HiddenFor(model => model.ID)
                                <label class="headinglabel">Consignor Name</label>
                                <div>
                                    @Html.TextBoxFor(model => model.ConsignorName, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ConsignorCountryName, "Origin Country", htmlAttributes: new { @class = "headinglabel" })
                                <div>
                                    @Html.TextBoxFor(model => model.ConsignorCountryName, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })
                                    @Html.ValidationMessageFor(model => model.ConsignorCountryName, "", new { @class = "text-danger" })
                                </div>

                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ConsignorCityName, "Origin City", htmlAttributes: new { @class = "headinglabel" })
                                <div>
                                    @Html.TextBoxFor(model => model.ConsignorCityName, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ConsignorAddress, "Consignor Address", htmlAttributes: new { @class = "headinglabel" })
                                <div>
                                    @Html.TextAreaFor(model => model.ConsignorAddress, new { @class = "",  @rows = "6", @cols = "45", @style = "text-decoration:none", @disabled = "true" })
                                    @Html.ValidationMessageFor(model => model.ConsignorAddress, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6 col-12">
                            <div class="form-group">
                                <label class="headinglabel">Consignee Name</label>
                                <div>
                                    @Html.TextBoxFor(model => model.ConsigneeName, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ConsigneeCountryName, "Destination Country", htmlAttributes: new { @class = "headinglabel" })
                                <div>
                                    @Html.TextBoxFor(model => model.ConsigneeCountryName, new { @class = "form-control",@disabled="true" })
                                    @*@Html.EditorFor(model => model.DestinationCountry, new { htmlAttributes = new { @class = "form-control", @disabled = "true", @style = "text-decoration:none" } })*@
                                    @Html.ValidationMessageFor(model => model.ConsigneeCountryName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ConsigneeCityName, "Destination City", htmlAttributes: new { @class = "headinglabel" })
                                <div>
                                    @Html.TextBoxFor(model => model.ConsigneeCityName, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ConsigneeAddress, "Consignee Address", htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @Html.TextAreaFor(model => model.ConsigneeAddress, new { @class = "", @rows = "6", @cols = "45", @style = "text-decoration:none", @required = "true", @disabled = "true" })
                                    @Html.ValidationMessageFor(model => model.ConsigneeAddress, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="col-md-6 row">
                        <div class="col-md-6 col-xs-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.ManifestNumber, "Manifest Number", htmlAttributes: new { @class = "headinglabel " })
                                <div>
                                    @Html.TextBoxFor(model => model.ManifestNumber, new { @class = "form-control", @disabled = "true", @style = "text-decoration:none", @width = "100%" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.OriginAirportCity, "Origin Airport City", htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @Html.TextBoxFor(model => model.OriginAirportCity, new { @class = "form-control", @required = "true",@onFocus = "geoCitylocate(this)" })
                                    @Html.ValidationMessageFor(model => model.OriginAirportCity, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.FlightDate, "Origin Flight Date", htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @Html.TextBoxFor(model => model.FlightDate, new { @class = "form-control", @required = "true" })
                                    @Html.ValidationMessageFor(model => model.FlightDate, "", new { @class = "text-danger" })
                                </div>
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.FlightNo, "Origin Flight Number", htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @Html.TextBoxFor(model => model.FlightNo, new { @class = "form-control", @required = "true" })
                                    @Html.ValidationMessageFor(model => model.FlightNo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.MAWB, htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @Html.TextBoxFor(model => model.MAWB, new { @class = "form-control", @required = "true" })
                                    @Html.ValidationMessageFor(model => model.MAWB, "", new { @class = "text-danger" })
                                </div>
                            </div>


                        </div>
                        <div class="col-md-6 col-xs-12">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CreatedDate, "Manifest Date", htmlAttributes: new { @class = "headinglabel" })
                                <div>
                                    @Html.TextBoxFor(model => model.CreatedDate, new { @class = "form-control", @required = "true", @disabled = "true" })
                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.DestinationAirportCity, "Destination Airport City", htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @Html.TextBoxFor(model => model.DestinationAirportCity, new { @class = "form-control", @required = "true" ,@onFocus = "geoCitylocate(this)"})

                                    @Html.ValidationMessageFor(model => model.DestinationAirportCity, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="row" style="">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.Bags, htmlAttributes: new { @class = "headinglabel required" })
                                        <div>
                                            @Html.TextBoxFor(model => model.Bags, new { @class = "form-control", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.Bags, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.RunNo, htmlAttributes: new { @class = "headinglabel required" })
                                        <div>
                                            @Html.TextBoxFor(model => model.RunNo, new { @class = "form-control", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.RunNo, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.CD, htmlAttributes: new { @class = "headinglabel required" })
                                        <div>
                                            @Html.TextBoxFor(model => model.CD, new { @class = "form-control", @required = "true" })
                                            @Html.ValidationMessageFor(model => model.CD, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.ShipmentTypeId, htmlAttributes: new { @class = "headinglabel required" })
                                <div>
                                    @*@Html.DropDownListFor(model => model.Type, (IEnumerable<SelectListItem>)ViewBag.Type, "Select shipment", htmlAttributes: new { @class = "form-control", @required = "true", @value = @Model.Type })*@
                                    @Html.DropDownListFor(model => model.ShipmentTypeId, new SelectList(@ViewBag.Type,"ID","ShipmentType"),"Select Shipment Type", htmlAttributes: new { @class = "form-control",  })
                                    
                                    @Html.ValidationMessageFor(model => model.ShipmentTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.TotalAWB, htmlAttributes: new { @class = "headinglabel required" })
                                <div>

                                    @Html.TextBoxFor(model => model.TotalAWB, new { @class = "form-control", @min = 1, @required = "true" })
                                    @Html.ValidationMessageFor(model => model.TotalAWB, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="col-md-12" id="Details">
                <div class="row form-group col-md-12 ">
                    <div class="col-md-1 reve_rates1">
                        <label class="headinglabel">S.No</label>
                        <input type="hidden" id="tSerialNum" name="tSerialNum" class="form-control" value="0" />
                        <input type="text" id="tSerialNum1" name="tSerialNum1" class="form-control" value="0" readonly />
                    </div>
                    <div class="col-md-1 reve_rates3 hide">
                        <label class="headinglabel required">HAWB</label>
                        <input type="text" id="tHAWB" name="tHAWB" class="form-control" />
                    </div>
                    <div class="col-md-1 reve_rates3">
                        <label class="headinglabel required">Airway Bill</label>
                        <input type="text" id="tAWB" name="tAWB" class="form-control" />
                    </div>
                      <div class="col-md-1 reve_rates1">
                        <label class="headinglabel required">Pcs</label>
                        <input type="number" id="tPCS" name="tPCS" class="form-control" value="0" />
                    </div>
                    <div class="col-md-1 reve_rates2">
                        <label class="headinglabel required">Weight</label>
                        <input type="number" id="tWeight" name="tWeight" class="form-control text-right" value="0" onchange="setThreeNumberDecimal(this)"  />
                    </div>
                  
                    <div class="col-md-2 reve_rates3">
                        <label class="headinglabel required">Contents</label>                        
                        <textarea id="tContents" name="tContents" rows="2"></textarea>
                    </div>
                  
                    <div class="col-md-2 reve_rates2">
                        <label class="headinglabel required">Value</label>
                        <input type="number" id="tValue" name="tValue" class="form-control text-right " value="0"  onchange="setTwoNumberDecimal(this)" />
                    </div>
                    <div class="col-md-2 reve_rates4">
                        <label class="headinglabel required">Currency</label>
                        <select id="tCurrencyID" name="tCurrencyID" class="form-control" >
                            <option value="">Select Currency</option>

                            @foreach (var item in ViewBag.CurrencyID)
                            {
                                <option value="@item.CurrencyID">@item.CurrencyName</option>
                            }
                        </select>
                    </div>
              
                    <div class="col-md-3 reve_rates4">
                        <label class="headinglabel required">Shipper</label>
                        <textarea id="tShipper" name="tShipper" ></textarea>
                    </div>
                    <div class="col-md-3  reve_rates3">
                        <label class="headinglabel required">Receiver</label>
                        <textarea id="tReciver" name="tReciver" ></textarea>
                    </div>
                    <div class="col-md-5 reve_rates3">
                        <label class="headinglabel required">Destination </label>                       
                        
                            <input id="tDestinationCityID" name="tDestinationCityID" type="text" class="form-control" onfocus="geolocate()">
                        
                        <input id="tDestinationCountryID" name="tDestinationCountryID" type="text" class="form-control hide" onfocus="geoCountrylocate()">

                    </div>
  <div class="col-md-1 reve_rates1">
                        <label class="headinglabel required">Bag</label>
                        <input type="text" id="tBagNo" name="tBagNo" class="form-control" />
                    </div>
                   
                </div>
                <div class="row col-md-12 form-group bt-right">
                    <input type="hidden" id="tId" name="tId" value="0" />
                    <div class="row form-group" id="addbtndiv"  style="text-align:right;margin-top:10px">
                        <button type="button" class="btn btn-primary btnwidth" onclick="addShipment1()" id="Newbtn">Add</button>

                        @*<button type="button" class="btn btn-secondary waves-effect waves-light" style="margin:0 0 0 0 !important" onclick="CancelDetails()">Cancel</button>*@

                    </div>
                    <div class="" id="updatebtndiv" style="text-align:right;margin-top:30px;display:none">       
                        <button type="button" class="btn btn-primary btnwidth" style="margin:0 0 0 0 !important" onclick="UpdateDetails()" id="Updatebtn">Update</button>

                        <button type="button" class="btn btn-danger btnwidth float-right" style="margin:0 0 0 0 !important" onclick="CancelDetails()">Cancel</button>

                    </div>
                    <span style="color:red;display:none" id="DetailsError">* Please fill all required fields</span>

                </div>
            </div>
            <div class="table-responsive tblbackground" style="padding:15px;margin-top:20px">
                <table class="table table-responsive table-bordered tblfont" role="grid" aria-describedby="datatable-1_info" style="min-width: 100%" id="DetailsTable">

                    @*<table class="table" style="min-width: 100%">*@
                    <thead class="input-table">
                        <tr>
                            <th width="20px">
                                S.No
                            </th>
                            @*<th>
                                HAWB
                            </th>*@
                            <th>
                                AWB
                            </th>
                            <th>
                                Bag.No
                            </th>
                            <th>
                                Contents
                            </th>
                            <th>
                                Shipper
                            </th>
                            <th>
                                Receiver
                            </th>
                            <th>
                                PCS
                            </th>
                            <th>
                                Weight
                            </th>
                            <th>
                                Value
                            </th>
                            <th>
                                Currency
                            </th>
                            <th width="100px">
                                Destination Country
                            </th>
                            <th width="100px">
                                Destination City
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody class="input-table" id="listContainer">
                        @{Html.RenderPartial("ShipmentList", Model);}
                    </tbody>
                </table>
            </div>
            <hr />
            @*<div class="form-group col-lg-3 col-md-6 col-sm-12 float-right" style="display:flex">
                    <div class="col-md-4">
                        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary btn-sm waves-effect waves-light float-right" })
                    </div>
                    <div class="col-md-4">
                        <input type="submit" value="Submit" id="btnSubmit" class="btn btn-primary waves-effect waves-light" />
                    </div>
                </div>*@
            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-12 btn-right">
                    <input type="submit" value="Submit" class="btn btn-primary waves-effect waves-light" />
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-danger btnwidth" })
                </div>

            </div>
        }
    </section>



</section>



<script>
        //function initialize() {
        //    var options = {
        //        types: ['(cities)'],
        //    };
        //    var options1 = {
        //        types: ['(regions)'],
        //    };
        //    var input2 = document.getElementById('DestinationCity');
        //    new google.maps.places.Autocomplete(input2,options);
        //    var input3 = document.getElementById('OriginCity');
        //    new google.maps.places.Autocomplete(input3,options);
        //    var input1 = document.getElementById('tDestinationCityID');
        //    new google.maps.places.Autocomplete(input1,options);
        //    var input = document.getElementById('tDestinationCountryID');
        //    new google.maps.places.Autocomplete(input, options1);

        //}

        //google.maps.event.addDomListener(window, 'load', initialize);

        //$("#DestinationCountryID").change(function () {
        //    var id = $(this).val();
        //    $("#DestinationCityID").empty();
        //    $.get("/DataFetch/GetCity", { id: id }, function (data) {
        //        if (data.length > 0) {
        //            var v = "<option value=''>Select City</option>";
        //            $.each(data, function (i, v1) {
        //                v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
        //            });
        //            $("#DestinationCityID").prop("disabled", false);
        //            $("#DestinationCityID").html(v);
        //        } else {
        //            var v = "<option value=''>Select City</option>";
        //            $("#DestinationCityID").html(v);
        //            $("#DestinationCityID").prop("disabled", true);
        //        };
        //    });
        //});
        //$("#tDestinationCountryID").change(function () {
        //    var id = $(this).val();
        //    $("#tDestinationCityID").empty();
        //    $.get("/DataFetch/GetCity", { id: id }, function (data) {
        //        if (data.length > 0) {
        //            var v = "<option>Select City</option>";
        //            $.each(data, function (i, v1) {
        //                v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
        //            });
        //            $("#tDestinationCityID").prop("disabled", false);
        //            $("#tDestinationCityID").html(v);
        //            $("#tDestinationCityID").css("width", "100% !important");

        //        } else {
        //            var v = "<option>Select City</option>";
        //            $("#tDestinationCityID").html(v);
        //            $("#tDestinationCityID").prop("disabled", true);
        //            $("#tDestinationCityID").css("width", "100% !important");
        //        };
        //    });
        //});
        $(document).ready(function () {
            $(".datetimepick1").datetimepicker({
                format: 'd-m-Y H:i',
                step: 15
            });
            $("#DestinationCountryID").trigger("change");
            //tSerialNum1
            var snoval = parseInt('@Model.Shipments.Count') + 1;
            $("#tSerialNum1").val(snoval)
           //$("#TotalAWB").val('');
            $("#importshipment").addClass("active");

            $("#btnSubmit").click(function () {

                var detailslen = $('#DetailsTable > tbody > tr').length;
                if (detailslen == 0) {
                    alert("Please add Shipment Details");
                    return false;
                } else {
                    return true;
                }

            });
        });

        function addShipment() {
            $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "AgentShipment")',
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);
                }
            });
        }

        function addShipment1() {
            $("#Newbtn").text("Add");
            var validation = ValidateDetails();
            if (validation == 1) {
                var data1 = new FormData();
                $("#DetailsError").css("display", "none");

                data1.append("tSerialNum", $("#tSerialNum").val());
                data1.append("isupdate", false);

                data1.append("tHAWB", $("#tHAWB").val());
                data1.append("tAWB", $("#tAWB").val());
                data1.append("tBagNo", $("#tBagNo").val());
                data1.append("tContents", $("#tContents").val());
                data1.append("tPCS", $("#tPCS").val());
                data1.append("tWeight", $("#tWeight").val());
                data1.append("tValue", $("#tValue").val());
                data1.append("tCurrencyID", $("#tCurrencyID").val());
                data1.append("tShipper", $("#tShipper").val());
                data1.append("tReciver", $("#tReciver").val());
                data1.append("tDestinationCountryID", $("#tDestinationCountryID").val());
                data1.append("tDestinationCityID", $("#tDestinationCityID").val());

                data1.append("tId", $("#tId").val());
                $.ajax({
                    url: '@Url.Action("AddShippmentToTable", "AgentShipment")',
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    data: data1,
                    success: function (data) {
                        $.ajax({
                            url: '@Url.Action("AddOrRemoveShipment", "AgentShipment")',
                            type: 'post',
                            dataType: 'html',
                            data: $('form#importShipment').serialize(),
                            success: function (data) {
                                $("#listContainer").html(data);

                                $("#tSerialNum").val(0);
                                $("#tHAWB").val('');
                                $("#tAWB").val('');
                                $("#tBagNo").val(0);
                                $("#tContents").val('');
                                $("#tPCS").val(0);
                                $("#tWeight").val(0);
                                $("#tValue").val(0);
                                $("#tCurrencyID").val('');
                                $("#tShipper").val('');
                                $("#tReciver").val('');
                                $("#tDestinationCountryID").val('');
                                $("#tDestinationCityID").val('');
                                //$("#tDestinationCityID").prop("disabled", true);

                                $("#tId").val(0);

                            }
                        });
                        //$("#listContainer").html(data);
                    }
                });
            } else {
                $("#DetailsError").css("display", "block");
            }
        }

        function UpdateDetails() {
            debugger;
            var validation = ValidateDetails();
            if (validation == 1) {
                var data1 = new FormData();
                $("#DetailsError").css("display", "none");

                data1.append("tSerialNum", $("#tSerialNum").val());
                data1.append("isupdate", true);
                data1.append("tHAWB", $("#tHAWB").val());
                data1.append("tAWB", $("#tAWB").val());
                data1.append("tBagNo", $("#tBagNo").val());
                data1.append("tContents", $("#tContents").val());
                data1.append("tPCS", $("#tPCS").val());
                data1.append("tWeight", $("#tWeight").val());
                data1.append("tValue", $("#tValue").val());
                data1.append("tCurrencyID", $("#tCurrencyID").val());
                data1.append("tShipper", $("#tShipper").val());
                data1.append("tReciver", $("#tReciver").val());
                data1.append("tDestinationCountryID", $("#tDestinationCountryID").val());
                data1.append("tDestinationCityID", $("#tDestinationCityID").val());

                data1.append("tId", $("#tId").val());
                $.ajax({
                    url: '@Url.Action("AddShippmentToTable", "AgentShipment")',
                    cache: false,
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    data: data1,
                    success: function (data) {
                        $.ajax({
                            url: '@Url.Action("AddOrRemoveShipment", "AgentShipment")',
                            type: 'post',
                            dataType: 'html',
                            data: $('form#importShipment').serialize(),
                            success: function (data) {
                                $("#listContainer").html(data);

                                $("#tSerialNum").val(0);
                                $("#tHAWB").val('');
                                $("#tAWB").val('');
                                $("#tBagNo").val(0);
                                $("#tContents").val('');
                                $("#tPCS").val(0);
                                $("#tWeight").val(0);
                                $("#tValue").val(0);
                                $("#tCurrencyID").val('');
                                $("#tShipper").val('');
                                $("#tReciver").val('');
                                $("#tDestinationCountryID").val('');
                                $("#tDestinationCityID").val('');
                                //$("#tDestinationCityID").prop("disabled", false);

                                $("#tId").val(0);

                                $("#updatebtndiv").css('display', 'none');

                                $("#addbtndiv").css('display', 'block');
                            }
                        });
                        //$("#listContainer").html(data);
                    }
                });

            } else {
                $("#DetailsError").css("display", "block");

            }
        }
        function ValidateDetails() {
         var hawb=   $("#tHAWB").val();
         var awb=  $("#tAWB").val();
         var bno=   $("#tBagNo").val();
         var content=  $("#tContents").val();
         var pcs=    $("#tPCS").val();
         var weigh=   $("#tWeight").val();
         var valu=  $("#tValue").val();
         var curency=  $("#tCurrencyID").val();
         var shiper= $("#tShipper").val();
         var reciver= $("#tReciver").val();
         var destcountry=  $("#tDestinationCountryID").val();
            var destcity = $("#tDestinationCityID").val();
            //destcountry == '' ||hawb = ''  hawb = nulldestcountry == null |
            if (awb == '' || bno == '' || content == '' || pcs == '' || weigh == '' || valu == '' || curency == '' || shiper == '' || reciver == '' ||  destcity=='') {
                return 0;
            } else if ( awb == null || bno == null || content == null || pcs == null || weigh == null || valu == null || curency == null || shiper == null || reciver == null || destcity == null) {
                return 0;
            }
            else {
                return 1;
            }
        }
           function deleteShipment(i) {
            $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "AgentShipment")?i='+i,
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);
                    var detailslen = $('#DetailsTable > tbody > tr').length;
                    if (detailslen == 0) {

                        $("#Newbtn").text("Add");
                    }
                    CancelDetails();
                }
               });

        }
        function EditShipment(i) {
            $.ajax({
                url: '@Url.Action("GetShipmentDetails", "AgentShipment")?i='+i,
                type: 'post',
                dataType: 'Json',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    debugger;
                    if (data.success == true) {
                        $("#tSerialNum").val(data.ival);
                        $("#tHAWB").val(data.data.HAWB);
                        $("#tAWB").val(data.data.AWB);
                        $("#tBagNo").val(data.data.BagNo);
                        $("#tContents").val(data.data.Contents);
                        $("#tPCS").val(data.data.PCS);
                        $("#tWeight").val(data.data.Weight);
                        $("#tValue").val(data.data.Value);
                        $("#tCurrencyID").val(data.data.CurrencyID);
                        $("#tShipper").val(data.data.Shipper);
                        $("#tReciver").val(data.data.Reciver);
                        $("#tDestinationCountryID").val(data.data.DestinationCountry);
                        $("#tDestinationCityID").val(data.data.DestinationCity);

                        $("#tId").val(data.data.ShipmentDetailID);

                        $("#addbtndiv").css('display', 'none');
                        $("#updatebtndiv").css('display', 'block');
                         var snoval = parseInt(data.ival) + 1;
                        $("#tSerialNum1").val(snoval)
                    }
                    //$("#listContainer").html(data);
                }
            });
        }
        function CancelDetails() {

            $("#DetailsError").css("display", "none");

            $("#tSerialNum").val(0);
            $("#tHAWB").val('');
            $("#tAWB").val('');
            $("#tBagNo").val(0);
            $("#tContents").val('');
            $("#tPCS").val(0);
            $("#tWeight").val(0);
            $("#tValue").val(0);
            $("#tCurrencyID").val('');
            $("#tShipper").val('');
            $("#tReciver").val('');
            $("#tDestinationCountryID").val('');
            $("#tDestinationCityID").val('');
            //$("#tDestinationCityID").prop("disabled", true);
            $("#updatebtndiv").css('display', 'none');

            $("#addbtndiv").css('display', 'block');
        }
        //function populateCity(ctrl, id) {
        //    var idd = $(ctrl).val();
        //    $(id).empty();
        //    $.get("/DataFetch/GetCity", { id: idd }, function (data) {
        //        if (data.length > 0) {
        //            var v = "<option>Select City</option>";
        //            $.each(data, function (i, v1) {
        //                v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
        //            });
        //            $(id).prop("disabled", false);
        //            $(id).html(v);
        //        } else {
        //            var v = "<option>Select City</option>";
        //            $(id).html(v);
        //            $(id).prop("disabled", true);
        //        };
        //    });
        //}
</script>


<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCexhtncgr1cTUh0hzKOrK_GsS_tifAEns&libraries=places&callback=initAutocomplete" async defer></script>