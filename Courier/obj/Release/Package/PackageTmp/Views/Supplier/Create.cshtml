@model  LTMSV2.Models.SupplierMaster

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}
<style>
/*.formDesign .col-md-4{
		padding-bottom:10px;
		}*/
    .jobform {
        background-color: #fff;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
        border-radius: 25px;
        margin-bottom: 27px;
        /*padding: 20px;
        width: 100%;
        margin: 0 auto;
        max-width: 853px;*/
        padding-top: 14px;
        padding-left: 8px;
        padding-right: 8px;
        width: 96%;
    }
    .headinglabel {
        font-family: Calibri;
        font-size: 14px;
        color: #2d2828 !important;
        display:inline;
    }
    .btn-group{
        width:100% !important;
    }
    .multiselect{
        width:100% !important;
    }
</style>
<script src="~/Content/bootstrap-multiselect.js"></script>
<link href="~/Content/bootstrap-multiselect.css" rel="stylesheet" />

<script type="text/javascript">
    //    google.maps.event.addDomListener(window, 'load', function () {
    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
    //        google.maps.event.addListener(places, 'place_changed', function () {
    //            var place = places.getPlace();
    //    var address = place.formatted_address;
    //    var latitude = place.geometry.location.A;
    //    var longitude = place.geometry.location.F;
    //    var mesg = "Address: " + address;
    //    mesg += "\nLatitude: " + latitude;
    //    mesg += "\nLongitude: " + longitude;
    //    alert(mesg);
    //});
    //    });

    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('LocationName'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);


        autocompleteCity = new google.maps.places.Autocomplete(
            document.getElementById('CityName'), { types: ['geocode'] });

        autocompleteCountry = new google.maps.places.Autocomplete(
            document.getElementById('CountryName'), { types: ['geocode'] });

    }

    function fillInAddress() {

        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">
    $(document).ready(function () {

        $("#SupplierName").focus();
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#LocationName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/LocationMaster/GetLocation',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.Location,
                                value: val.Location,
                                LocationID: val.LocationID,
                                CityID: val.CityID,
                                CountryID: val.CountryID,
                                CountryName: val.CountryName,
                                CityName: val.CityName
                            }
                        }))
                    }
                })
            },
            minLength: 0,
            autoFocus: false,
            focus: function (event, ui) {
                $('#LocationName').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#LocationName").val(i.item.label);
                $("#LocationID").val(i.item.LocationID);
                $("#CountryName").val(i.item.CountryName);
                $("#CountryID").val(i.item.CountryID);
                $("#CityName").val(i.item.CityName);
                $("#CityID").val(i.item.CityID);
            },

        });
        $("#SupplierName").change(function () {

            $.ajax({
                type: "POST",
                url: "/Supplier/GetSupplierCode",
                datatype: "Json",
                data: { suppliername: $("#SupplierName").val() },
                success: function (result) {
                    debugger;

                    $('#ReferenceCode').val(result.data)
                    // BindCity(data.CityID, data.LocationID);
                }
            });

        });



        //$('#RevenueItems').multiselect({
        //    includeSelectAllOption: true,
        //    enableClickableOptGroups: true,
        //    enableCollapsibleOptGroups: true,
        //    enableFiltering: true,
        //    dropRight: true,

        //});

        //$(".multiselect-container").css({ "height": "200px", "overflow-y": "scroll" });






        //var x = "";
        //$("#RevenueItems").change(function () {
        //    x = "";
        //    x = $("#RevenueItems").val();

        //    $("#RevenuTypeIds").val(x);
        //});

        $("#btnsave").click(function () {
            debugger;
            var sup = $("#SupplierName").val();
            var ref = $("#ReferenceCode").val();
            var con = $("#ContactPerson").val();
            var add = $("#Address1").val();
            var phone = $("#Phone").val();
            var ExpCode = $("#ExportCode").val();
            var maxcreditdays = $('#MaxCreditDays').val();
            var regex = /^[0-9 ]+$/
            var isValid = regex.test(ExpCode);
            
            var email = $("#Email").val();
           

            if (sup == "") {
                $("#alert").show();
                return false;
            }
            else if (con == "") {
                $("#alert").show();
                return false;
            }
            else if ($('#LocationName').val() == "")
            {
                $("#alert").show();
                return false;
            }
            else if ($('#CityName').val() == "") {
                $("#alert").show();
                return false;
            }
            else if ($('#CountryName').val() == "") {
                $("#alert").show();
                return false;
            } 
            else if (phone == "") {

                $("#alert").show();
                return false;
            }
            else if (email == "") {

                $("#alert").show();
                return false;
            }
            //else if (maxcreditdays == "" || maxcreditdays == "0")
            //{
            //    $("#alert").show();
            //    return false;

            //}
            else if (ref == "") {
                $("#alert").show();
                return false;
            }          
                    
            else if ($('#ExportCode').val()!="" && !isValid) {
                alert("Exporter Code must be a Number.");
                return false;
            } 
            else {
                $("#alert").hide();
                return true;
            }


        });
           $("#SupplierName").focusout(function () {
            var customerval = $("#SupplierName").val();
            if (customerval == "" || customerval == null) {

            } else {
                var custstrarray = customerval.split(' ');
                if (custstrarray.length > 1) {
             
                    var refString = custstrarray[0].charAt(0) + custstrarray[1].charAt(0) + "-" + '@ViewBag.custnum';
                    $("#ReferenceCode").val(refString);

                } else {
                   
                    var refString = customerval.charAt(0) + customerval.charAt(1) + "-" + '@ViewBag.custnum';
                    $("#ReferenceCode").val(refString);
                }
            }
        });
    });
</script>
<section class="content-header">
    <h1 class="headingfont">Supplier Master - Create</h1>

</section>

@if (ViewBag.SuccessMsg != null)
{
    <script type="text/javascript">
          $(document).ready(function () {
              $.notify("@ViewBag.SuccessMsg", "success");
          });
    </script>
}
<section class="content">
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <div id="alert" style="color:red;display:none;margin-left:10px;">*Please fill mandatory fields</div>
    <section class="">
        <fieldset>
            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-3">
                    @Html.HiddenFor(mode => Model.LocationID)
                    @Html.HiddenFor(mode => Model.CityID)
                    @Html.HiddenFor(mode => Model.CountryID)

                    <label class="required headinglabel">Supplier Code</label>

                    @Html.TextBoxFor(model => model.ReferenceCode, new { @class = "form-control", @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.ReferenceCode)
                </div>
                <div class="col-md-3">
                    <label class="required headinglabel">Supplier Name</label>

                    @Html.TextBoxFor(model => model.SupplierName, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.SupplierName)
                </div>


                <div class="col-md-3">
                    <label class="headinglabel">PO.Box No</label>
                    @Html.TextBoxFor(model => model.POBoxNo, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.POBoxNo)
                </div>
                <div class="col-md-3">
                    <label class=" headinglabel">Fax ID</label>

                    @Html.TextBoxFor(model => model.Fax, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.Fax)
                </div>
            
            </div>
            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-3">
                    <label class="required headinglabel">Contact Person</label>

                    @Html.TextBoxFor(model => model.ContactPerson, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.ContactPerson)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Address 1 (Building)</label>
                    @Html.TextBoxFor(model => model.Address1, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address1)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Address 2 (Street)</label>

                    @Html.TextBoxFor(model => model.Address2, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address2)
                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Location</label>
                    @Html.TextBoxFor(model => model.LocationName, new {  @class = "form-control", @required = "true" })
                    @Html.ValidationMessageFor(model => model.LocationName)

                </div>

               
            </div>
            <div class="row no-margin" style="padding-top:10px">
                <div class="col-md-3">
                    <label class="required headinglabel">City</label>
                    @Html.TextBoxFor(model => model.CityName, new { @class = "form-control" ,@readonly="readonly"})
                    @Html.ValidationMessageFor(model => model.CityName)

                </div>
                <div class="col-md-3">
                    <label class="required headinglabel">Country</label>
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control",  @readonly = "readonly" })
                    @Html.ValidationMessageFor(model => model.CountryName)


                </div>
                <div class="col-md-3">
                    <label class="required headinglabel">Tele Phone -1</label>

                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control textright txttarget" })
                    @Html.ValidationMessageFor(model => model.Phone)
                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Mobile No.</label>

                    @Html.TextBoxFor(model => model.MobileNo, new { @class = "form-control textright txttarget" })
                    @Html.ValidationMessageFor(model => model.MobileNo)
                </div>
                </div>
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-md-3">
                        <label class="required headinglabel">Email</label>

                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    <div class="col-md-3">
                        <label class="headinglabel">WebSite</label>

                        @Html.TextBoxFor(model => model.WebSite, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.WebSite)
                    </div>
                    <div class="col-md-3">
                        <label class="headinglabel">Max Credit Days</label>

                        @Html.TextBoxFor(model => model.MaxCreditDays, new { @class = "form-control textright" })
                        @Html.ValidationMessageFor(model => model.MaxCreditDays)
                    </div>
                    <div class="col-md-3">
                        <label class=" headinglabel">Max Credit Limit</label>
                        @Html.TextBoxFor(model => model.MaxCreditLimit, new { @class = "form-control textright" })
                        @Html.ValidationMessageFor(model => model.MaxCreditLimit)
                    </div>
                </div>

                <div class="row no-margin" style="padding-top:10px">

                    <div class="col-md-3">
                        <label class="headinglabel">Exporter Code</label>
                        @Html.TextBoxFor(model => model.ExportCode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ExportCode)
                    </div>
                    <div class="col-md-3">
                        <label class="required headinglabel">Supplier Type</label>
                        @Html.DropDownListFor(model => model.SupplierTypeID, new SelectList(ViewBag.SupplierType, "SupplierTypeID", "SupplierType1"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SupplierType)

                    </div>
                    <div class="col-md-3">
                        <label class="headinglabel required">Account Head</label>                        
                        @Html.DropDownListFor(model => model.AcHeadID, new SelectList(ViewBag.AcHead, "AcHeadID", "AcHead1"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AcHeadID)                        
                    </div>

                    <div class="col-md-3">

                        <label class="required headinglabel">TRN No.</label>
                        @Html.TextBoxFor(model => model.RegistrationNo, new { @class = "form-control txttarget" })
                        @Html.ValidationMessageFor(model => model.RegistrationNo)

                    </div>
                    <div class="col-md-3" style="padding-top:15px">

                        @Html.CheckBox("StatusActive", new { @name = "StatusActive" }) &nbsp <label class="headinglabel">Status Active</label>
                        @Html.ValidationMessageFor(model => model.StatusActive)
                    </div>

                </div>
                @*<div class="row no-margin" style="padding-top:10px">

                    <div class="col-md-4">
                        <label class="headinglabel">Remark</label>
                        @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control txttarget" })
                        @Html.ValidationMessageFor(model => model.Remarks)

                    </div>
                    
                    <div class="col-md-4">
                        <label class="headinglabel">Revenue Type Ids</label><h6></h6>
                        @Html.DropDownList("RevenueItems", new SelectList(ViewBag.revenue, "RevenueTypeID", "RevenueType1"), new { @class = "multiselect form-control", multiple = "multiple", @style = "padding-top:10px" })
                        @Html.HiddenFor(model => model.RevenueTypeIds)

                       
                    </div>

                </div>*@
             
                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-md-12" style="text-align: right; margin-top: 20px;">
                        <input type="submit" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;
                        <a href='@Url.Action("Index", "Supplier", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>
                    </div>
                </div>


</fieldset>
    </section>
        }


