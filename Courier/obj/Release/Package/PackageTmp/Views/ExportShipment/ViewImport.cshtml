@model LTMSV2.Models.ImportShipmentFormModel
@{
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    ViewBag.Title = "ViewImport";
    var Agents = ViewBag.Agents as List<LTMSV2.Models.AgentMaster>;
    var Countries = ViewBag.Countries as List<LTMSV2.Models.CountryMaster>;
    var Cities = ViewBag.Cities as List<LTMSV2.Models.CityMaster>;
}
<style>

    select {
        border-radius: 5px !important;
    }
</style>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
<script>
      var placeSearch, autocomplete, originairportCity, destinationairportCity, consignorCountry, consigneeCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        //autocomplete = new google.maps.places.Autocomplete(
        //    document.getElementById('autocomplete'), { types: ['geocode'] });

        //// Avoid paying for data that you don't need by restricting the set of
        //// place fields that are returned to just the address components.
        //autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        //    autocomplete.addListener('place_changed', fillInAddress);


        originairportCity = new google.maps.places.Autocomplete(
            document.getElementById('OriginAirportCity'), { types: ['geocode'] });



        destinationairportCity = new google.maps.places.Autocomplete(
            document.getElementById('DestinationAirportCity'), { types: ['geocode'] });

        consignorCountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorCountryName'), { types: ['geocode'] });

        consigneeCountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCountryName'), { types: ['geocode'] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate(obj) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                $(obj).setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate(obj) {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                $(obj).setBounds(circle.getBounds());
            });
        }
    }

</script>
<script type="text/javascript">


    $(function () {
        $('#FlightDate').datetimepicker({ format: 'DD-MM-YYYY' });

    });

    //$(function () {
    //    $('#ToDate').datetimepicker({ format: 'DD-MM-YYYY' });

    //    $('#ToDate').datepicker("setDate", new Date());
    //});

    $(function () {
        $('#CreatedDate').datetimepicker({ format: 'DD-MM-YYYY' });
    });
</script>
@using (Html.BeginForm("ViewImport", "ExportShipment", FormMethod.Post, new { @id = "importShipment" }))
{

    @Html.AntiForgeryToken()

    <section class="content-header" style="margin-bottom:20px">
        <div class="row">
            <div class="col-md-5 pull-left">
                <h1 class="headingfont">View Import Shipments</h1>
            </div>

            <hr />
        </div>
    </section>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-12">
                    <h3 style="margin-bottom:40px;">
                        <b> Filter By</b>
                        <span style="float:right;">
                            <a href="Index" class="waves-effect waves-light btn btn-danger"><b>Exit</b></a>
                        </span>
                    </h3>

                    <div class="row search">
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="AgentName">Agent Name</label>
                            @*<input type="text" class="form-control" name="AgentID" id="AgentID" placeholder="" value="@Model.AgentID" />*@
                            <select class="form-control" name="AgentID" id="AgentID">
                                <option value="">Select Agent</option>
                                @foreach (var item in Agents)
                                {
                                    if (item.AgentID == Model.AgentID)
                                    {
                                        <option value="@item.AgentID" selected>@item.Name</option>

                                    }
                                    else
                                    {
                                        <option value="@item.AgentID">@item.Name</option>

                                    }
                                }
                            </select>
                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field" style="padding-left:15px">
                            <label for="ManifestNumber">Manifest Number</label>
                            <input type="text" class="form-control" name="ManifestNumber" id="ManifestNumber" value="@Model.ManifestNumber" />
                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="MAWB">MAWB</label>
                            <input type="text" class="form-control" name="MAWB" id="MAWB" value="@Model.MAWB" />
                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="ManifestDate">Manifest Date</label>
                            <input type="text" class="form-control  text-right datecontrol datepick" name="CreatedDate" id="CreatedDate" value="@Model.CreatedDate.ToString("dd-MM-yyyy")" />
                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="Date">Flight Date</label>
                            <input type="text" class="form-control text-right datecontrol datepick" name="FlightDate" id="FlightDate" placeholder="Date" value="@Model.FlightDate" />
                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="FlightNumber">Flight Number</label>
                            <input type="text" class="form-control " name="FlightNo" id="FlightNo" value="@Model.FlightNo" />
                        </div>
                    </div>
                    <div class="row" style="padding:10px 15px">
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="OriginCountryID">Origin Country</label>
                            @*<input type="text" class="form-control " name="OriginCountryID" id="OriginCountryID" value="@Model.OriginCountryID" />*@
                            @*@Html.DropDownListFor(model => model.OriginCountryID, null, "Select Country", htmlAttributes: new { @class = "form-control"})*@
                            <input type="text" class="form-control " name="ConsignorCountryName" id="ConsignorCountryName" value="@Model.ConsignorCountryName" ,  onfocus="geoCountrylocate(this)" />

                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="OriginCityID">Origin Airport</label>
                            <input type="text" class="form-control " name="OriginAirportCity" id="OriginAirportCity" value="@Model.OriginAirportCity", onfocus="geoCitylocate(this)" />

                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="DestinationCountryID">Destination Country</label>
                            @*<input type="text" class="form-control " name="DestinationCountryID" id="DestinationCountryID" value="@Model.DestinationCountryID" />*@
                            @*@Html.DropDownListFor(model => model.DestinationCountryID, null, "Select Country", htmlAttributes: new { @class = "form-control" })*@
                            <input type="text" class="form-control " name="ConsigneeCountryName" id="ConsigneeCountryName" value="@Model.ConsigneeCountryName", onfocus="geoCountrylocate(this)" />

                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2 search_field">
                            <label for="DestinationAirportOfShipmentId">Destination Airport</label>
                            <input type="text" class="form-control " name="DestinationAirportCity" id="DestinationAirportCity" value="@Model.DestinationAirportCity",  onfocus="geoCitylocate(this)"/>
                        </div>
                        <div class="col-lg-2 col-md-2 col-sm-2">
                            @*<input type="submit" value="Filter" class="btn btn-primary btn-gradient btn-block waves-effect waves-light" />*@
                            <button type="submit" class="btn btn-primary m-top" style="min-width:50px!Important;"><i class="fa fa-refresh" aria-hidden="true"></i></button>
                            @*<button type="button" style="margin-top:55px" class="btn btn-primary btn-sm waves-effect waves-light" onclick="printDiv()">Print</button>*@

                        </div>
                        @*<div class="col-lg-2 col-md-2 col-sm-2">
                                <button type="button" style="margin-top:55px" class="btn btn-primary btn-sm waves-effect waves-light" onclick="printDiv()">Print</button>
                            </div>*@
                    </div>
                </div>

            </div>
            <table class="table table-datatable table-striped table-hover table_lg_head m_icons dataTable no-footer" id="datatable-1" role="grid" aria-describedby="datatable-1_info" style="margin-top:30px">
                @{ Html.RenderAction("ImportTable", "ExportShipment");}
            </table>
        </div>
    </div>
}

<script>
        function initialize() {
            var options = {
                types: ['(cities)'],
            };
            var options1 = {
                types: ['(regions)'],
            };

            var input2 = document.getElementById('DestinationCity');
            new google.maps.places.Autocomplete(input2,options);
            var input3 = document.getElementById('OriginCity');
            new google.maps.places.Autocomplete(input3, options);
            var input= document.getElementById('OrginCountry');
            new google.maps.places.Autocomplete(input, options1);
            var input1 = document.getElementById('DestinationCountry');
            new google.maps.places.Autocomplete(input1, options1);

        }

        google.maps.event.addDomListener(window, 'load', initialize);
        $(document).ready(function () {


            $("#Date").removeClass("active");
            @if(TempData["toasterMessage"] != null)
            {
                @:toasterMessage("@TempData["toasterMessage"].ToString()");
            }

            $("#btnSubmit").click(function () {
                debugger;
                var agentid = $("#AgentID").val();
                var ManifestNumber = $("#ManifestNumber").val();
                var MAWB = $("#MAWB").val();
                var CreatedDate = $("#CreatedDate").val();
                var Date = $("#Date").val();
                var FlightNo = $("#FlightNo").val();
                var OriginCountryID = $("#ConsignorCountryName").val();
                var OriginCityID = $("#OriginAirportCity").val();
                var DestinationCountryID = $("#ConsigneeCountryName").val();
                var DestinationAirportOfShipmentId = $("#DestinationAirportCity").val();
                if (agentid == "" && ManifestNumber == "" && MAWB == "" && CreatedDate == "" && Date == "" && FlightNo == "" && OriginCountryID == "" && OriginCityID == "" && DestinationCountryID == "" && DestinationAirportOfShipmentId == "") {
                    alert("Please select atleast one Filter value !!")

                    return false;
                } else {
                    return true;
                }
            });
            function initialize() {
                var input2 = document.getElementById('DestinationCity');
                new google.maps.places.Autocomplete(input2);
                var input3 = document.getElementById('OriginCity');
                new google.maps.places.Autocomplete(input3);

            }

            google.maps.event.addDomListener(window, 'load', initialize);
        });

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCexhtncgr1cTUh0hzKOrK_GsS_tifAEns&libraries=places&callback=initAutocomplete" async defer></script>
