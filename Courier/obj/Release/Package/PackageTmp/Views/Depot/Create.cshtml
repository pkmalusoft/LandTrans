@model LTMSV2.Models.tblDepot

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}
<style>
    .searchdiv {
        background-color: #fff;
        width: 100%;
        margin: 0 auto;
        max-width: 500px;
        padding: 20px;
        margin-top: 50px;
        border-radius: 10px;
        box-shadow: 0 9px 23px rgba(0, 0, 0, 0.09), 0 5px 5px rgba(0, 0, 0, 0.06) !important;
    }

</style>
    <script type="text/javascript">
        //    google.maps.event.addDomListener(window, 'load', function () {
        //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
        //        google.maps.event.addListener(places, 'place_changed', function () {
        //            var place = places.getPlace();
        //    var address = place.formatted_address;
        //    var latitude = place.geometry.location.A;
        //    var longitude = place.geometry.location.F;
        //    var mesg = "Address: " + address;
        //    mesg += "\nLatitude: " + latitude;
        //    mesg += "\nLongitude: " + longitude;
        //    alert(mesg);
        //});
        //    });

        var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(['address_component']);
            
            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            //    autocomplete.addListener('place_changed', fillInAddress);

            autocompleteCity = new google.maps.places.Autocomplete(
                document.getElementById('CityName'), { types: ['geocode'] });
            autocompleteCity.addListener('place_changed', fillInAddress);

            autocompleteCountry = new google.maps.places.Autocomplete(
                document.getElementById('CountryName'), { types: ['geocode'] });

        }

        function fillInAddress() {
            debugger;
            // Get the place details from the autocomplete object.
            var place = autocompleteCity.getPlace();
            console.log(place.address_components);

            //for (var component in componentForm) {
            //  document.getElementById(component).value = '';
            //  document.getElementById(component).disabled = false;
            //}

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            //for (var i = 0; i < place.address_components.length; i++) {
            //  var addressType = place.address_components[i].types[0];
            //  if (componentForm[addressType]) {
            //    var val = place.address_components[i][componentForm[addressType]];
            //    document.getElementById(addressType).value = val;
            //  }
            //      }

            var postcode = '';
            $.each(place.address_components, function (index, component) {
                var types = component.types;
                $.each(types, function (index, type) {
                    //if (type == 'postal_code') {
                    //    postcode = component.long_name;
                    //}
                    //else if (type == 'locality') {
                    //    //$('#hdncity').val(component.long_name);
                    //    $('#CityName').val(component.long_name);
                    //}
                    if (type == 'country') {
                        $('#CountryName').val(component.long_name);
                    }

                    //if(type == 'administrative_area_level_1') {
                    //state = component.short_name;
                    //    }
                });
            });

        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        function geoCitylocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocompleteCity.setBounds(circle.getBounds());
                });
            }
        }

        function geoCountrylocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocompleteCountry.setBounds(circle.getBounds());
                });
            }
        }
    </script>
<script type="text/javascript">
    $(document).ready(function () {


        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#CountryID").focus();

        $("#AgentID").prop("disabled", false);
        $("#IsOwn").click(function () {
            if ($("#IsOwn").is(':checked')) {
                $("#AgentID").prop("disabled", true);
            }
            else {
                $("#AgentID").prop("disabled", false);
            }
        });

        $("#btnsave").click(function () {
            var cou = $("#CountryName").val();
            var cit = $("#CityName").val();
            var dep = $("#Depot").val();
         
         
            if (cou == "") {
                $("#validations").show();
                return false;
            }
            else if (cit == "") {
                $("#validations").show();
                return false;
            }
            else if (dep == "") {
                $("#validations").show();
                return false;
            }
          
            else {
                $("#validations").hide();
                return true;
            }
        });
      
       


    });
</script>
<section class="content-header">
    <h1 class="headingfont">Depot</h1>

</section>

<section class="content">
    @using (Html.BeginForm())
    {
        @Html.ValidationSummary(true)
        <div class="searchdiv sm-width">
            <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
            <fieldset>
                <div class="row no-margin">
                    <div class="col-md-12">
                        <label class="headinglabel required">City</label>
                        @Html.TextBoxFor(model => model.CityName, new { @class = "form-control", id = "CityName", @onFocus = "geoCitylocate()" })
                        @Html.ValidationMessageFor(model => model.CityName)
                    </div>
                </div>
                <div class="row no-margin">
                    <div class="col-md-12">
                        <label class="headinglabel required">Country</label>
                        @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control", id = "CountryName", @readonly="readonly" })
                        @*@Html.DropDownListFor(model => model.CountryID, new SelectList(@ViewBag.Country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                        @Html.ValidationMessageFor(model => model.CountryName)
                    </div>
                </div>
                <div class="row no-margin">
                    <div class="col-md-12">
                        <div class="col-md-6">
                            <label class="headinglabel required">Depot</label>
                        </div>
                        <div class="col-md-6 checkboxdesign verticalcheckbox" >
                            @Html.CheckBox("IsOwn", new { @name = "IsOwn" }) &nbsp;&nbsp;
                            <label class="headinglabel">Is Own</label>
                            @Html.ValidationMessageFor(model => model.IsOwn)
                        </div>
                    </div>
                    <div class="col-md-12">
                        @Html.TextBoxFor(model => model.Depot, new { @class = "form-control txttarget" })
                        @Html.ValidationMessageFor(model => model.Depot)

                    </div>
                </div>                

                <div class="row no-margin">                  

                    <div class="col-md-12">
                        <label class="headinglabel">Agent</label>
                        @Html.DropDownListFor(model => model.AgentID, new SelectList(@ViewBag.Agent, "AgentID", "Name"), "Select", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CountryID)


                    </div>


                </div>



                <div class="row no-margin" style="padding-top:10px">
                    <div class="col-md-12 btn-right">

                        <input type="submit" value="Save" class="btn btn-primary btnwidth" data-toggle="tooltip" title="Click here" id="btnsave" />



                        <a href='@Url.Action("Index", "Depot", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here" style="margin-left:5px;">Cancel</a>


                    </div>
                </div>


                
            </fieldset>
            </div>
            }


    </section>

   

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>