@model LTMSV2.Models.ComapanyVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
      var _decimal =Convert.ToInt32(@Session["Decimal"].ToString());
}

    <script type="text/javascript">
        //    google.maps.event.addDomListener(window, 'load', function () {
        //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
        //        google.maps.event.addListener(places, 'place_changed', function () {
        //            var place = places.getPlace();
        //    var address = place.formatted_address;
        //    var latitude = place.geometry.location.A;
        //    var longitude = place.geometry.location.F;
        //    var mesg = "Address: " + address;
        //    mesg += "\nLatitude: " + latitude;
        //    mesg += "\nLongitude: " + longitude;
        //    alert(mesg);
        //});
        //    });

       

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(['address_component']);

            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            //    autocomplete.addListener('place_changed', fillInAddress);


            autocompleteCity = new google.maps.places.Autocomplete(
                document.getElementById('CityName'), { types: ['geocode'] });

            autocompleteCountry = new google.maps.places.Autocomplete(
                document.getElementById('CountryName'), { types: ['geocode'] });

        }

        function fillInAddress() {
            debugger;
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();
            console.log(place.address_components);

            //for (var component in componentForm) {
            //  document.getElementById(component).value = '';
            //  document.getElementById(component).disabled = false;
            //}

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            //for (var i = 0; i < place.address_components.length; i++) {
            //  var addressType = place.address_components[i].types[0];
            //  if (componentForm[addressType]) {
            //    var val = place.address_components[i][componentForm[addressType]];
            //    document.getElementById(addressType).value = val;
            //  }
            //      }

            var postcode = '';
            $.each(place.address_components, function (index, component) {
                var types = component.types;
                $.each(types, function (index, type) {
                    if (type == 'postal_code') {
                        postcode = component.long_name;
                    }
                    else if (type == 'locality') {
                        //$('#hdncity').val(component.long_name);
                        $('#CityName').val(component.long_name);
                    }
                    else if (type == 'country') {
                        $('#CountryName').val(component.long_name);
                    }

                    //if(type == 'administrative_area_level_1') {
                    //state = component.short_name;
                    //    }
                });
            });

        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        function geoCitylocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocompleteCity.setBounds(circle.getBounds());
                });
            }
        }

        function geoCountrylocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocompleteCountry.setBounds(circle.getBounds());
                });
            }
        }
    </script>
    <style>
        .editLogo{
                background: #fff;
                border-radius: 50%;
                width: 35px;
                margin: auto;
                height: 35px;
                line-height: 35px;
                color: #ffffff;
                background: #35b8eb;
                font-size: 20px;
                border: 2px solid #ffffff;
                text-align: center;
                right: 0;
                left: 0;
                pointer-events: none;
                position: absolute;
                cursor: pointer;
          }
          .logo{
            display: flex;
            position: relative;
            justify-content: center;
          }
    </style>
<script type="text/javascript">
    $(document).ready(function () {

        $(":text").css("border-radius", "5px");
        $("select").css("border-radius", "5px");
        $(".awbno").hide();

        if ($("#IsAWBAutoGenerated").is(":checked")==true) {
            $(".awbno").show();
        }
        $("#AcCompany").focus();

        $("#IsAWBAutoGenerated").click(function () {
            if ($("#IsAWBAutoGenerated").is(':checked')) {
                $(".awbno").show();
            }
            else {
                $(".awbno").hide();
            }
        });

        $("#btnsave").click(function () {
            var accom = $("#AcCompany").val();
            var add1 = $("#Address1").val();
            var cou = $("#CountryName").val(); // $("#CountryID option:selected").val();
            var city = $("#CityName").val(); // $("#CityID option:selected").val();
            var des = $("#DesignationID option:selected").val();
            var key = $("#KeyPerson").val();
            var phone = $("#Phone").val();
            var mob = $("#Mobile1").val();
            var em = $("#EMail").val();
            var copr = $("#CompanyPrefix").val();
            var curr = $("#CurrencyID option:selected").val();




            if (accom == "") {
                $("#validations").show();
                return false;
            }
            else if (add1 == "") {
                $("#validations").show();
                return false;
            }
            else if (cou == "") {
                $("#validations").show();
                return false;
            }
            else if (des == "") {
                $("#validations").show();
                return false;
            }
            else if (key == "") {
                $("#validations").show();
                return false;
            }
            else if (phone == "") {
                $("#validations").show();
                return false;
            }
            else if (mob == "") {
                $("#validations").show();
                return false;
            }
            else if (em == "") {
                $("#validations").show();
                return false;
            }
            else if (copr == "") {
                $("#validations").show();
                return false;
            }
            else if (curr == "") {
                $("#validations").show();
                return false;
            }
            else {
                $("#validations").hide();
                return true;
            }
        });

        
        

    });
</script>



<section class="content-header">
    <h1 class="headingfont">Company Master - Modify</h1>

</section>


<section class="content">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
            <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <fieldset>


            <div class="row no-margin">

                <div class="col-md-3">
                    @Html.HiddenFor(model => model.LogoFileName)
                    <label class="headinglabel required">Company</label>
                    @Html.HiddenFor(model => model.AcCompanyID)
                    @Html.TextBoxFor(model => model.AcCompany, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.AcCompany)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Address1</label>
                    @Html.TextBoxFor(model => model.Address1, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address1)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Address2</label>
                    @Html.TextBoxFor(model => model.Address2, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address2)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Address3</label> 
                    @Html.TextBoxFor(model => model.Address3, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.Address3)

                </div>
            </div>

            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-3">
                    <label class="headinglabel required">Country</label>
                    @*<input class="form-control" id="CountryName" name="CountryName" type="text" onFocus="geoCountrylocate()" />*@
                    @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control", id = "CountryName", @onFocus = "geoCountrylocate()" })
                    @Html.ValidationMessageFor(model => model.CountryName)

                </div>


                <div class="col-md-3">
                    <label class="headinglabel required">City</label>
                    @Html.TextBoxFor(model => model.CityName, new { @class = "form-control", id = "CityName", @onFocus = "geoCitylocate()" })
                    @*<input class="form-control" id="CityName" name="CityName" type="text" onFocus="geoCitylocate()" />*@
                    @Html.ValidationMessageFor(model => model.CityName)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Location</label>
                    @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", id = "autocomplete", @onFocus = "geolocate()" })
                    @*<input class="form-control" id="autocomplete" name="LocationName" onFocus="geolocate()" type="text" />*@
                    @Html.ValidationMessageFor(model => model.LocationName)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Designation</label>
                    @Html.DropDownListFor(model => model.DesignationID, new SelectList(@ViewBag.Designations, "DesignationID", "Designation1"), "Select", new { @class = "form-control" })
                     @Html.ValidationMessageFor(model => model.DesignationID)

                </div>

                 
            </div>

            <div class="row no-margin" style="padding-top: 10px">
              
                 <div class="col-md-3">
                    <label class="headinglabel required">Contact Person</label>
                    @Html.TextBoxFor(model => model.KeyPerson, new { @class = "form-control txttarget" })
                    @Html.ValidationMessageFor(model => model.KeyPerson)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel required">Phone No</label>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.Phone)

                </div>

               @* <div class="col-md-3">
                    <label class="headinglabel">Phone No 1</label>
                    @Html.TextBoxFor(model => model.PhoneNo1, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.PhoneNo1)

                </div>
                <div class="col-md-3">
                    <label class="headinglabel">Phone No 2</label>
                    @Html.TextBoxFor(model => model.PhoneNo2, new { @class = "form-control textright"})
                    @Html.ValidationMessageFor(model => model.PhoneNo2)

                </div>*@

                <div class="col-md-3">
                    <label class="headinglabel">Fax No</label>
                    @Html.TextBoxFor(model => model.PhoneNo4, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.PhoneNo4)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Mobile No 1</label>
                    @Html.TextBoxFor(model => model.Mobile1, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.Mobile1)

                </div>

              

            </div>

            <div class="row no-margin" style="padding-top: 10px">

                @* <div class="col-md-3">
            <label class="headinglabel">Phone No 3</label>
            @Html.TextBoxFor(model => model.PhoneNo3, new { @class = "form-control textright" })
            @Html.ValidationMessageFor(model => model.PhoneNo3)

        </div>*@



                <div class="col-md-3">
                    <label class="headinglabel">Mobile No 2</label>
                    @Html.TextBoxFor(model => model.Mobile2, new { @class = "form-control textright" })
                    @Html.ValidationMessageFor(model => model.Mobile2)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Email</label>
                    @Html.TextBoxFor(model => model.EMail, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EMail)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel">Website</label>
                    @Html.TextBoxFor(model => model.website, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.website)

                </div>

                <div class="col-md-3">
                    <label class="headinglabel required">Company Prefix</label>
                    @Html.TextBoxFor(model => model.CompanyPrefix, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CompanyPrefix)
                </div>

               

            </div>

            <div class="row no-margin" style="padding-top: 10px">
                <input type="file" id="FileUpload1" style="display:none" />
                <input type="button" id="btnUpload" value="Upload Files" style="display:none" />
                <div class="col-md-3">
                    <label class="headinglabel required">Default Currency</label>
                    @Html.DropDownListFor(model => model.CurrencyID, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CurrencyID)

                </div>
                <div class="col-md-2">
                    <label class="headinglabel">Logo</label>
                    <div class="logo">
                    <img src='@Model.LogoFilPath' width="100" height="100" id="imglogo" title="Click Image to Edit Logo" />
                    <i class="fa fa-pencil editLogo"></i>
                </div>
                </div>
                @*<div class="col-md-3 awbno">
                    <label class="headinglabel">Invoice Prefix</label>
                    @Html.TextBoxFor(model => model.InvoicePrefix, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.InvoicePrefix)

                </div>
                <div class="col-md-3 awbno">
                    <label class="headinglabel">Invoice Format</label>
                    @Html.TextBoxFor(model => model.InvoiceFormat, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.InvoiceFormat)

                </div>*@
            </div>

            @*<div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-3 checkboxdesign" style="padding-top:15px">
                    @Html.CheckBox("IsAWBAutoGenerated", new { @name = "IsAWBAutoGenerated" }) &nbsp
                    <label class="headinglabel">Auto Generate AirWayBill</label>
                    @Html.ValidationMessageFor(model => model.IsAWBAutoGenerated)
                </div>

                <div class="col-md-3 awbno">
                    <label class="headinglabel">Starting AWB Number</label>
                    @Html.TextBoxFor(model => model.AWBFormat, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AWBFormat)

                </div>
              
            </div>*@
          
            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-12 btn-right">

                  <input type="submit" value="Update" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;<a href='@Url.Action("Index", "CompanyMaster", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                </div>
            </div>
        </fieldset>
    }
</section>

<script>
    $(document).ready(function () {
        $('#imglogo').click(function () {

            $("#FileUpload1").trigger('click');

        });

        $("#FileUpload1").change(function () {
            $('#btnUpload').trigger('click');
        });

        $('#btnUpload').click(function () {

            // Checking whether FormData is available in browser
            if (window.FormData !== undefined) {

                var fileUpload = $("#FileUpload1").get(0);
                var files = fileUpload.files;

                // Create FormData object
                var fileData = new FormData();

                // Looping over all files and add it to FormData object
                for (var i = 0; i < files.length; i++) {
                    fileData.append(files[i].name, files[i]);
                }

                // Adding one more key to FormData object
                fileData.append('username', "Manas");

                $.ajax({
                    url: '/CompanyMaster/UploadFiles',
                    type: "POST",
                    contentType: false, // Not to set any content header
                    processData: false, // Not to process data
                    data: fileData,
                    success: function (result) {
                        if (result.status == "ok") {
                            $('#imglogo').attr('src', "/UploadFiles/" + result.FileName);
                            $('#LogoFileName').val(result.FileName);
                        }
                    },
                    error: function (err) {
                        alert(err.statusText);
                    }
                });
            } else {
                alert("FormData is not supported.");
            }
        });
    });
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>