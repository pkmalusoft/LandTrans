@model LTMSV2.Models.ImportShipmentFormModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";

    //var cities = (IEnumerable<CourierMVC.EntityFramework.S_CityMaster>)ViewBag.Cities;
}
<style>

    .reve_rates {
        min-width: 16%;
        padding-left: 13px !important;
    }

    .reve_rates1 {
        max-width: 4%;
        padding-left: 13px !important;
    }

    .reve_rates2 {
        max-width: 8%;
        padding-left: 13px !important;
    }

    .reve_rates3 {
        min-width: 20%;
        padding-left: 13px !important;
    }

    .reve_rates > label {
        font-size: 1rem !important;
    }

    .reve_rates1 > label {
        font-size: 1rem !important;
    }

    .reve_rates2 > label {
        font-size: 1rem !important;
    }

    .reve_rates > input {
        font-size: 12px !important;
    }

    .reve_rates1 > input {
        font-size: 12px !important;
    }

    .reve_rates2 > input {
        font-size: 12px !important;
    }

    .reve_rates3 > label {
        font-size: 1rem !important;
    }

    .reve_rates3 > textarea {
        min-height: 4rem !important;
        font-size: 12px !important;
    }

    table.table td {
        font-size: 12px !important;
    }

    .xdsoft_calendar > table.table th, table th {
        font-weight: 400 !important;
        line-height: 15px !important;
    }

    .xdsoft_calendar > table.table th, table.table td, table th, table td {
        font-size: 12px !important;
        vertical-align: middle !important;
        padding: 0 !important;
    }
</style>
<div class="card">
    <div class="card-body">
        @using (Html.BeginForm("edit", "importshipment", FormMethod.Post, new { @id = "importShipment" }))
        {
            @Html.AntiForgeryToken()
            <h4>Edit Import Shipment</h4>
            <hr />
            @Html.HiddenFor(model => model.ID)
            @*@Html.HiddenFor(model => model)*@
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="col-12">
                <div class="row">
                    <div class="col-lg-3 col-md-6 col-12">
                        <div class="form-group">
                            <label class="control-label">Consignor Name</label>
                            <div>
                                <input type="text" class="form-control" title="@ViewBag.AgentName" value="@ViewBag.AgentName" disabled style="text-decoration:none" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OrginCountry, "Origin Country", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.EditorFor(model => model.OrginCountry, new { htmlAttributes = new { @class = "form-control", @disabled = "true", @style = "text-decoration:none" } })
                                @Html.ValidationMessageFor(model => model.OrginCountry, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OriginCity, "Origin City", htmlAttributes: new { @class = "control-label" })
                            <div>
                                <input type="text" class="form-control" value="@ViewBag.AgentCity" title="@ViewBag.AgentCity" disabled style="text-decoration:none" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConsignorAddress, "Consignor Address", htmlAttributes: new { @class = "control-label" })
                            <div>
                                @Html.TextAreaFor(model => model.ConsignorAddress, new { @class = "form-control", @rows = "3", @style = "text-decoration:none", @disabled = "true" })
                                @Html.ValidationMessageFor(model => model.ConsignorAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-3 col-md-6 col-12">
                        <div class="form-group">
                            <label>Consignee Name</label>
                            <div>
                                <input type="text" value="@ViewBag.CompanyName" title="@ViewBag.CompanyName" class="form-control" disabled style="text-decoration:none" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DestinationCountry, "Destination Country", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.DestinationCountry, new { htmlAttributes = new { @class = "form-control", @disabled = "true", @style = "text-decoration:none" } })
                                @Html.ValidationMessageFor(model => model.DestinationCountry, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @*<div class="form-group">
                                @Html.LabelFor(model => model.DestinationCityID, "Destination City", htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.DropDownListFor(model => model.DestinationCityID, null, "Select Destination City", htmlAttributes: new { @class = "form-control", @required = "true" })
                                    @Html.ValidationMessageFor(model => model.DestinationCityID, "", new { @class = "text-danger" })
                                </div>
                            </div>*@
                        <div class="form-group">
                            @Html.LabelFor(model => model.ConsigneeAddress, "Consignee Address", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.TextAreaFor(model => model.ConsigneeAddress, new { @class = "form-control", @rows = "3", @style = "text-decoration:none", @required = "true", @disabled = "true" })
                                @Html.ValidationMessageFor(model => model.ConsigneeAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="col-lg-3 col-md-6 col-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ManifestNumber, "Manifest Number", htmlAttributes: new { @class = "control-label" })
                            <div>
                                <input type="text" class="form-control" value="@Model.ManifestNumber" disabled style="text-decoration:none" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.OriginCity, "Origin Airport City", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.OriginCity, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                @*@Html.DropDownListFor(model => model.AirportOfShipmentID, new SelectList(cities, "CityID", "City"), "Select Airport City", htmlAttributes: new { @class = "form-control", @required = "true" })*@
                                @Html.ValidationMessageFor(model => model.OriginCity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Date, "Origin Flight Date", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control datetimepick1", @required = "true" } })
                                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FlightNo, "Origin Flight Number", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.FlightNo, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                @Html.ValidationMessageFor(model => model.FlightNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.MAWB, htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.MAWB, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                @Html.ValidationMessageFor(model => model.MAWB, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        @*<div class="form-group">
                                @Html.LabelFor(model => model.CD, htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.CD, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                    @Html.ValidationMessageFor(model => model.CD, "", new { @class = "text-danger" })
                                </div>
                            </div>*@
                    </div>
                    <div class="col-lg-3 col-md-6 col-12">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CreatedDate, "Manifest Date", htmlAttributes: new { @class = "control-label" })
                            <div>
                                <input type="text" class="form-control" value="@Model.CreatedDate" disabled style="text-decoration:none" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.DestinationCity, "Destination Airport City", htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.DestinationCity, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                @*@Html.DropDownListFor(model => model.DestinationAirportOfShipmentId, new SelectList(cities, "CityID", "City"), "Select Destination Airport City", htmlAttributes: new { @class = "form-control", @required = "true" })*@
                                @Html.ValidationMessageFor(model => model.DestinationCity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row " style="margin-bottom: -15px !important">
                            <div class="col-md-4 form-group">
                                @Html.LabelFor(model => model.Bags, htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.Bags, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                    @Html.ValidationMessageFor(model => model.Bags, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4 form-group">
                                @Html.LabelFor(model => model.RunNo, htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.RunNo, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                    @Html.ValidationMessageFor(model => model.RunNo, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-4  form-group">
                                @Html.LabelFor(model => model.CD, htmlAttributes: new { @class = "control-label required" })
                                <div>
                                    @Html.EditorFor(model => model.CD, new { htmlAttributes = new { @class = "form-control", @required = "true" } })
                                    @Html.ValidationMessageFor(model => model.CD, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.DropDownListFor(model => model.Type, (IEnumerable<SelectListItem>)ViewBag.Type, "Select shipment type", htmlAttributes: new { @class = "form-control", @required = "true" })
                                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.TotalAWB, htmlAttributes: new { @class = "control-label required" })
                            <div>
                                @Html.EditorFor(model => model.TotalAWB, new { htmlAttributes = new { @class = "form-control", @min = 1, @required = "true" } })
                                @Html.ValidationMessageFor(model => model.TotalAWB, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <div class="col-md-12" id="Details">
                <div class="row form-group">
                    <div class="reve_rates1">
                        <label>S.No</label>
                        <input type="hidden" id="tSerialNum" name="tSerialNum" class="form-control" value="0" />
                        <input type="text" id="tSerialNum1" name="tSerialNum1" class="form-control" value="0" readonly />
                    </div>
                    <div class="reve_rates">
                        <label class="required">HAWB</label>
                        <input type="text" id="tHAWB" name="tHAWB" class="form-control" />
                    </div>
                    <div class="reve_rates">
                        <label class="required">AWB</label>
                        <input type="text" id="tAWB" name="tAWB" class="form-control" />
                    </div>
                    <div class="reve_rates2">
                        <label class="required">Bag.No</label>
                        <input type="text" id="tBagNo" name="tBagNo" class="form-control" />
                    </div>
                    <div class="reve_rates">
                        <label class="required">Contents</label>
                        <input type="text" id="tContents" name="tContents" class="form-control" />
                    </div>
                    <div class="reve_rates2">
                        <label class="required">Pcs</label>
                        <input type="number" id="tPCS" name="tPCS" class="form-control" value="0" />
                    </div>
                    <div class="reve_rates2">
                        <label class="required">Weight</label>
                        <input type="number" id="tWeight" name="tWeight" class="form-control" value="0" />
                    </div>
                    <div class="reve_rates2">
                        <label class="required">Value</label>
                        <input type="number" id="tValue" name="tValue" class="form-control" value="0" />
                    </div>
                    <div class="reve_rates">
                        <label class="required">Currency</label>
                        <select id="tCurrencyID" name="tCurrencyID" class="form-control">
                            <option value="">Select Currency</option>
                            @foreach (var item in ViewBag.CurrencyID)
                            {
                                <option value="@item.CurrencyID">@item.CurrencyName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="row form-group">
                    <div class="reve_rates3">
                        <label class="required">Shipper</label>
                        <textarea id="tShipper" name="tShipper" class="form-control" rows="2"></textarea>
                    </div>
                    <div class="reve_rates3">
                        <label class="required">Receiver</label>
                        <textarea id="tReciver" name="tReciver" class="form-control" rows="2"></textarea>
                    </div>
                    <div class="reve_rates3">
                        <label class="required">Destination Country</label>
                        @*<select id="tDestinationCountryID" name="tDestinationCountryID" class="form-control dcountry">
                                <option value="">Select Country</option>

                                @foreach (var item in ViewBag.DestinationCountryID.Items)
                                {
                                    <option value="@item.CountryID">@item.CountryName</option>
                                }
                            </select>*@
                        <input id="tDestinationCountryID" name="tDestinationCountryID" type="text" class="form-control">
                    </div>
                    <div class="reve_rates3">
                        <label class="required">Destination City</label>
                        @*<select id="tDestinationCityID" name="tDestinationCityID" style="max-width:100% !important"  class="form-control dcity">
                                <option value="">Select City</option>

                                @foreach (var item in ViewBag.Cities)
                                {
                                    <option value="@item.CityID">@item.City</option>
                                }
                            </select>*@
                        <input id="tDestinationCityID" name="tDestinationCityID" type="text" class="form-control">
                    </div>
                    <input type="hidden" id="tId" name="tId" value="0" />
                    <div class="form-group" id="addbtndiv" style="width:15%;text-align:right;margin-top:30px">
                        <button type="button" class="btn btn-primary  waves-effect waves-light" onclick="addShipment1()" id="Newbtn">Add</button>
                        @*<button type="button" class="btn btn-secondary waves-effect waves-light" style="margin:0 0 0 0 !important" onclick="CancelDetails()">Cancel</button>*@
                    </div>
                    <div class="form-group" id="updatebtndiv" style="width:18%;text-align:right;margin-top:30px;display:none">
                        <button type="button" class="btn btn-primary waves-effect waves-light" style="margin:0 0 0 0 !important" onclick="UpdateDetails()" id="Updatebtn">Update</button>
                        <button type="button" class="btn btn-secondary waves-effect waves-light" style="margin:0 0 0 0 !important" onclick="CancelDetails()">Cancel</button>
                    </div>
                    <span style="color:red;display:none" id="DetailsError">* Please fill all required fields</span>
                </div>
            </div>
            <div class="col-12">
                <table class="table table-hover table_lg_head m_icons dataTable no-footer" role="grid" aria-describedby="datatable-1_info" id="DetailsTable" style="min-width: 100%">
                    @*<table style="min-width: 100%">*@
                    <thead class="input-table">
                        <tr>
                            <th width="20px">
                                S.No
                            </th>
                            <th>
                                HAWB
                            </th>
                            <th>
                                AWB
                            </th>
                            <th>
                                Bag No
                            </th>
                            <th>
                                Contents
                            </th>
                            <th>
                                Shipper
                            </th>
                            <th>
                                Reciver
                            </th>
                            <th>
                                PCS
                            </th>
                            <th>
                                Weight
                            </th>
                            <th>
                                Value
                            </th>
                            <th>
                                Currency
                            </th>
                            <th width="100px">
                                Destination Country
                            </th>
                            <th width="100px">
                                Destination City
                            </th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody class="input-table" id="listContainer">
                        @{Html.RenderPartial("ShipmentList", Model);}
                    </tbody>
                </table>
            </div>
            <hr />
            <div class="form-group col-lg-3 col-md-6 col-sm-12 float-right" style="display:flex">
                <div class="col-md-4">
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-secondary btn-sm waves-effect waves-light float-right" })
                </div>
                <div class="col-md-4">
                    <input type="submit" id="btnSubmit" value="Save" class="btn btn-primary waves-effect waves-light" />
                </div>
            </div>
        }
    </div>
</div>

    <script>
        function initialize() {
            var options = {
                types: ['(cities)'],
            };
            var options1 = {
                types: ['(regions)'],
            };
            var input2 = document.getElementById('DestinationCity');
            new google.maps.places.Autocomplete(input2, options);
            var input3 = document.getElementById('OriginCity');
            new google.maps.places.Autocomplete(input3, options);
            var input1 = document.getElementById('tDestinationCityID');
            new google.maps.places.Autocomplete(input1, options);
            var input = document.getElementById('tDestinationCountryID');
            new google.maps.places.Autocomplete(input, options1);

        }

        google.maps.event.addDomListener(window, 'load', initialize);

        $("#DestinationCountryID").change(function () {
            var id = $(this).val();
            $("#DestinationCityID").empty();
            $.get("/DataFetch/GetCity", { id: id }, function (data) {
                if (data.length > 0) {
                    var v = "<option value=''>Select City</option>";
                    $.each(data, function (i, v1) {
                        v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                    });
                    $("#DestinationCityID").prop("disabled", false);
                    $("#DestinationCityID").html(v);
                    $("#DestinationCityID").val('@Model.DestinationCityID');
                } else {
                    var v = "<option value=''>Select City</option>";
                    $("#DestinationCityID").html(v);
                    $("#DestinationCityID").prop("disabled", true);
                };
            });
        });
        //$("#tDestinationCountryID").change(function () {
        //    var id = $(this).val();
        //    if (id == null || id == '') {
        //        id = 0;
        //    }
        //    $("#tDestinationCityID").empty();
        //    $.get("/DataFetch/GetCity", { id: id }, function (data) {
        //        if (data.length > 0) {
        //            var v = "<option>Select City</option>";
        //            $.each(data, function (i, v1) {
        //                v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
        //            });
        //            $("#tDestinationCityID").prop("disabled", false);
        //            $("#tDestinationCityID").html(v);
        //            $("#tDestinationCityID").css("width", "100% !important");

        //        } else {
        //            var v = "<option>Select City</option>";
        //            $("#tDestinationCityID").html(v);
        //            $("#tDestinationCityID").prop("disabled", true);
        //            $("#tDestinationCityID").css("width", "100% !important");

        //        };
        //    });
        //});
        $(document).ready(function () {
            //$("#tDestinationCountryID").trigger("change");
            $("#DestinationCountryID").trigger("change");
            $(".datetimepick1").datetimepicker({
                format: 'd-m-Y H:i',
                step: 15
            });
             var snoval = parseInt('@Model.Shipments.Count') + 1;
            $("#tSerialNum1").val(snoval)
            $("#importshipment").addClass("active");
            $('#Type > option').each(function() {
                if ($(this).val() == '@Model.Type') {
                    $(this).attr('selected','selected')
                }
            });
            $("#btnSubmit").click(function () {
                var detailslen = $('#DetailsTable > tbody > tr').length;
                if (detailslen == 0) {
                    alert("Please add Shipment Details");
                    return false;
                } else {
                    return true;
                }

            });
        });
        function addShipment() {
            $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")',
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);
                }
            });
        }
        function addShipment1() {
            var detailslen = $('#DetailsTable > tbody > tr').length;
            $("#Newbtn").text("Add");
              var validation = ValidateDetails();
              if (validation == 1) {
                  var data1 = new FormData();

            data1.append("tSerialNum", $("#tSerialNum").val());
            data1.append("isupdate", false);

                data1.append("tHAWB", $("#tHAWB").val());
                data1.append("tAWB", $("#tAWB").val());
                data1.append("tBagNo", $("#tBagNo").val());
                data1.append("tContents", $("#tContents").val());
                data1.append("tPCS", $("#tPCS").val());
                data1.append("tWeight", $("#tWeight").val());
                data1.append("tValue", $("#tValue").val());
                data1.append("tCurrencyID", $("#tCurrencyID").val());
                data1.append("tShipper", $("#tShipper").val());
                data1.append("tReciver", $("#tReciver").val());
                data1.append("tDestinationCountryID", $("#tDestinationCountryID").val());
                data1.append("tDestinationCityID", $("#tDestinationCityID").val());

                data1.append("tId", $("#tId").val());
            $.ajax({
                url: '@Url.Action("AddShippmentToTable", "ImportShipment")',
                cache: false,
                contentType: false,
                processData: false,
                type: 'POST',
                data: data1,
                success: function (data) {
                         $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")',
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);

                    $("#tSerialNum").val(0);
                    $("#tHAWB").val('');
                    $("#tAWB").val('');
                    $("#tBagNo").val(0);
                    $("#tContents").val('');
                    $("#tPCS").val(0);
                    $("#tWeight").val(0);
                    $("#tValue").val(0);
                    $("#tCurrencyID").val('');
                    $("#tShipper").val('');
                    $("#tReciver").val('');
                    $("#tDestinationCountryID").val('');
                    $("#tDestinationCityID").val('');
                    //$("#tDestinationCityID").prop("disabled", true);

              $("#tId").val(0);


                }
            });
                        //$("#listContainer").html(data);
                    }
                });
              } else {
                  $("#DetailsError").css("display", "block");
              }
        }

        function UpdateDetails() {
            var validation = ValidateDetails();
            if (validation == 1) {
            var data1 = new FormData();

                data1.append("tSerialNum", $("#tSerialNum").val());
                data1.append("isupdate", true);
                data1.append("tHAWB", $("#tHAWB").val());
                data1.append("tAWB", $("#tAWB").val());
                data1.append("tBagNo", $("#tBagNo").val());
                data1.append("tContents", $("#tContents").val());
                data1.append("tPCS", $("#tPCS").val());
                data1.append("tWeight", $("#tWeight").val());
                data1.append("tValue", $("#tValue").val());
                data1.append("tCurrencyID", $("#tCurrencyID").val());
                data1.append("tShipper", $("#tShipper").val());
                data1.append("tReciver", $("#tReciver").val());
                data1.append("tDestinationCountryID", $("#tDestinationCountryID").val());
                data1.append("tDestinationCityID", $("#tDestinationCityID").val());

                data1.append("tId", $("#tId").val());
            $.ajax({
                url: '@Url.Action("AddShippmentToTable", "ImportShipment")',
                cache: false,
                contentType: false,
                processData: false,
                type: 'POST',
                data: data1,
                success: function (data) {
                         $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")',
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);

                    $("#tSerialNum").val(0);
                    $("#tHAWB").val('');
                    $("#tAWB").val('');
                    $("#tBagNo").val(0);
                    $("#tContents").val('');
                    $("#tPCS").val(0);
                    $("#tWeight").val(0);
                    $("#tValue").val(0);
                    $("#tCurrencyID").val('');
                    $("#tShipper").val('');
                    $("#tReciver").val('');
                    $("#tDestinationCountryID").val('');
                    $("#tDestinationCityID").val('');
                    //$("#tDestinationCityID").prop("disabled", false);
                    $("#updatebtndiv").css('display', 'none');

                    $("#addbtndiv").css('display', 'block');
              $("#tId").val(0);


                }
            });
                        //$("#listContainer").html(data);
                    }
                });

            } else {
                $("#DetailsError").css("display", "block");

            }
        }
        function ValidateDetails() {
            var hawb = $("#tHAWB").val();
            var awb = $("#tAWB").val();
            var bno = $("#tBagNo").val();
            var content = $("#tContents").val();
            var pcs = $("#tPCS").val();
            var weigh = $("#tWeight").val();
            var valu = $("#tValue").val();
            var curency = $("#tCurrencyID").val();
            var shiper = $("#tShipper").val();
            var reciver = $("#tReciver").val();
            var destcountry = $("#tDestinationCountryID").val();
            var destcity = $("#tDestinationCityID").val();

            if (hawb = '' || awb == '' || bno == '' || content == '' || pcs == '' || weigh == '' || valu == '' || curency == '' || shiper == '' || reciver == '' || destcountry == '' || destcity=='') {
                return 0;
            } else if (hawb = null || awb == null || bno == null || content == null || pcs == null || weigh == null || valu == null || curency == null || shiper == null || reciver == null || destcountry == null || destcity == null) {
                return 0;
            }
            else {
                return 1;
            }
        }
        function EditShipment(i) {

            $.ajax({
                url: '@Url.Action("GetShipmentDetails", "ImportShipment")?i='+i,
                type: 'post',
                dataType: 'Json',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    if (data.success == true) {
                        $("#tSerialNum").val(data.ival);
                        $("#tHAWB").val(data.data.HAWB);
                        $("#tAWB").val(data.data.AWB);
                        $("#tBagNo").val(data.data.BagNo);
                        $("#tContents").val(data.data.Contents);
                        $("#tPCS").val(data.data.PCS);
                        $("#tWeight").val(data.data.Weight);
                        $("#tValue").val(data.data.Value);
                        $("#tCurrencyID").val(data.data.CurrencyID);
                        $("#tShipper").val(data.data.Shipper);
                        $("#tReciver").val(data.data.Reciver);
                        $("#tDestinationCountryID").val(data.data.DestinationCountry);
                        $("#tDestinationCityID").val(data.data.DestinationCity);

                        $("#tId").val(data.data.ShipmentDetailID);

                        $("#addbtndiv").css('display', 'none');
                        $("#updatebtndiv").css('display', 'block');
                        var snoval = parseInt(data.ival) + 1;
                        $("#tSerialNum1").val(snoval)
                    }
                    //$("#listContainer").html(data);
                }
            });
        }
        function CancelDetails() {


            $("#tSerialNum").val(0);
            $("#tHAWB").val('');
            $("#tAWB").val('');
            $("#tBagNo").val(0);
            $("#tContents").val('');
            $("#tPCS").val(0);
            $("#tWeight").val(0);
            $("#tValue").val(0);
            $("#tCurrencyID").val('');
            $("#tShipper").val('');
            $("#tReciver").val('');
            $("#tDestinationCountryID").val('');
            $("#tDestinationCityID").val('');
            //$("#tDestinationCityID").prop("disabled", true);
            $("#updatebtndiv").css('display', 'none');

            $("#addbtndiv").css('display', 'block');
        }
        function deleteShipment(i) {

            $.ajax({
                url: '@Url.Action("AddOrRemoveShipment", "ImportShipment")?i='+i,
                type: 'post',
                dataType: 'html',
                data: $('form#importShipment').serialize(),
                success: function (data) {
                    $("#listContainer").html(data);
                    var detailslen = $('#DetailsTable > tbody > tr').length;
                    if (detailslen == 0) {

                        $("#Newbtn").text("New");
                    }
                    CancelDetails();

                }
            });
        }
        function populateCity(ctrl, id) {
            var idd = $(ctrl).val();
            $(id).empty();
            $.get("/DataFetch/GetCity", { id: idd }, function (data) {
                if (data.length > 0) {
                    var v = "<option>Select City</option>";
                    $.each(data, function (i, v1) {
                        v += "<option value=" + v1.Value + ">" + v1.Text + "</option>";
                    });
                    $(id).prop("disabled", false);
                    $(id).html(v);
                } else {
                    var v = "<option>Select City</option>";
                    $(id).html(v);
                    $(id).prop("disabled", true);
                };
            });
        }
    </script>

