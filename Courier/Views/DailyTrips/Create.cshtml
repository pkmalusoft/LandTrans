@model LTMSV2.Models.TruckDetail
@{
    /**/

    
    var _decimal = Convert.ToInt32(@Session["Decimal"].ToString());
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _mindate = @LTMSV2.Models.CommanFunctions.GetMinFinancialDate(); //'2020/01/01',
    var _maxdate = @LTMSV2.Models.CommanFunctions.GetMaxFinancialDate();
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.2/jquery.validate.min.js"></script>
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>*@

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title></title>
    <style>
        .error {
            color: red;
        }

        * {
            box-sizing: border-box
        }

        /* Set height of body and the document to 100% */
        body, html {
            height: 100%;
            margin: 0;
        }

        /* Style tab links */
        .tablink {
            background-color: #555;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            font-size: 17px;
            width: 25%;
        }

            .tablink:hover {
                background-color: #777;
            }

        /* Style the tab content (and add height:100% for full page content) */
        .tabcontent {
            display: none;
            padding: 100px 20px;
            height: 100%;
        }
        .tablink {
            color:white;
        }
       /* .flexTitle {
            display: flex;
            justify-content: space-between;
        }*/

    </style>

</head>

<body>
    <section class="content-header">
        <h1 class="headingfont">@ViewBag.Title</h1>
    </section>
    <div class="row no-margin">
        <div class="col-md-12 form-group d-flex" style="min-height:50px;justify-content:flex-start;background-color: #dedede; text-align: center;">
            <div class="field checkboxdesign">
                <label class="headinglabel"><input type="radio" id="chkHired" checked name="Vtype" onchange="setVehicleType(this)" value="H" />Hired Vehicle</label>
            </div>
            <div class="field checkboxdesign">
                <label class="headinglabel"><input type="radio" id="chkContract" name="Vtype" onchange="setVehicleType(this)" value="C" />Contract Vehicle</label>
            </div>
            <div class="field checkboxdesign">
                <label class="headinglabel"><input type="radio" id="chkOwn" name="Vtype" onchange="setVehicleType(this)" value="O" />Own Vehicle</label>
            </div>
            <div class="field checkboxdesign">
                <label class="headinglabel"><input type="radio" id="chkForward" name="Vtype" onchange="setVehicleType(this)" value="F" />Forward Agent</label>
            </div>
        </div>
    </div>
    <section class="content">
        <div id="Hired">
            <form id="FormHired">
                <div id="validations" style="color: red; margin-left: 7px; display: none">* Please fill mandatory fields</div>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })



                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        @Html.HiddenFor(model => model.TruckDetailID)
                        <input type="hidden" id="VehicleType" name="VehicleType" value="H" />
                        <label class="headinglabel required">Date</label>
                        @Html.TextBoxFor(model => model.TDDate, new { @class = "form-control datepicker", @required = "true" })


                    </div>

                    <div class="col-md-3 form-group" id="divdriver">
                        <label class="headinglabel required">Driver</label>
                        @Html.TextBoxFor(model => model.DriverName, new { @class = "form-control", @required = "true" })
                        @Html.HiddenFor(model => model.DriverID)

                    </div>
                    <div class="col-md-3 form-group hide" id="divfwd">
                        <label class="headinglabel required">Forwarding Agent</label>
                        @Html.DropDownListFor(model => model.ForwardAgentID, new SelectList(@ViewBag.FwdAgents, "SupplierID", "SupplierName"), "Select", new { @class = "form-control", @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Registration Number</label>
                        @Html.TextBoxFor(model => model.RegNo, new { @class = "form-control", @required = "true" })
                        @Html.HiddenFor(model => model.VehicleID)
                        @*@Html.TextBoxFor(model => model.RegNo, new { @class = "form-control", @required = "true" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Route</label>
                        @Html.DropDownListFor(model => model.RouteID, new SelectList(@ViewBag.Routes, "RouteID", "RouteName"), "Select", new { @class = "form-control" })

                    </div>
                </div>
                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Originating Location</label>
                        @Html.TextBoxFor(model => model.OriginName, new { @class = "form-control", id = "OriginName", name = "HOriginName", @onFocus = "geolocate(1)", @required = "true" })

                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Destination Location</label>
                        @Html.TextBoxFor(model => model.DestinationName, new { @class = "form-control", id = "DestinationName", name = "HDestinationName", @onFocus = "geolocate(2)", @required = "true" })


                    </div>


                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Type of Load</label>
                        <select class="form-control" id="TypeOfLoad" name="TypeOfLoad" required>
                            <option value="Consolidated Truck">Consolidated Truck</option>
                            <option value="Full Truck">Full Truck</option>
                        </select>
                        @*@Html.TextBoxFor(model => model.TypeOfLoad, new { @class = "form-control", @required = "true" })*@
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">AWB No</label>
                        @Html.TextBoxFor(model => model.ConsignmentNoNote, new { @class = "form-control" })
                    </div>
                </div>
                <div class="row no-margin">
                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Rent </label>

                        @Html.TextBoxFor(model => model.Rent, new { @onchange = "setNumberDecimal(this)", @onkeypress = "return isNumberKey(event)" ,@class = "form-control textright", @required = "true" })
                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Currency</label>
                        @Html.DropDownListFor(model => model.CurrencyIDRent, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control", @required = "true" })

                    </div>

                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Other Charge Amount</label>
                        @Html.TextBoxFor(model => model.OtherCharges, new { @class = "form-control text-right", @onchange = "setNumberDecimal(this)" })
                    </div>

                    @*<div class="col-md-3 form-group">
            <label class="headinglabel required">Currency</label>

            @Html.DropDownListFor(model => model.CurrencyRent, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })
        </div>*@

                    <div class="col-md-3 form-group">
                        <label class="headinglabel required">Rent Account Head(Dr.)</label>
                        <input type="text" id="RentAcHead" name="RentAcHead" class="form-control" required />
                        @Html.HiddenFor(model => model.RentAcHeadID)

                    </div>
                    <div class="col-md-3 form-group">
                        <label class="headinglabel">Remark</label>

                        @Html.TextAreaFor(model => model.TDRemarks, new { @class = "form-control" })
                    </div>
                    <div class="col-md-3 form-group">
                        <div class="checkboxdesign text-right" style="float:right">
                            <input type="checkbox" id="chkPaymentDetail" onclick="checkpayment()" /> &nbsp
                            <label class="headinglabel" style="color:#07a7e3!important;padding-left: 0!important">Add Cash/Bank Payment Details</label>
                        </div>
                        </div>
                    </div>
                    <div id="divpayment" class="hide">
                        <div class="row no-margin">
                            <div class="col-md-12">
                                <div class="flexTitle">
                                    <h3 style="color: white">Payment Details</h3>

                                </div>
                                <hr />
                            </div>

                        </div>
                        <div class="row no-margin">


                            <div class="col-md-3 form-group">
                                <label class="headinglabel">Payment Type</label>
                                <select class="form-control" id="StatusPaymentMode" name="StatusPaymentMode">
                                    <option value="">Select</option>
                                    <option value="C">Cash</option>
                                    <option value="B">Bank</option>
                                </select>
                                @*@Html.TextBoxFor(model => model.StatusPaymentMode, new { @class = "form-control", @maxlength = "2" })*@
                            </div>

                            <div class="col-md-3 form-group">
                                <label class="headinglabel required">Payment Account Head (Cr)</label>
                                <input type="text" class="form-control" id="PaymentHead" name="PaymentHead" required />
                                @Html.HiddenFor(model => model.PaymentHeadID)

                            </div>

                            <div class="col-md-3 form-group">
                                <label class="headinglabel required">Control A/c (Dr)</label>
                                <input type="text" class="form-control" id="TDcontrolAcHead" name="TDcontrolAcHead" required />
                                @Html.HiddenFor(model => model.TDcontrolAcHeadID)

                                @*@Html.DropDownListFor(model => model.TDcontrolAcHeadID, new SelectList(@ViewBag.Achead, "AcHeadID", "AcHead1"), "Select", new { @class = "form-control" })*@
                            </div>

                            <div class="col-md-3 form-group">
                                <label class="headinglabel required">Amount</label>

                                @Html.TextBoxFor(model => model.Amount, new { @class = "form-control textright", @onchange = "setNumberDecimal(this)" , @onkeypress = "return isNumberKey(event)" })
                            </div>

                            <div class="col-md-3 form-group">
                                <label class="headinglabel required">Currency</label>
                                @Html.DropDownListFor(model => model.PaymentCurrencyID, new SelectList(@ViewBag.Currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })

                            </div>

                            <div class="col-md-3 form-group">
                                <label class="headinglabel">Payment Remark</label>

                                @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control" })
                            </div>
                            <div class="col-md-3 form-group">
                                <label class="headinglabel">Cheque No.</label>
                                @Html.TextBoxFor(model => model.ChequeNo, new { @class = "form-control", @readonly = "readonly" })
                            </div>
                            <div class="col-md-3 form-group">
                                <label class="headinglabel">Cheque Date</label>
                                @Html.TextBoxFor(model => model.ChequeDate, new { @class = "form-control", @readonly = "readonly" })
                            </div>
                        </div>
                    </div>
                    <div class="row no-margin" style="padding-top: 10px">

                        <div class="col-md-12 btn-right">

                            <input type="button" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;
                            <a href='@Url.Action("Index", "DailyTrips")' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                        </div>
                    </div>



</form>
        </div>
    
    </section>


</body>
</html>

<script type="text/javascript">
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

      function setNumberDecimal(obj) {

       $(obj).val(parseFloat($(obj).val()).toFixed(@_decimal));
    }
    function setVehicleType(obj) {
        debugger;

        if ($("#chkHired").is(':checked')) {
            $('#VehicleType').val('H');            
            $('#divdriver').removeClass('hide');
            $('#divfwd').addClass('hide');
            //$("#chkOwn").removeAttr('checked');
            //$("#chkContract").removeAttr('checked');
            //$("#chkForward").removeAttr('checked');
        }
        else if ($("#chkOwn").is(':checked')) {
            $('#VehicleType').val('O');
            $('#divfwd').addClass('hide');
            $('#divdriver').removeClass('hide');
        }
        else if ($("#chkContract").is(':checked')) {
            $('#VehicleType').val('C');
            $('#divfwd').addClass('hide');
            $('#divdriver').removeClass('hide');
        }
        else if ($("#chkForward").is(':checked')) {
            $('#VehicleType').val('F');
            $('#divfwd').removeClass('hide');
            $('#divdriver').addClass('hide');            
            //$("#chkHired").removeAttr('checked');
            //$("#chkOwn").removeAttr('checked');
            //$("#chkContract").removeAttr('checked');
        }
    }
    function checkpayment() {
        var paydetail = $("#chkPaymentDetail").is(':checked'); 
        if (paydetail) {
            $('#divpayment').removeClass('hide');
        }
        else {
            $('#divpayment').addClass('hide');
        }
    }
    $(document).ready(function () {
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth() + 1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();
        $('#TDDate').val(reqdate);


        $("#RouteID").change(function () {
            $.ajax({
                type: "Get",
                url: "/DailyTrips/GetRouteDetail",
                datatype: "Json",
                data: { 'RouteId': $('#RouteID').val() },
                success: function (response) {
                    $("#OriginName").val(response.Origin);
                    $("#DestinationName").val(response.Destination);
                }
            });

        });
        $("#StatusPaymentMode").change(function () {
            if ($("#StatusPaymentMode").val() == "C") {
                $("#ChequeNo").val('');
                $("#ChequeDate").val('');
                $("#ChequeNo").attr('readonly', 'readonly');
                $("#ChequeDate").attr('readonly', 'readonly');
            }
            else {
                $("#ChequeNo").removeAttr('readonly');
                $("#ChequeDate").removeAttr('readonly');
            }
        });

        if ('@Model.TruckDetailID' > 0) {


            $(".tablink").prop('disabled', true);
            $("#RegNo").val('@Model.RegNo');
            $("#RouteID").val('@Model.RouteID');
            $("#TypeOfLoad").val('@Model.TypeOfLoad');
            $("#CurrencyIDRent").val('@Model.CurrencyIDRent');
            //$("#CurrencyRent").val('@Model.CurrencyRent');
            $("#PaymentCurrencyID").val('@Model.PaymentCurrencyID');
            $("#StatusPaymentMode").val('@Model.StatusPaymentMode'.trim());
            $("#OriginCity").val('@Model.OriginCity'.trim());
            $("#OriginCountry").val('@Model.OriginCountry'.trim());


            if ('@Model.VehicleType' == 'O') {
                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetAcHeadsById",
                    datatype: "Json",
                    data: { acheadid: '@Model.RentAcHeadID', paymentheadid: '@Model.PaymentHeadID', ControlAc: '@Model.TDcontrolAcHeadID' },
                    success: function (data) {
                        $("#ORentAcHead").val(data.Achead);
                        $("#OPaymentHead").val(data.PaymentAc);
                        $("#OTDcontrolAcHead").val(data.controlac);
                    }
                });
                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetDriverById",
                    datatype: "Json",
                    data: { DriverId: '@Model.DriverID' },
                    success: function (data) {
                        $("#ODriverName").val(data.Driver);

                    }
                });
            } else if ('@Model.VehicleType' == 'H') {
                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetAcHeadsById",
                    datatype: "Json",
                    data: { acheadid: '@Model.RentAcHeadID', paymentheadid: '@Model.PaymentHeadID', ControlAc: '@Model.TDcontrolAcHeadID' },
                    success: function (data) {
                        $("#RentAcHead").val(data.Achead);
                        $("#PaymentHead").val(data.PaymentAc);
                        $("#TDcontrolAcHead").val(data.controlac);
                    }
                });
                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetDriverById",
                    datatype: "Json",
                    data: { DriverId: '@Model.DriverID' },
                    success: function (data) {
                        $("#DriverName").val(data.Driver);

                    }
                });
            }
            else if ('@Model.VehicleType' == 'C') {
                $("#DocumentID").val('@Model.DocumentID');

                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetContractAcHeadsById",
                    datatype: "Json",
                    data: { paymentheadid: '@Model.PaymentHeadID', ControlAc: '@Model.TDcontrolAcHeadID' },
                    success: function (data) {
                        $("#CPaymentHead").val(data.PaymentAc);
                        $("#CTDcontrolAcHead").val(data.controlac);
                    }
                });
                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetDriverById",
                    datatype: "Json",
                    data: { DriverId: '@Model.DriverID' },
                    success: function (data) {
                        $("#DriverName").val(data.Driver);

                    }
                });
            }
            else if ('@Model.VehicleType' == 'F') {

                $.ajax({
                    type: "POST",
                    url: "/DailyTrips/GetFwdAcHeadsById",
                    datatype: "Json",
                    data: { Acheadid: '@Model.RentAcHeadID' },
                    success: function (data) {
                        $("#FRentAcHead").val(data.controlac);
                    }
                });

            }
        }
        $('#TDDate').datetimepicker({
            maxDate: '@_maxdate',
            minDate: '@_mindate', format: 'DD-MM-YYYY HH:mm'
        });
        $('#ChequeDate').datetimepicker({
            format: 'DD-MM-YYYY'
        });


        $("#DriverName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/Drivers',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.DriverName,
                                value: val.DriverName,
                                Id: val.DriverID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#DriverName').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#DriverName").val(i.item.label);
                $('#DriverID').val(i.item.Id);
            },

        });

        $("#RegNo").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/VehicleRegNo',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.RegistrationNo,
                                value: val.RegistrationNo,
                                Id: val.VehicleID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $("#RegNo").val(ui.item.label);
                $('#VehicleID').val(ui.item.Id);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#RegNo").val(i.item.label);
                $('#VehicleID').val(i.item.Id);
            },

        });
        $("#RentAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#RentAcHead').val(ui.item.value);
                $('#RentAcHeadID').val(ui.item.Id);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#RentAcHead").val(i.item.label);
                $('#RentAcHeadID').val(i.item.Id);
            },

        });

        $("#OtherChargesAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term, type: ''
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $("#OtherChargesAcHead").val(ui.item.label);
                $('#OtherChargesAcHeadID').val(ui.item.Id);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#OtherChargesAcHead").val(i.item.label);
                $('#OtherChargesAcHeadID').val(i.item.Id);
            },

        });
        $("#PaymentHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term, type: $("#StatusPaymentMode").val()
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#PaymentHead').val(ui.item.value);
                $('#PaymentHeadID').val(ui.item.Id);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#PaymentHead").val(i.item.label);
                $('#PaymentHeadID').val(i.item.Id);
            },

        });
        $("#TDcontrolAcHead").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/DailyTrips/AcHead',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.AcHead,
                                value: val.AcHead,
                                Id: val.AcHeadID,
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#TDcontrolAcHead').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#TDcontrolAcHead").val(i.item.label);
                $('#TDcontrolAcHeadID').val(i.item.Id);
            },

        });
        $('#FormHired').validate({ // initialize the plugin
            rules: {
                TDDate: {
                    required: true,

                },

                DriverID: {
                    required: true,

                },
                //RegNo: {
                //    required: true,

                //},
                OriginName: {
                    required: true,

                },
                DestinationName: {
                    required: true,

                },
                TypeOfLoad: {
                    required: true,

                },
                Rent: {
                    required: true,

                },
                CurrencyIDRent: {
                    required: true,

                },
                CurrencyRent: {
                    required: true,

                },
                RentAcHead: {
                    required: true,

                },
                PaymentHead: {
                    required: true,

                },
                TDcontrolAcHead: {
                    required: true,

                },
                CurrencyAmount: {
                    required: true,

                },
                PaymentCurrencyID: {
                    required: true,

                },
            },
        });
        $("#btnsave").click(function () {
            debugger;
            if ($('#RentAcHeadID').val() == 0 || $('#RentAcHeadID').val() == "")
            {
                $('#RentAcHead').val('');
            };
            if ($('#FormHired').valid()) {
                
                var data = $('#FormHired').serialize();
                console.log(data);
                $.ajax({
                    type: 'POST',
                    url: "/DailyTrips/SaveHiredVehicle",
                    data: data,
                    success: function (response) {
                        if (response.success == true) {
                            $.notify("Submitted Successfully!", "success");
                            location.href = "/DailyTrips/Index";
                        } else {
                            $.notify(response.message, "error");
                        }
                    }
                });

            }
        });


        //

        $('#FormFwd').validate({ // initialize the plugin
            rules: {
                FTDDate: {
                    required: true,

                },
                PhoneNumber: {
                    required: true,

                },
                ForwardAgentID: {
                    required: true,

                },
                RouteID: {
                    required: true,

                },
                OriginCountry: {
                    required: true,

                },
                OriginCity: {
                    required: true,

                },
                FOriginName: {
                    required: true,

                },
                FRentAcHead: {
                    required: true,

                },

            },
        });


    });






</script>
