@model LTMSV2.Models.QuickAWBVM
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
    var _decimal = Convert.ToInt32(@Session["Decimal"].ToString());
    var _mindate = @LTMSV2.Models.CommanFunctions.GetMinFinancialDate(); //'2020/01/01',
    var _maxdate = @LTMSV2.Models.CommanFunctions.GetMaxFinancialDate();
    int otherchargecount = 0;
    
    
}
<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />
<style>
        /*.ui-autocomplete {
    z-index: 100;
    }*/

    .deleteallocrow {
        color: red !important;
    }
    .fa fa-times {
        
    }
    .ui-autocomplete {
        position: absolute;
        cursor: default;
        z-index: 1001 !important
    }
        .autocomplete:focus{
           background-color: #dbffcf;
        }
        .form-control{
            height:30px!important;
        }
    .bg_box,.bg_box1{
           
            padding: 5px 0;
            padding-bottom: 20px;
        }
      /*.detailBox:nth-of-type(2) .bg_box{
            background: #f3fef0;
        }*/
        .charges{
            border:1px solid #ccc;
            width: 100%;
        }
        .charges td label{
            color:#0997d0!important;
            font-weight: bold;
        }
        .charges td,.charges th{
            padding:5px;
            border-right: 1px solid #ccc;
            border-bottom: 1px solid #ccc;
        }
       
        .form-control{
            border-radius: 5px!important;
        }
        .flexTitle{
            display: flex;
            justify-content: space-between;
        }
        h3{
            margin:5px 0;
            font-size: 19px;
        }
        hr{
            margin-top:5px;
            margin-bottom: 5px;
            font-size:20px;
        }
        #DeleteAllocationRow{
            color:#dd4b39!important;
        }
        #AllocationClose{
            color: #fff;
            background-color: #3e3f3f !important;
            border-radius: 5px;
            border: 0;
            font-size: 14px;
        }
</style>
<script type="text/javascript">

    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

    var consignorlocation, consignorCity, consignorCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeLocationName'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);


        autocompleteCity = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCityName'), { types: ['geocode'] });

        autocompleteCountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCountryName'), { types: ['geocode'] });


        consignorlocation = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorLocationName'), { types: ['geocode'] });

        consignorCity = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorCityName'), { types: ['geocode'] });


        consignorCountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsignorCountryName'), { types: ['geocode'] });

        consignorlocation.addListener('place_changed', fillInAddress1);


    }

    function fillInAddress() {
        
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#ConsigneeCityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#ConsigneeCountryName').val(component.long_name);
                }

                if ($('#ConsigneeCityName').val() == $('#ConsignorCityName').val() || ($('#ConsigneeCountryName').val() == $('#ConsignorCountryName').val())) {
                    $('#MovementTypeID').val(1);
                    $('#materialcost').removeAttr('Disabled');
                }
                else if ($('#ConsigneeCountryName').val() != $('#ConsignorCountryName').val()) {
                    $('#MovementTypeID').val(2);
                    $('#materialcost').val(0);
                    $('#materialcost').attr('Disabled', 'disabled');
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }


    function fillInAddress1() {
        
        // Get the place details from the autocomplete object.
        var place = consignorlocation.getPlace();
        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {

                    $('#ConsignorCityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#ConsignorCountryName').val(component.long_name);
                }
            });
        });

    }

    function geolocate1() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                consignorlocation.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate1() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                consignorCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate1() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                consignorCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<script type="text/javascript">
    //customer and shipper autocomplete
    $(document).ready(function () {
        function LoadCustomerDetail() {
            if ($('#CustomerID').val() > 0) {
                $.ajax({
                    type: "POST",
                    url: "/PickUpRequest/GetCustomerData",
                    datatype: "Json",
                    data: { id: $('#CustomerID').val() },
                    success: function (data) {                        
                        $("#custcode").val(data.CustCode);
                        $("#Consignor").val(data.CustName);
                        $("#ConsignorContact").val(data.ContactPerson);
                        $("#ConsignorAddress1_Building").val(data.Address1);
                        $("#ConsignorAddress2_Street").val(data.Address2);
                        $("#ConsignorAddress3_PinCode").val(data.Address3);

                        $("#ConsignorPhone").val(data.Phone);
                        $("#ConsignorCountryName").val(data.CountryName);
                        $("#ConsignorCityName").val(data.CityName);
                        $("#ConsignorLocationName").val(data.LocationName);
                        $("#OfficeTimeFrom").val(data.OfficeOpenTime);
                        $("#OfficeTimeTo").val(data.OfficeCloseTime);
                        $("#hdnCustomerType").val(data.CustomerType);

                    }
                });
            }
        }
        function fillcustomerdetail(modeid) {
            $.ajax({
                type: "GET",
                url: "/QuickAWB/GetWalkInCustomer",
                datatype: "Json",
                data: { id: modeid },
                success: function (data) {
                    debugger;
                    if (data.CustomerID == 0) {
                        alert('Predefined Customer Not Found!');
                        $("#CustomerID").val(0);
                        $('#customer').val('');
                    }
                    else {
                        $("#CustomerID").val(data.CustomerID);
                        $('#customer').val(data.CustomerName);
                    }

                }
            });
        }
        $('#PaymentModeId').change(function () {        
            var modeid = $('#PaymentModeId').val();
            if (modeid == 1 || modeid == 2) { //PKP
                $("#customer").attr("readonly", "readonly");
                $("#CustomerandShipperSame").attr("disabled", "disabled");
                fillcustomerdetail(modeid);

            }
            else {
                $('#customer').val('');
                $('#CustomerID').val(0);
                $("#customer").removeAttr("readonly");
                $("#CustomerandShipperSame").removeAttr("disabled", "disabled");
            }
            if (modeid == 1 || modeid == 3) {
                $("#Consignee").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '/QuickAWB/GetReceiverName',
                            datatype: "json",
                            data: {
                                term: request.term
                            },
                            success: function (data) {
                                response($.map(data, function (val, item) {
                                    return {
                                        label: val.Name,
                                        value: val.Name,
                                        ContactPerson: val.ContactPerson,
                                        Address1: val.Address1,
                                        Address2: val.Address2,
                                        Pincode: val.PinCode,
                                        Phone: val.Phone,
                                        CountryName: val.CountryName,
                                        CityName: val.CityName,
                                        LocationName: val.LocationName,

                                    }
                                }))
                            }
                        })
                    },
                    minLength: 1,
                    autoFocus: false,
                    focus: function (event, ui) {
                        $('#Consignee').val(ui.item.value);
                    },
                    select: function (e, i) {
                        e.preventDefault();
                        $("#Consignee").val(i.item.label);
                        $("#ConsigneeContact").val(i.item.ContactPerson);
                        $("#ConsigneeAddress1_Building").val(i.item.Address1);
                        $("#ConsigneeAddress2_Street").val(i.item.Address2);
                        $("#ConsigneeAddress3_PinCode").val(i.item.Pincode);
                        
                        $("#ConsigneePhone").val(i.item.Phone);
                        $("#ConsigneeCountryName").val(i.item.CountryName);
                        $("#ConsigneeCityName").val(i.item.CityName);
                        $("#ConsigneeLocationName").val(i.item.LocationName);

                    },

                });
            }
            else { //code

                $("#Consignee").autocomplete({
                    source: function (request, response) {
                        $.ajax({
                            url: '/QuickAWB/GetReceiverName', //'/QuickAWB/GetConsigneeName',
                            datatype: "json",
                            data: {
                                term: request.term
                            },
                            success: function (data) {
                                response($.map(data, function (val, item) {
                                    return {
                                        label: val.Name,
                                        value: val.Name,
                                        ContactPerson: val.ContactPerson,
                                        Address1: val.Address1,
                                        Address2: val.Address2,
                                        Pincode: val.PinCode,
                                        Phone: val.Phone,
                                        CountryName: val.CountryName,
                                        CityName: val.CityName,
                                        LocationName: val.LocationName,

                                    }
                                }))
                            }
                        })
                    },
                    minLength: 1,
                    autoFocus: false,
                    focus: function (event, ui) {
                        $('#Consignee').val(ui.item.value);
                    },
                    select: function (e, i) {
                        e.preventDefault();
                        $("#Consignee").val(i.item.label);
                        $("#ConsigneeContact").val(i.item.ContactPerson);
                        $("#ConsigneeAddress1_Building").val(i.item.Address1);
                        $("#ConsigneeAddress2_Street").val(i.item.Address2);
                        
                        $("#ConsigneeAddress3_PinCode").val(i.item.Pincode);                        
                        $("#ConsigneePhone").val(i.item.Phone);
                        $("#ConsigneeCountryName").val(i.item.CountryName);
                        $("#ConsigneeCityName").val(i.item.CityName);
                        $("#ConsigneeLocationName").val(i.item.LocationName);

                    },

                });

            }
            //if ($('#CustomerID').val() == 0 && modeid != 1) {
            //    alert("For New Cash Customer....Selected Payment Type is not allowed");
            //    $('#PaymentModeId').val(1).trigger('change');
            //}
            //else {

            //    if ($("#hdnCustomerType").val() == "CS"  && modeid != 1) {
            //        //alert("Not a Credit Customer....Selected Payment Type is not allowed");
            //        alert("For Cash Customer....Selected Payment Type is not allowed");
            //        $('#PaymentModeId').val(1).trigger('change');
            //    }
            //}

        });


        $("#customer").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/QuickAWB/GetCustomerName',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            console.log(val);
                            return {
                                label: val.CustomerName,
                                value: val.CustomerName,
                                CustomerId: val.CustomerID,
                                type: val.CustomerType
                            }
                        }))
                    }
                })
            },
            minLength: 1,
            autoFocus: false,
            focus: function (event, ui) {
                $('#customer').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#customer").val(i.item.label);
                $('#CustomerID').val(i.item.CustomerId);
                $('#hdnCustomerType').val(i.item.type);
            },

        });

        //checkbox check to load credit customer address for shipper
        $("#CustomerandShipperSame").click(function () {
            if ($("#CustomerandShipperSame").is(':checked')) {
                $("#shippername").val($('#customer').val());
                $("#shippername").attr('readonly', 'readonly');
                LoadCustomerDetail();
            }
            else {

                $("#shippername").removeAttr('readonly');
                $("#shippername").val('');
                $("#ConsignorContact").val('');
                $("#ConsignorAddress1_Building").val('');
                $("#ConsignorAddress2_Street").val('');
                $("#ConsignorAddress3_PinCode").val('');

                $("#ConsignorPhone").val('');
                $("#ConsignorCountryName").val('');
                $("#ConsignorCityName").val('');
                $("#ConsignorLocationName").val('');
                $("#OfficeTimeFrom").val('');
                $("#OfficeTimeTo").val('');

            }
        });

        $("#shippername").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/QuickAWB/GetShipperName',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.ShipperName,
                                value: val.ShipperName,
                                AcHeadID: val.AcHeadID,
                                ContactPerson: val.ContactPerson,
                                Address1: val.Address1,
                                Address2: val.Address2,
                                Pincode: val.PinCode,
                                Phone: val.Phone,
                                CountryName: val.CountryName,
                                CityName: val.CityName,
                                LocationName: val.LocationName,

                            }
                        }))
                    }
                })
            },
            minLength: 1,            
            autoFocus: false,
            focus: function (event, ui) {
                $('#shippername').val(ui.item.value);
            },
            select: function (e, i) {
                e.preventDefault();
                $("#shippername").val(i.item.label);
                $("#ConsignorContact").val(i.item.ContactPerson);
                $("#ConsignorAddress1_Building").val(i.item.Address1);
                $("#ConsignorAddress2_Street").val(i.item.Address2);
              
                $("#ConsignorAddress3_PinCode").val(i.item.Pincode);

                $("#ConsignorPhone").val(i.item.Phone);
                $("#ConsignorCountryName").val(i.item.CountryName);
                $("#ConsignorCityName").val(i.item.CityName);
                $("#ConsignorLocationName").val(i.item.LocationName);

            },

        });
    });

</script>
<script type="text/javascript">
    function noaction() {
        alert("Page under development!");
    }
    var consigneenames = [];
    var customernames = [];
     function setTwoNumberDecimal(obj) {

       $(obj).val(parseFloat($(obj).val()).toFixed(@_decimal));
    }
    function setThreeNumberDecimal(obj) {

        if ($(obj).val() == '') {
            $(obj).val(0);
        }
        else {
            $(obj).val(parseFloat($(obj).val()).toFixed(3));
        }

}
    function isNumberKey(evt)
       {
          var charCode = (evt.which) ? evt.which : evt.keyCode;
          if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
             return false;

          return true;
    }
    function isNumberKey1(evt)
       {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
          //if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57)) {
          if (charCode!=8 && charCode!=0 && (charCode < 48 || charCode > 57))
             return false;

          return true;
    }
    function AddCharge() {        
        alert($('#OtherChargeID').val());
        alert($('#txtotherchargeamt_99').val());
    }
    function UpdateCharge(index) {
        alert($('#othercharges_' + index + '__OtherChargeID').val());
        alert($('#txtotherchargeamt_'+index).val());


    }
  
    function ShowOtherChargesModal() {
        $('#OtherChargesModal').modal('show');
    }
    function ShowStatusModal() {

          $.ajax({
            type: "POST",
            url: "/QuickAWB/GetActiveStatus",
            datatype: "Json",
            data: { 'InScanID': $('#InScanID').val() },
            success: function (response) {
                debugger;
                console.log(response);
                var _detail = response.data;
              //  console.log(_detail);
                //$('#ChangeStatusTypeId').val(0).tigger('change');
                $('#ChangeStatusTypeId').val(_detail.StatusTypeID).trigger('change');
                //if (_detail.CourierStatusID != null)
                //$('#ChangeCourierStatusId').val(_detail.CourierStatusID);

                 $('#StatusModal').modal('show');

            }
        });

    }
     function GetConsigneeDetail() {

         $.ajax({
             type: "POST",
             url: "/PickUpRequest/GetConsigneeData",
             datatype: "Json",
             data: { consigneename: $('#Consignee').val() },
                success: function (data) {
                    if (data != null && data.CustName!=null) {
                        $("#Consignee").val(data.CustName);
                        $("#ConsigneeContact").val(data.ContactPerson);
                         $("#ConsigneeAddress1_Building").val(data.Address1);
                        $("#ConsigneeAddress2_Street").val(data.Address2);
                       $("#ConsigneeAddress3_PinCode").val(data.Address3);
                        $("#ConsigneePhone").val(data.Phone);
                        $("#ConsigneeCountryName").val(data.CountryName);
                        $("#ConsigneeCityName").val(data.CityName);
                        $("#ConsigneeLocationName").val(data.LocationName);




                    }
                    else {
                        debugger;
                         console.log($('#Consignee').val());
                        $("#ConsigneeContact").val('');
                        $("#ConsigneeAddress1_Building").val('');
                        $("#ConsigneeAddress2_Street").val('');
                        $("#ConsigneeAddress3_PinCode").val('');
                        $("#ConsigneePhone").val('');
                        $("#ConsigneeCountryName").val('');
                        $("#ConsigneeCityName").val('');
                        $("#ConsigneeLocationName").val('');
                    }
                }
            });

    }

    function ShowNotification() {
        GetCustomerNotification();
        $('#CustomerNotifiyModal').modal('show');

    }
    function ShowStaffNotes() {
        GetStaffNotes();
        $('#StaffNotesModal').modal('show');

    }

    function savestaffnotes() {

        var obj = {
            'NotesId': $('#hdnStaffNotesId').val(),
            'InScanId': $('#InScanID').val(),
            'Notes': $('#staffnotes').val()
        }

        $.ajax({
            type: "POST",
            url: "/QuickAWB/SaveStaffNotes",
            datatype: "Json",
            data: obj,
            success: function (response) {
                if (response.status == "ok") {
                    $.notify("Notes Updated Successfully!", "success");
                    GetStaffNotes();
                    $('#staffnotes').val('');
                }
            }
            });
    }

    function GetStaffNotes() {
        $.ajax({
            type: "Get",
            url: "/QuickAWB/GetStaffNotes",
            datatype: "Json",
            data: { InScanId: $('#InScanID').val() },
                success: function (response) {
                    if (response.status == "ok") {
                         $("#notesdetailsbody").html('');
                        $.each(response.data, function (index, item) {
                            debugger;
                            var myDate = new Date(item.EntryDate.match(/\d+/)[0] * 1);
                            var cmon = myDate.getMonth() + 1;
                            var entrydate = myDate.getDate() + "-" + cmon + "-" + myDate.getFullYear() + ' ' + myDate.getHours() + ':' + myDate.getMinutes();

                            // <td><a notesid="' + item.NotesId + '" href="javascript:void(0);" class="rem">Remove</a></td>
                            $("#notesdetailsbody").append('<tr notesid="' + item.NotesId + '"><td>' + (parseInt(index) + 1) + '</td><td>' + item.Notes + '</td><td>' + entrydate + '</td><td>' + item.EmployeeName + '</td></tr>');
                        });
                    }
                }
            });
    }

     function savecustomernotification() {

        var obj = {
            'NotificationId': $('#hdnNotificationId').val(),
            'InScanId': $('#InScanID').val(),
            'NotifyByEmail': $('#Email').val(),
            'NotifyBySMS': $('#Email').val(),
            'NotifyByWhatsApp': $('#WhatsApp').val(),
            'MessageText': $('#notifymessage').val(),
            'CustomerEmail': $('#txtcustomeremail').val(),
            'CustomerName': $('txtcustomername').val(),
            'AWBNo': $('#ConsignmentNo').val()
        }

        $.ajax({
            type: "POST",
            url: "/QuickAWB/SaveCustomerNotification",
            datatype: "Json",
            data: obj,
            success: function (response) {
                if (response.status == "ok") {
                    $.notify("Notification Updated Successfully!", "success");
                    GetCustomerNotification();
                    $('#notifymessage').val('');
                }
            }
            });
    }
    function GetCustomerNotification() {
        $.ajax({
            type: "Get",
            url: "/QuickAWB/GetCustomerNotification",
            datatype: "Json",
            data: { InScanId: $('#InScanID').val() },
                success: function (response) {
                    if (response.status == "ok") {
                        $('#txtcustomername').val(response.customername);
                        $('#txtcustomeremail').val(response.custemail);
                         $("#notificationdetailsbody").html('');
                        $.each(response.data, function (index, item) {
                            debugger;
                            var myDate = new Date(item.EntryDate.match(/\d+/)[0] * 1);
                            var cmon = myDate.getMonth() + 1;
                            var entrydate = myDate.getDate() + "-" + cmon + "-" + myDate.getFullYear() + ' ' + myDate.getHours() + ':' + myDate.getMinutes();

                            // $('#details tr').length - 1;
                            //<td><a notesid="' + item.NotificationId + '" href="javascript:void(0);" class="rem">Remove</a></td>
                            $("#notificationdetailsbody").append('<tr notificationid="' + item.NotificationId + '"><td>' + (parseInt(index) + 1) + '</td><td>' + item.MessageText + '</td><td>' + entrydate + '</td><td>' + item.EmployeeName + '</td></tr>');
                        });
                    }
                }
            });
    }

    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#ConsignmentNo").focus();
        
        $("#OtherChargeName").autocomplete({
            source: function (request, response) {
                $.ajax({
                    url: '/QuickAWB/GetOtherChargeAll',
                    datatype: "json",
                    data: {
                        term: request.term
                    },
                    success: function (data) {
                        response($.map(data, function (val, item) {
                            return {
                                label: val.OtherCharge1,
                                value: val.OtherCharge1,
                                OtherChargeID: val.OtherChargeID,
                                AcHeadID: val.AcHeadID
                            }
                        }))
                    }
                })
            }, minLength: 1,
            autoFocus: true,
            select: function (e, i) {
                e.preventDefault();
                $("#OtherChargeName").val(i.item.label);
                $('#OtherChargeID').val(i.item.OtherChargeID);
                $('#OtherChargeAcHeadID').val(i.item.AcHeadID);
            }
        });
        $(".Allocate").on("click", function () {
           
            $('#popup').modal('show');
            //$('#popupbackground').show();
        });
        

        $("#AllocationClose").on("click", function () {
            $('#popup').modal('hide');
            //$('#popupbackground').hide();
        });
      

        function CalcTotal() {
            var x = $("#CourierCharge").val();
            //var y = $("#PackingCharge").val();
            var z = $("#OtherCharge").val();
            //var a = $("#CustomCharge").val();
            var tot = parseFloat(x) + parseFloat(z); // + parseFloat(a); parseFloat(y)

            $("#totalCharge").val(tot.toFixed(2));
        }

        $("#CourierCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#PackingCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#OtherCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });
        $("#CustomCharge").blur(function () {
            if ($(this).val() == null) {
                $(this).val('0.00');
            }
            CalcTotal();
        });

        $('#MovementTypeID').change(function () {
            debugger;
            var movetype = $('#MovementTypeID option:selected').text();
            if (movetype == 'Domestic') {
                $('#materialcost').removeAttr('Disabled');
            }
            else {
                $('#materialcost').val(0);
                $('#materialcost').attr('Disabled', 'disabled');
            }

        });

        $('#Weight').change(function () {
            debugger;
            var weightval = parseFloat($('#Weight').val());
            if (weightval > 30 && $('#ParcelTypeID').val() != 4) {
                if ($('#ParcelTypeID').val() == 0) {
                    $('#ParcelTypeID').val(4);
                }
                else {
                    alert('Weight is only less than 30kg to this parcel type!');
                }
            }
            else if (weightval <= 30 && $('#ParcelTypeID').val() == 4) {
                alert('Weight should be above than 30kg to this selcted parceltype!');
            }

        });

        $('#ConsigneeCityName').change(function () {
            if ($('#ConsigneeCityName').val() == $('#ConsignorCityName').val() || ($('#ConsigneeCountryName').val() == $('#ConsignorCountryName').val()))
                 {
                $('#MovementTypeID').val(1);
                $('#materialcost').removeAttr('Disabled');
                }
                else if ($('#ConsigneeCountryName').val() != $('#ConsignorCountryName').val()) {
                $('#MovementTypeID').val(2);
                $('#materialcost').val(0);
                $('#materialcost').attr('Disabled', 'disabled');
            }

        });

         $('#ConsigneeCountryName').change(function () {
            if ($('#ConsigneeCityName').val() == $('#ConsignorCityName').val() || ($('#ConsigneeCountryName').val() == $('#ConsignorCountryName').val()))
                 {
                $('#MovementTypeID').val(1);
                $('#materialcost').removeAttr('Disabled');
                }
                else if ($('#ConsigneeCountryName').val() != $('#ConsignorCountryName').val()) {
                $('#MovementTypeID').val(2);
                $('#materialcost').val(0);
                $('#materialcost').attr('Disabled', 'disabled');
             }

         });





        $('#ChangeStatusTypeId').change(function () {
            debugger;
            var pcourierstatusid = $('#CourierStatusId').val();
            if (pcourierstatusid == null)
                pcourierstatusid = 0;

            $.ajax({
                type: "POST",
                url: "/QuickAWB/GetStatus",
                datatype: "Json",
                data: { 'StatusTypeId' : $('#ChangeStatusTypeId').val() },
                success: function (response) {
                    debugger;
                    //$('#CourierStatusId').select2("destroy");
                     //$("#ChangeCourierStatusId").select2('destroy');
                     $('#ChangeCourierStatusId').html('');
                    var opthtml = '<option value="0">Select</option>';
                    $(response.data).each(function (index, item) {
                        if (item.id == pcourierstatusid && pcourierstatusid!=0) {
                               opthtml += '<option  value="' + item.id + '">' + item.text + '</option>';
                        }
                        else {
                            opthtml += '<option value="' + item.id + '">' + item.text + '</option>';
                        }
                    });
                    console.log(opthtml);
                    $('#ChangeCourierStatusId').html(opthtml);
                    $('#ChangeCourierStatusId').val($('#CourierStatusId').val()).trigger('change');

                    //$('#CourierStatusId').val(response.data[2].id);
                  //  $('#ChangeCourierStatusId').select2();
                    //$('#CourierStatusId').val("2").trigger('change');
                    //$('#CourierStatusId').select2('data', response.data[2]);
                    //$('#CourierStatusId').val('2').text(response.data[2].text);


                    // $('#ChangeCourierStatusId').select2({
                    //        width: '100%',
                    //        allowClear: true,
                    //        multiple: false,
                    //        placeholder: "Select Status"
                    //        });

                    }
               });
           });
        $('#btnsavestatus').click(function () {

             var statusobj = {
                InScanID: $('#InScanID').val(),
                StatusTypeID: $('#ChangeStatusTypeId').val(),
                CourierStatusID: $('#ChangeCourierStatusId').val(),
                CourierStatusText: '' //$("#ChangeCourierStatusId option:selected").text()
            };

             $.ajax({
                type: "POST",
                url: "/QuickAWB/SaveStatus",
                datatype: "Json",
                data: statusobj,
                success: function (response) {
                    debugger;
                    if (response.status == "ok")
                    {
                        var statustype = $("#ChangeStatusTypeId option:selected").text();
                        var statustext = $("#ChangeCourierStatusId option:selected").text();
                        $('#StatusTypeId').val($('#ChangeStatusTypeId').val());
                        $('#CourierStatusId').val($('#ChangeCourierStatusId').val());
                        $('#h4statustype').html(statustype);
                        $('#h4courierstatus').html(response.statustext);
                        $.notify("Status Updated Successfully!", "success");
                    }
                    else
                    {
                            $.notify("Save Failed :" + data, "warning");
                    }

                    $('#StatusModal').modal('hide');

                }
            });


        });

        $("#ConsignmentNo").keyup(function () {
            $('#h2awb').html('<strong>' + $('#ConsignmentNo').val() + '</strong>');
        });
        $('#ConsignmentNo').change(function () {
             $.ajax({
                    type: "POST",
                    url: "/QuickAWB/GetAWB",
                    datatype: "Json",
                    data: { id: $("#ConsignmentNo").val() },
                    success: function (data) {
                        if (data.Exist == 0) {
                            $("#IsAvailable").val(0);
                        }
                        else {
                             $("#IsAvailable").val(1);
                            alert("AWB Already Exist..!");
                            $('#ConsignmentNo').val('');
                            $('#ConsignmentNo').focus();
                        }

                    }
                });
        })
        $("#btnsave").click(function () {
            debugger;
            var fullform = $('#quickAWB').valid();
            console.log(fullform);
            if ($("#ConsignmentNo").val() != "") {
                $.ajax({
                    type: "POST",
                    url: "/QuickAWB/GetAWB",
                    datatype: "Json",
                    data: { id: $("#ConsignmentNo").val() },
                    success: function (data) {
                        if (data.Exist == 0) {
                            $("#IsAvailable").val(0);
                        }
                        else {
                            $("#IsAvailable").val(1);
                        }

                    }
                });
            }
            if ($("#IsAvailable").val() == 1) {
                alert("AWB Already Exist..!");
                $('#ConsignmentNo').focus();
                return false;
            }
            else {

                var Weight = $("#Weight").val();

                if (Weight != "") {
                    var weightval = parseFloat($('#Weight').val());
                    if (weightval == 0) {
                        $("#validations").show();
                        return false;
                    }
                    else if (weightval > 30 && $('#ParcelTypeID').val() != 4) {
                        alert('Invalid Parcel Type,Weight is only less than 30kg!');
                        return false;
                    }
                    else if (weightval <= 30 && $('#ParcelTypeID').val() == 4) {
                        alert('Weight should be above than 30kg to this selcted parceltype!');

                        return false;
                    }
                    else {
                        $("#validations").hide();
                        return true;
                    }
                }
            }
                //else {
                //    $("#validations").hide();
                //    return true;
                //}

        });


        $("#EnquiryNo").change(function () {
            //$("#origincity").empty();
            //$('#origincity').append('<option value="0">Select</option>');

            //$("#originlocation").empty();
            //$('#originlocation').append('<option value="0">Select</option>');
            
            if ($('#EnquiryNo').val() == 0)
                $('#InScanID').val(0);

            $.ajax({
                type: "POST",
                url: "/QuickAWB/GetCustomerDataByNO",
                datatype: "Json",
                data: { id: $('#EnquiryNo').val() },
                success: function (data) {
                    if (data.Exist == 1) {
                        debugger;
                        $('#ConsignmentNo').val(data.AWBNo);
                         $('#h2awb').html('<strong>' + $('#ConsignmentNo').val() + '</strong>');
                        $("#InScanID").val(data.InScanID);
                        $("#CustomerID").val(data.CustomerID);
                        $("#Weight").val(data.Weight);
                        $("#ConsigneeCountryName").val(data.ConsigneeCountryName);
                        $("#ConsigneeCityName").val(data.ConsigneeCityName);

                        $("#ConsignorCountryName").val(data.ConsignorCountryName);
                        $("#ConsignorCityName").val(data.ConsignorCityName);

                        $("#CourierType").val(data.DescriptionID);
                        $("#ConsignorContact").val(data.ConsignorContact);
                        $("#ConsigneeContact").val(data.ConsigneeContact);
                        $("#Consignor").val(data.Consignor);
                        $("#Consignee").val(data.Consignee);
                        $("#ConsignorAddress1_Building").val(data.ConsignorAddress1_Building);
                        $("#ConsignorAddress2_Street").val(data.ConsignorAddress2_Street);
                        $("#ConsignorAddress3_PinCode").val(data.ConsignorAddress3_PinCode);

                        $("#ConsigneeAddress1_Building").val(data.ConsigneeAddress1_Building);
                        $("#ConsigneeAddress2_Street").val(data.ConsigneeAddress2_Street);
                        $("#ConsigneeAddress3_PinCode").val(data.ConsigneeAddress3_PinCode);

                        $("#ConsigneePhone").val(data.ConsigneePhone);
                        $("#ConsignorPhone").val(data.ConsignorPhone);

                        $("#ConsignorLocationName").val(data.ConsignorLocationName);
                        $("#autocomplete").val(data.ConsigneeLocationName);
                        $('#PickedBy').val(obj.CollectedEmpID);
                        //$("#ConsigneeCountryName").val(data.ConsigneeCountryName);
                        //$("#ConsigneeCityName").val(data.ConsigneeCityName);




                        //BindCity(data.CityID);




                    }
                    else {
                        alert("Data Not Found");
                    }
                }

            });
        });

        
        $(function () {
            $('#TransactionDate').datetimepicker({
                maxDate:'@_maxdate',
                minDate: '@_mindate',
                format: 'DD-MM-YYYY HH:mm'
            });
        });
        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth()+1;
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + curr_month + "-" + curr_year + ' ' + d.getHours() + ':' + d.getMinutes();


        var divitems = $('#divcustomer1').find('.form-control');

        if (@ViewBag.EditMode== true) {

             //$('#divcustomer1').find('.form-control').each(function(index,item) {
             //   console.log(item);
             //    $(item).attr('disabled', 'disabled');
             //});

            //$('#divcustomer2').find('.form-control').each(function(index,item) {
            //    console.log(item);
            //     $(item).attr('disabled', 'disabled');
            //});

            //$('#divcustomer3').find('.form-control').each(function(index,item) {
            //    console.log(item);
            //     $(item).attr('disabled', 'disabled');
            //});

             var movetype = $('#MovementTypeID option:selected').text();
            if (movetype == 'Domestic') {
                $('#materialcost').removeAttr('Disabled');
            }
            else {
                $('#materialcost').val(0);
                $('#materialcost').attr('Disabled', 'disabled');
            }

              setTwoNumberDecimal($("#CourierCharge")); //.val('0.00');
            setTwoNumberDecimal($("#PackingCharge")); //.val('0.00');
            setTwoNumberDecimal($("#OtherCharge")); //.val('0.00');
            setTwoNumberDecimal($("#CustomCharge")); //.val('0.00');
            setTwoNumberDecimal($("#totalCharge")); //.val('0.00');
            setTwoNumberDecimal($("#materialcost")); //.val('0.00');
        }
        else {
              $('#TransactionDate').val(reqdate);
         $("#CourierCharge").val('0.00');
        $("#PackingCharge").val('0.00');
        $("#OtherCharge").val('0.00');
        $("#CustomCharge").val('0.00');
            $("#totalCharge").val('0.00');
            $("#PaymentModeId").trigger('change');

        if ( $('#InScanID').val() == "0" || $('#InScanID').val() == 0 || $('#InScanID').val() == null) {
            $('#divsetting').addClass('hide');
            $('#ConsignmentNo').focus();
        }

    }


    });
</script>

<section class="content-header">
    <div class="row">
        <div class="col-md-5 pull-left">
            <h1 class="headingfont">Consignment  - Create</h1>
        </div>
        <div class="col-md-5 pull-right text-right">
            <h2 class="awb" id="h2awb"><strong>@ViewBag.AWBNo</strong></h2>
            @*<h5>Delivered</h5>*@
            <h4 class="text-right" id="h4statustype" style='color:#07a7e3!important;display:inline-block;padding-right:5px;margin:0'>@ViewBag.StatusType</h4>
            <h5 class="" id="h4courierstatus" style='color:red;display:inline-block;'>@ViewBag.CourierStatus</h5>
        </div>

    </div>
    <div class="row">
        <div class="pull-right setting">
            <div class="navbar-custom-menu" id="divsetting">
                <ul class="nav navbar-nav">

                    <!-- User Account Menu -->
                    <li class="dropdown user user-menu">
                        <!-- Menu Toggle Button -->

                        <ul class="dropdown-menu extended logout" style="top:0%!important">
                            <li>
                                <a style="color:#35b8eb;cursor:pointer" onclick="ShowStatusModal()">Change Status</a>
                            </li>
                            <li>
                                <a style="color:#35b8eb;cursor:pointer" href="/QuickAWB/AWBTimeline">Time Line</a>
                            </li>
                            <li><a style="color:#35b8eb;cursor:pointer" href="@Url.Action("AWBPrint", new { id = Model.InScanID })">Print Airway Bill</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="ShowNotification()">Customer Notification</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="ShowStaffNotes()">Staff Notes</a></li>

                            <li><a style="color:#35b8eb;cursor:pointer" href="#divCostUpdate">Cost Update</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" href="@Url.Action("GenerateInvoice", new { id = Model.InScanID })">Generate Invoice</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" href="#divforwardingagent">Assign Forwarding Agent</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="noaction()">Update POD</a></li>
                            <li><a style="color:#35b8eb;cursor:pointer" onclick="noaction()">Export to Excel</a></li>
                        </ul>
                        <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                            <i style="font-size: 30px;color:#35b8eb;padding-top: 11px;" class="fa fa-cog"></i>
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>




<section class="content">

    @using (Html.BeginForm("Create", "QuickAWB", FormMethod.Post, new { @id = "quickAWB" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
        <input type="hidden" id="IsAvailable" value="0" />

        <div class="row no-margin">
            <div class="col-md-2">
                <input type="hidden" id="hdnCustomerType" value="0" />
                @Html.HiddenFor(model => model.InScanID)
                @Html.HiddenFor(model => model.BranchID)
                @Html.HiddenFor(model => model.DepotID)
                @Html.HiddenFor(model => model.AcCompanyID)
                @Html.HiddenFor(model => model.UserID)
                @Html.HiddenFor(model => model.CourierStatusId)
                @Html.HiddenFor(model => model.StatusTypeId)
                <label class="headinglabel required">Consignment No.</label>
                @if (@Model.InScanID == 0)
                {@Html.TextBoxFor(model => model.ConsignmentNo, new { @class = "form-control txttarget", @required = "true", @maxlength = 11 }) }

            else
            {
                @Html.TextBoxFor(model => model.ConsignmentNo, new { @class = "form-control txttarget", @Disabled = "disabled" })
            }

            </div>
            <div class="col-md-2">

                <label class="headinglabel">Transaction Date</label>
                @Html.TextBoxFor(model => model.TransactionDate, new { @class = "form-control", @required = "true" })
                @Html.ValidationMessageFor(model => model.TransactionDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel">Pickup Request No.</label>
                @*@Html.TextBoxFor(model => model.EnquiryNo, new { @class = "form-control" })*@
                @Html.DropDownListFor(model => model.EnquiryNo, new SelectList(@ViewBag.Enquiry, "EnquiryNo", "EnquiryNo"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-md-2">
                <label class="headinglabel required">Payment Mode</label>
                @Html.DropDownListFor(model => model.PaymentModeId, new SelectList(@ViewBag.PaymentMode, "ID", "PaymentModeText"), "Select", new { @class = "form-control", @required = "true" })
            </div>
            <div class="col-md-4">
                 <div class="flexTitle">
                <label class="headinglabel required">Customer</label>
                 <div class="checkboxdesign text-right" style="float:right">
                                    @Html.CheckBox("CustomerandShipperSame", new { @name = "CustomerandShipperSame" }) &nbsp
                                    <label class="headinglabel" style="color:#07a7e3!important;padding-left: 0!important">copy address to shipper</label>
                                </div>
                            </div>
                @Html.HiddenFor(model => model.CustomerID, new { @class = "form-control txttarget" })
                @Html.TextBoxFor(model => model.customer, new { @class = "form-control txttarget", @required = "true" })
                @*<input type="text" id="Consignor" name="Consignor" class="form-control" autocomplete="off" />*@

                @*@Html.DropDownListFor(model => model.CustomerID, new SelectList(@ViewBag.Customer, "CustomerID", "CustomerName"), "Select", new { @class = "form-control" })*@
            </div>
        </div>


        <div class="row no-margin">
            <div class="col-md-12 detailBox" style="padding-top:20px">
                <div class="bg_box">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="flexTitle">
                                <h3 style="color:white; margin-top:10px">CONSIGNOR/SHIPPER DETAILS</h3>

                               
                            </div>

                        </div>
                        <div class="clearfix"></div>

                        <hr />
                    </div>


                    <div class="row no-margin" style="margin-top:10px!important">
                        <div class="col-md-6">
                            <label class="headinglabel required">Name</label>
                            @Html.TextBoxFor(model => model.shippername, new { @class = "form-control txttarget", @required = "true", @style = "", @placeholder = "Shipper Name" })
                        </div>

                        <div class="col-md-6">
                            <label class="headinglabel required">Contact Person</label>
                            @Html.TextBoxFor(model => model.ConsignorContact, new { @class = "form-control txttarget", @required = "true", @placeholder = "Contact Person" })
                            @Html.ValidationMessageFor(model => model.ConsignorContact, "", new { @class = "text-danger", @placeholder = "Contact Person" })
                        </div>
                    </div>
                    <div class="row no-margin" style="padding-top: 10px" id="divcustomer2">

                        <div class="col-md-3">
                            <label class="headinglabel required">Telephone No</label>
                            @Html.TextBoxFor(model => model.ConsignorPhone, new { @class = "form-control textright", @required = "true", @placeholder = "Telephone" })
                        </div>

                        <div class="col-md-3">
                            <label class="headinglabel required">Flat/Building</label>
                            @Html.TextBoxFor(model => model.ConsignorAddress1_Building, new { @class = "form-control txttarget", @required = "true", @placeholder = "Flat/Building" })
                        </div>

                        <div class="col-md-3">
                            <label class="headinglabel required">Street</label>
                            @Html.TextBoxFor(model => model.ConsignorAddress2_Street, new { @class = "form-control txttarget", @required = "true", @placeholder = "Street" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Pincode</label>
                            @Html.TextBoxFor(model => model.ConsignorAddress3_PinCode, new { @class = "form-control text-right txttarget", @required = "true", @placeholder = "PinCode" })
                        </div>
                    </div>
                    <div class="row no-margin" style="padding-top: 10px" id="divcustomer3">
                        <div class="col-md-3">
                            <label class="headinglabel required">Fax</label>
                            @Html.TextBoxFor(model => model.ConsignorFax, new { @class = "form-control txttarget autocomplete", @required = "true", @placeholder="Consignor Fax" )
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Location</label>
                            @Html.TextBoxFor(model => model.ConsignorLocationName, new { @class = "form-control txttarget autocomplete", @required = "true", @onFocus = "geolocate1()", @placeholder = "Location" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Origin City</label>
                            @Html.TextBoxFor(model => model.ConsignorCityName, new { @class = "form-control txttarget", @required = "true", @onFocus = "geoCitylocate1()" })
                            @*<input class="form-control" id="ConsignorCityName" name="ConsignorCityName" type="text" readonly />*@
                            @*@Html.DropDownListFor(model => model.origincity, new SelectList(@ViewBag.City, "CityID", "City"), "Select", new { @class = "form-control" })*@
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Origin Country</label>
                            @Html.TextBoxFor(model => model.ConsignorCountryName, new { @class = "form-control txttarget", @required = "true", @onFocus = "geoCountrylocate1()" })
                            @*<input class="form-control" id="ConsignorCountryName" name="ConsignorCountryName" type="text" readonly />*@
                            @*@Html.DropDownListFor(model => model.origincountry, new SelectList(@ViewBag.Country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                        </div>

                    </div>

                </div>
            </div>


            <div class="col-md-12 detailBox">
                <div class="bg_box">
                    <div class="col-md-12">
                        <h3 style="color:white; margin-top:5px; margin-bottom: 0;">RECEIVER/CONSIGNEE DETAILLS</h3><hr />
                    </div>
                    <div class="clearfix"></div>
                    <div class="row no-margin" style="padding-top: 10px; ">
                        <div class="col-md-6">
                            <label class="headinglabel required">Name</label>
                            @Html.TextBoxFor(model => model.Consignee, new { @class = "form-control txttarget", @required = "true" })
                        </div>
                        <div class="col-md-6">
                            <label class="headinglabel required">Contact Person</label>
                            @Html.TextBoxFor(model => model.ConsigneeContact, new { @class = "form-control txttarget", @required = "true" })
                        </div>
                    </div>
                    <div class="row no-margin" style="padding-top: 10px">



                        <div class="col-md-3">
                            <label class="headinglabel required">Telephone No</label>
                            @Html.TextBoxFor(model => model.ConsigneePhone, new { @class = "form-control textright", @required = "true" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Flat/Building</label>
                            @Html.TextBoxFor(model => model.ConsigneeAddress1_Building, new { @class = "form-control txttarget", @required = "true" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel">Street</label>
                            @Html.TextBoxFor(model => model.ConsigneeAddress2_Street, new { @class = "form-control txttarget" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel">Pincode</label>
                            @Html.TextBoxFor(model => model.ConsigneeAddress3_PinCode, new { @class = "form-control txttarget" })
                        </div>
                    </div>

                    <div class="row no-margin" style="padding-top: 10px">
                        <div class="col-md-3">
                            <label class="headinglabel required">Fax</label>
                            @Html.TextBoxFor(model => model.ConsigneeFax, new { @class = "form-control txttarget", @required = "true", @placeholder = "Consignee Fax" })
                        </div>
                        <div class="col-md-6">
                            <label class="headinglabel required">Consignee Location</label>
                            @Html.TextBoxFor(model => model.ConsigneeLocationName, new { @class = "form-control txttarget", @onFocus = "geolocate()", @required = "true" })
                            @*<input class="form-control  " id="ConsigneeLocationName" name="ConsigneeLocationName" onFocus="geolocate()" type="text" />*@
                            @*@Html.TextBoxFor(model => model.destlocation, new { @class = "form-control txttarget" })*@
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Consignee City</label>
                            @Html.TextBoxFor(model => model.ConsigneeCityName, new { @class = "form-control txttarget", @onFocus = "geoCitylocate()", @required = "true" })
                            @*<input class="form-control" id="ConsigneeCityName" name="CityName" type="text" onFocus="geoCitylocate()" />*@
                            @*@Html.DropDownListFor(model => model.destinationCity, new SelectList(@ViewBag.City, "CityID", "City"), "Select", new { @class = "form-control" })*@
                        </div>

                        <div class="col-md-3">
                            <label class="headinglabel required">Consignee Country</label>
                            @Html.TextBoxFor(model => model.ConsigneeCountryName, new { @class = "form-control txttarget", @onFocus = "geoCountrylocate()", @required = "true" })
                            @*<input class="form-control" id="ConsigneeCountryName" name="ConsigneeCountryName" type="text" onFocus="geoCountrylocate()" />*@
                            @*@Html.DropDownListFor(model => model.destinationCountry, new SelectList(@ViewBag.Country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row no-margin">
            <div class="col-md-12 details1">
                <div class="bg_box1">
                    <div class="col-md-12">
                        <h3 style="color:white">SHIPMENT DETAILS</h3><hr />
                    </div>

                    <div class="clearfix"></div>

                    <div class="row no-margin" style="padding-top: 10px">
                        <div class="col-md-2">
                            <label class="headinglabel required">Item</label>
                            @Html.TextBoxFor(model => model.ItemName, new { @class = "form-control txttarget", @required = "true", @style = "", @placeholder = "Item  Name" })
                            @Html.HiddenFor(model => model.ItemId)
                        </div>
                        <div class="col-md-2">
                            @Html.TextBoxFor(model => model.PackageName, new { @class = "form-control txttarget", @required = "true", @style = "", @placeholder = "Package Name" })
                            @Html.HiddenFor(model => model.PackageId)
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel required">No. of Package</label>
                            @Html.TextBoxFor(model => model.Pieces, new { @class = "form-control textright", @onkeypress = "return isNumberKey1(event)", @required = "true", @maxlength = 13 })
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel required">Weight</label>
                            @Html.TextBoxFor(model => model.Weight, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setThreeNumberDecimal(this)", @required = "true", @minimum = 0.1 })
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel required">Volume</label>
                            @Html.TextBoxFor(model => model.Volume, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setThreeNumberDecimal(this)", @required = "true", @minimum = 0.1 })
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel required">Volume Weight</label>
                            @Html.TextBoxFor(model => model.VolumeWeight, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setThreeNumberDecimal(this)", @required = "true", @minimum = 0.1 })
                        </div>

                        <div class="col-md-1">
                            <label class="headinglabel required">Customs Invoice Value</label>
                            @Html.TextBoxFor(model => model.CustomsInvoiceValue, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setTwoNumberDecimal(this)", @required = "true", @minimum = 0.1 })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Document Made</label>
                            @Html.DropDownListFor(model => model.DocumentTypeId, new SelectList(@ViewBag.Movement, "MovementID", "MovementType"), "Select", new { @class = "form-control", @required = "true" })
                        </div>

                        <div class="col-md-1">
                            <label class="headinglabel required">Freight</label>
                            @Html.TextBoxFor(model => model.Freight, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setThreeNumberDecimal(this)", @required = "true", @minimum = 0.1 })
                        </div>
                        <div class="col-md-1">
                            <label class="headinglabel required">Import Export Code</label>
                            @Html.TextBoxFor(model => model.ExportImportCode, new { @class = "form-control", @required = "true" })
                        </div>
                        <div class="col-md-3 checkboxdesign" style="padding-top: 20px">
                            @Html.CheckBox("ISNCND", new { @name = "ISNCND" }) &nbsp;
                            <label class="headinglabel">NCND</label>
                        </div>
                        <div class="col-md-3 checkboxdesign" style="padding-top: 20px">
                            @Html.CheckBox("SeparateDoc", new { @name = "SeparateDoc" }) &nbsp;
                            <label class="headinglabel">Separate Docs</label>
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Despatch Date</label>
                            @Html.TextBoxFor(model => model.DespatchDate, new { @class = "form-control", @required = "true" })
                            @Html.ValidationMessageFor(model => model.DespatchDate, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Route</label>
                            @Html.DropDownListFor(model => model.RouteID, new SelectList(@ViewBag.Route, "RouteID", "RouteName"), "Select", new { @class = "form-control", @required = "true" })
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel required">Movement Type</label>
                            @Html.DropDownListFor(model => model.MovementTypeID, new SelectList(@ViewBag.Movement, "MovementID", "MovementType"), "Select", new { @class = "form-control", @required = "true" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Product Type</label>
                            @Html.DropDownListFor(model => model.ProductTypeID, new SelectList(@ViewBag.ProductType, "ProductTypeID", "ProductName"), "Select", new { @class = "form-control", @required = "true" })
                        </div>
                        <div class="col-md-3">
                            <label class="headinglabel required">Parcel Type</label>
                            @Html.DropDownListFor(model => model.ParcelTypeID, new SelectList(@ViewBag.parceltype, "ID", "ParcelType1"), "Select", new { @class = "form-control", @required = "true" })
                        </div>
                        

                    </div>
                        <div class="row no-margin" style="padding-top:10px;">
                            <div class="col-md-12">
                                <label class="headinglabel">Remarks</label>
                                @Html.TextBoxFor(model => model.remarks, new { @class = "form-control txttarget" })
                            </div>
                        </div>
                        <div class="row no-margin" style="padding-top:10px">

                        </div>
                    </div>


            </div>


            <div class="col-md-12 details1" id="divCostUpdate">
                <div class="bg_box1">
                    <h3 style="color:white">COST UPDATION</h3><hr />


                    <div class="row no-margin" style="padding-top: 10px">


                        <div class="col-md-2">
                            <label class="headinglabel required">Customer Rate Type</label>
                            @Html.DropDownListFor(model => model.CustomerRateTypeID, new SelectList(@ViewBag.customerrate, "CustomerRateTypeID", "CustomerRateType1"), "Select", new { @class = "form-control", @required = "true" })
                        </div>



                        <div class="col-md-2">
                            <label class="headinglabel required">Courier Charge</label>
                            @Html.TextBoxFor(model => model.CourierCharge, new { @class = "form-control textright", @onchange = "setTwoNumberDecimal(this)", @required = "true" })
                        </div>

                        <div class="col-md-2">
                            <label class="headinglabel">Material Cost</label>
                            @Html.TextBoxFor(model => model.materialcost, new { @class = "form-control txtright textright", @onkeypress = "return isNumberKey(event)", @onchange = "setTwoNumberDecimal(this)" })
                        </div>



                        <div class="col-md-2">
                            <label class="headinglabel">Total Other Charge</label>
                            @Html.TextBoxFor(model => model.OtherCharge, new { @class = "form-control textright", @onkeypress = "return isNumberKey(event)", @onchange = "setTwoNumberDecimal(this)" })
                            @*<input type="button" style="float:right" value="O" onclick="ShowOtherChargesModal()" />*@
                        </div>
                        <div class="col-md-2">
                            @*<label class="headinglabel">Add Other Charge</label>*@
                            <a href="javascript:void(0)" class="Allocate" title="Add Other Charge"><i class="fa fa-bars"></i></a>
                        </div>
                        <div class="col-md-2">
                            <label class="headinglabel">Total</label>
                            @Html.TextBoxFor(model => model.totalCharge, new { @class = "form-control textright", @onchange = "setTwoNumberDecimal(this)", @readonly = "readonly" })
                        </div>

                    </div>



                </div>

               

            </div>
        </div>
             

                <div class="row no-margin" style="padding-top: 10px">
                    <div class="col-md-12 btn-right">

                        <input type="submit" value="Save" class="btn btn-primary btnwidth" id="btnsave" />&nbsp;&nbsp;<a href='@Url.Action("Index", "QuickAWB", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


                    </div>
                </div>

                <div style="width:100%;height:3000px; color:black;opacity:0.6;z-index:5;display:none;background-color: black;position:absolute;top:0;left:0;" id="popupbackground">

                </div>

                <div class="modal fade" id="popup" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content" style="border-radius:5px">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="exampleModalLabel">
                                    Other Charges
                                </h4>
                            </div>

                            <div class="modal-body">
                                <div class="container-fluid">
                                    <div class="row">

                                        <input type="hidden" value="@Model.otherchargesVM.Count" id="RowCount" />
                                        <table id="ExpAllocationTable" class="table table-bordered table-responsive">
                                            <thead>
                                                <tr>
                                                    <th>Other Charge</th>
                                                    <th>Amount </th>
                                                    <th>Delete </th>
                                                </tr>
                                            </thead>
                                            <tbody id="OtherChargeTable">
                                                @foreach (var item in Model.otherchargesVM)
                                                {
                                                    <tr>
                                                        <td>
                                                            @item.OtherChargeName
                                                            <input type="hidden" class="OChargeID" name="otherchargesVM[@otherchargecount].OtherChargeID" value="@item.OtherChargeID" />
                                                        </td>
                                                        <td style="text-align:right">                                                            
                                                            @LTMSV2.Models.CommanFunctions.GetDecimalFormat(@item.Amount, "2")
                                                            <input type="hidden" id="Amount_@otherchargecount" name="otherchargesVM[@otherchargecount].Amount" class="ExpAllocatedAmountDetails" value="@item.Amount" />
                                                        </td>
                                                        <td style="text-align: center;">
                                                            <a href="javascript:void(0)" id="DeleteAllocationRow"  ><i class="fa fa-times"></i></a>
                                                        </td>
                                                    </tr>
                                                    otherchargecount++;
                                                }
                                            </tbody>
                                            <tfoot>
                                                <tr>
                                                    <td>
                                                        @Html.DropDownList("OtherChargeID", new SelectList(@ViewBag.OtherCharge, "OtherChargeID", "OtherCharge1"), "Select", new { @class = "form-control" })
                                                        @*<input type="text" id="OtherChargeName" value="" class="form-control" autocomplete="off" style="height:27px;" />
                                                <input type="hidden" id="OtherChargeID" value="" class="form-control" autocomplete="off" />*@
                                                        <input type="hidden" id="OtherChargeAcHeadID" value="" class="form-control" autocomplete="off" />
                                                    </td>
                                                    <td>
                                                        <input type="text" class="text-right form-control txtNum" id="ExpAmount" value="0" />
                                                    </td>
                                                    <td style="text-align:center;">
                                                        <button type="button" style="height: 25px !important;margin-top:2px;border:0;    background: #35b8eb;color:#fff; vertical-align: middle;" index="1" id="AddExpAllocation" class="addmore">+</button>&nbsp;&nbsp;
                                                        @*<button type="button" style="height: 25px !important;margin-top:14px; vertical-align: middle;border:none" id="AllocationClose"><i style="font-size:21px" class="fa fa-times"></i></button>*@
                                                    </td>
                                                </tr>
                                            </tfoot>
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer" style="padding-top: 5px">
                                <button type="button" id="AllocationClose" class="btn btn-default" data-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

                }
                <script type="text/javascript">
                                $(document).ready(function () {

                                    $('#AddExpAllocation').click(function () {
                                        var Total = 0;
                                        var MainTotal = 0;
                                        var selectedval = $("#OtherChargeID").val();
                                        var exists = false;
                                        debugger;
                                        if (selectedval == 0) {
                                            alert('Please select Other Charge Name!');
                                            return;
                                        }
                                        $('#OtherChargeTable').find('.ExpAllocatedAmountDetails').each(function () {
                                            debugger;
                                            if (isNaN(parseFloat($(this).val())) === false) {
                                                Total += parseFloat($(this).val());
                                            }
                                        });

                                        $('#OtherChargeTable').find('.OChargeID').each(function () {
                                            debugger;
                                            if ($(this).val() === selectedval) {
                                                exists = true;
                                                alert('Already this charge added!');
                                                return;
                                            }
                                        });
                                        if (exists == true)
                                            return;

                                        if ($('#ExpAmount').val() == '' || $('#ExpAmount').val() == 0 || $('#ExpAmount').val() == undefined) {
                                            alert('Enter Amount!')
                                            return;
                                        }
                                        if (isNaN(parseFloat($('#ExpAmount').val())) === false) {
                                            Total += parseFloat($('#ExpAmount').val());
                                        }
                                        $('#OtherCharge').val(Total);
                                        var x = $("#CourierCharge").val();
                                        //var y = $("#PackingCharge").val();
                                        var z = $("#OtherCharge").val();
                                        //var a = $("#CustomCharge").val();
                                        var tot = parseFloat(x) + parseFloat(z); // + parseFloat(a); parseFloat(y)

                                        $("#totalCharge").val(tot.toFixed(2));
                                        //if (isNaN(parseFloat($('#amount').val())) === false) {
                                        //    MainTotal += parseFloat($('#amount').val());
                                        //}
                                        //if (Total > MainTotal) {
                                        //    alert('Amount cannot exceed total allocated amount');
                                        //    return;
                                        //}

                                        var othercharngename = $("#OtherChargeID option:selected").text();
                                        @*if (@otherchargecount>0)
                                            $('#RowCount').val(@otherchargecount);*@

                                        var RowCount = parseInt($('#RowCount').val());
                                        var RowHtml = '<tr><td>' + othercharngename + '<input type="hidden" class="OChargeID"  name="otherchargesVM[' + RowCount + '].OtherChargeID" value="' + $('#OtherChargeID').val() + '"/></td>';
                                        RowHtml = RowHtml + '<td>' + $('#ExpAmount').val() + '<input type="hidden" id="' + RowCount + '_Amount" name="otherchargesVM[' + RowCount + '].Amount" class="ExpAllocatedAmountDetails" value="' + $('#ExpAmount').val() + '"/></td>';
                                        RowHtml = RowHtml + '<td><a href="javascript:void(0)"  class="deleteallocrow" id="DeleteAllocationRow"><i class="fa fa-times"></i></a></td>';
                                        RowHtml = RowHtml + '</tr>';
                                        $('#OtherChargeTable').append(RowHtml);
                                        $('#RowCount').val(RowCount + 1);
                                        ///otherchargecount++;
                                        $("#OtherChargeName").val('');
                                        $("#OtherChargeID").val(0);
                                        $("#ExpAmount").val(0);
                                        $('#OtherChargeName').focus()
                                    });

                                    $('.txtNum').blur(function () {
                                        if (isNaN(parseInt($(this).val()))) {
                                            $(this).val('0.00');
                                        } else {
                                            var amt = parseFloat($(this).val());
                                            $(this).val(amt.toFixed(2));
                                        }
                                    });

                                    $('#OtherChargeTable').on("click", "#DeleteAllocationRow", function () {

                                        $(this).parent().parent().remove();
                                    });

                                    $('#details').on("click", "#DeleteAllocationRow", function () {

                                        $(this).parent().parent().remove();
                                    });
                                });
                                function ClearData() {
                                    $("#ReceivedFrom").val('');
                                    $("#SelectedReceivedFrom").val(0);
                                    $("#amount").val('');
                                    $("#remark1").val('');
                                    $("#AcHeadAllocation").val('');
                                    $("#SelectedAcHeadAllocation").val(0);
                                    $("#ExpAmount").val('');
                                    $("#ExpAllocationTable").find("tr:gt(0)").remove();
                                }
                </script>




                <div class="modal fade" id="StatusModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content" style="border-radius: 5px;">
                            <div class="modal-header" style="background-color: #f5f5f5;">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="exampleModalLabel">
                                    Change Status
                                </h4>
                            </div>

                            <div class="modal-body">
                                <div class="container-fluid">
                                    <div class="row" style="padding-top: 5px">
                                        <div class="col-sm-12">
                                            <div class="row">
                                                <div class="col-xs-5 col-sm-3">
                                                    Shipment Status
                                                </div>
                                                <div class="col-xs-7 col-sm-9">
                                                    @Html.DropDownList("StatusTypeId", new SelectList(@ViewBag.StatusTypeList, "ID", "Name", 0), "Select", new { @class = "form-control", @id = "ChangeStatusTypeId", @name = "ChangeStatusTypeId" })
                                                </div>
                                            </div>
                                            <div class="row" style="margin-top:10px">
                                                <div class="col-xs-5 col-sm-3">
                                                    Courier Status
                                                </div>
                                                <div class="col-xs-7 col-sm-9">
                                                    @Html.DropDownList("CourierStatusId", new SelectList(@ViewBag.CourierStatusList, "CourierStatusID", "CourierStatus", @ViewBag.CourierStatusId), "Select", new { @class = "form-control", @id = "ChangeCourierStatusId", @name = "ChangeCourierStatusId" })
                                                    @*<input type="text" id="ChangeCourierStatusId" class="form-control" value="2" width="100%" />*@
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer" style="padding-top: 5px">
                                <input type="hidden" id="hdnCountryID" />
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" name="Command" value="SaveStatus" class="btn btn-primary" id="btnsavestatus">Save</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="CustomerNotifiyModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #f5f5f5;">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="exampleModalLabel">
                                    Customer Notification
                                </h4>
                            </div>

                            <div class="modal-body">
                                <div class="container-fluid">
                                    <div class="row" style="padding-top: 5px">
                                        <div class="col-md-12">
                                            <div class="row">
                                                <div class="col-xs-5 col-sm-3">
                                                    To Customer
                                                </div>
                                                <div class="col-xs-7 col-sm-9">
                                                    <input type="hidden" id="hdnNotificationId" value="0" />
                                                    <input class="form-control" type="text" id="txtcustomername" />
                                                </div>
                                            </div>
                                            <div class="row" style="margin-top:10px;">
                                                <div class="col-xs-5 col-sm-3">
                                                    Customer Email
                                                </div>
                                                <div class="col-xs-7 col-sm-9">
                                                    <input class="form-control" type="text" id="txtcustomeremail" />
                                                </div>
                                            </div>
                                            <div class="row">
                                                <div class="col-md-4 checkboxdesign">
                                                    @Html.CheckBox("SMS", new { @name = "SMS" })
                                                    <label class="headinglabel">SMS</label>
                                                </div>
                                                <div class="col-md-4 checkboxdesign">
                                                    @Html.CheckBox("Email", new { @name = "Email" })
                                                    <label class="headinglabel">Email</label>
                                                </div>
                                                <div class="col-md-4 checkboxdesign">
                                                    @Html.CheckBox("WhatsApp", new { @name = "WhatsApp" })
                                                    <label class="headinglabel">Whats App</label>
                                                </div>
                                            </div>
                                            <div class="row" style="margin-top:10px">
                                                <div class="col-xs-5 col-sm-3">
                                                    Enter your Message
                                                </div>
                                                <div class="col-xs-7 col-sm-9">
                                                    <textarea id="notifymessage" cols="65" rows="5"></textarea>
                                                </div>
                                            </div>
                                            <div class="row no-margin" style="padding-top:10px">

                                                <div class="col-md-12">
                                                    <table id="notificationdetails" class="table table-responsive table-bordered" style="background-color:white">
                                                        <thead>
                                                        <th>S No.</th>
                                                        <th>Message</th>
                                                        <th>Date</th>
                                                        <th>Employee Name</th>
                                                        </thead>
                                                        <tbody id="notificationdetailsbody"></tbody>
                                                    </table>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer" style="padding-top: 5px">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" name="Command" value="SaveStatus" class="btn btn-primary" id="btncustomernotifysave" onclick="savecustomernotification();">Save</button>
                            </div>
                        </div>
                    </div>
                </div>


                <div class="modal fade" id="StaffNotesModal" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header" style="background-color: #f5f5f5;">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title" id="exampleModalLabel">
                                    Staff Notes
                                </h4>
                            </div>

                            <div class="modal-body">
                                <div class="container-fluid">
                                    <div class="row" style="padding-top: 5px">
                                        <div class="col-sm-12">
                                            <div class="row" style="margin-top:10px">
                                                <div class="col-xs-12 col-sm-12">
                                                    <input type="hidden" id="hdnStaffNotesId" value="0" />
                                                    <label for="staffnotes" class="control-label">Enter your Notes</label>
                                                    <textarea id="staffnotes" class="col-md-12" cols="65" rows="5"></textarea>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="row no-margin" style="padding-top:10px">

                                        <div class="col-md-12">
                                            <table id="notesdetails" class="table table-responsive table-bordered" style="background-color:white">
                                                <thead>
                                                <th>S No.</th>
                                                <th>Notes</th>
                                                <th>Date</th>
                                                <th>Employee Name</th>
                                                </thead>
                                                <tbody id="notesdetailsbody"></tbody>
                                            </table>
                                        </div>
                                    </div>

                                </div>
                            </div>
                            <div class="modal-footer" style="padding-top: 5px">
                                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                <button type="button" name="Command" value="SaveNotes" class="btn btn-primary" id="btnstaffnotessave" onclick="savestaffnotes()">Save</button>
                            </div>
                        </div>
                    </div>
                </div>



</section>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCexhtncgr1cTUh0hzKOrK_GsS_tifAEns&libraries=places&callback=initAutocomplete" async defer></script>