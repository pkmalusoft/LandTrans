@model LTMSV2.Models.BranchVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}
    <script type="text/javascript">
        //    google.maps.event.addDomListener(window, 'load', function () {
        //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
        //        google.maps.event.addListener(places, 'place_changed', function () {
        //            var place = places.getPlace();
        //    var address = place.formatted_address;
        //    var latitude = place.geometry.location.A;
        //    var longitude = place.geometry.location.F;
        //    var mesg = "Address: " + address;
        //    mesg += "\nLatitude: " + latitude;
        //    mesg += "\nLongitude: " + longitude;
        //    alert(mesg);
        //});
        //    });

        var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search predictions to
            // geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
                document.getElementById('autocomplete'), { types: ['geocode'] });

            // Avoid paying for data that you don't need by restricting the set of
            // place fields that are returned to just the address components.
            autocomplete.setFields(['address_component']);

            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
               autocomplete.addListener('place_changed', fillInAddress);


            autocompleteCity = new google.maps.places.Autocomplete(
                document.getElementById('CityName'), { types: ['geocode'] });

            autocompleteCountry = new google.maps.places.Autocomplete(
                document.getElementById('CountryName'), { types: ['geocode'] });

        }

        function fillInAddress() {
            debugger;
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();
            console.log(place.address_components);

            //for (var component in componentForm) {
            //  document.getElementById(component).value = '';
            //  document.getElementById(component).disabled = false;
            //}

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            //for (var i = 0; i < place.address_components.length; i++) {
            //  var addressType = place.address_components[i].types[0];
            //  if (componentForm[addressType]) {
            //    var val = place.address_components[i][componentForm[addressType]];
            //    document.getElementById(addressType).value = val;
            //  }
            //      }

            var postcode = '';
            $.each(place.address_components, function (index, component) {
                var types = component.types;
                $.each(types, function (index, type) {
                    if (type == 'postal_code') {
                        postcode = component.long_name;
                    }
                    else if (type == 'locality') {
                        //$('#hdncity').val(component.long_name);
                        $('#CityName').val(component.long_name);
                    }
                    else if (type == 'country') {
                        $('#CountryName').val(component.long_name);
                    }

                    //if(type == 'administrative_area_level_1') {
                    //state = component.short_name;
                    //    }
                });
            });

        }

        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }

        function geoCitylocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocompleteCity.setBounds(circle.getBounds());
                });
            }
        }

        function geoCountrylocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle(
                        { center: geolocation, radius: position.coords.accuracy });
                    autocompleteCountry.setBounds(circle.getBounds());
                });
            }
        }
    </script>


<script type="text/javascript">
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode != 46 && charCode > 31
            && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }
    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });

        $("#BranchName").focus();

        $("#btnsave").click(function () {
            var branch = $("#BranchName").val();
            var add1 = $("#Address1").val();
            var cou = $("#CountryName").val(); // $("#CountryID option:selected").val();
            var city = $("#CityName").val(); // $("#CityID option:selected").val();
            var loc = $("#LocationName").val(); // option:selected").val();
            var key = $("#KeyPerson").val();
            var des = $("#DesignationID option:selected").val();
            var yearid = $("#AcFinancialYearID").val();

            var phone = $("#Phone").val();
            var mob = $("#MobileNo1").val();
            var em = $("#EMail").val();
            var branchpre = $("#BranchPrefix").val();
            var curr = $("#CurrencyID option:selected").val();

            if (branch == "") {
                $("#validations").show();
                return false;
            }
            else if (add1 == "") {
                $("#validations").show();
                return false;
            }
            else if (cou == "") {
                $("#validations").show();
                return false;
            }
            else if (city == "") {
                $("#validations").show();
                return false;
            }
            else if (loc == "") {
                $("#validations").show();
                return false;
            }
            else if (key == "") {
                $("#validations").show();
                return false;
            }
            else if (key == "") {
                $("#validations").show();
                return false;
            }
            else if (phone == "") {
                $("#validations").show();
                return false;
            }
            else if (mob == "") {
                $("#validations").show();
                return false;
            }
            else if (em == "") {
                $("#validations").show();
                return false;
            }
            else if (branchpre == "") {
                $("#validations").show();
                return false;
            }
            else if (curr == "") {
                $("#validations").show();
                return false;
            }
            else if (cou == "") {
                $("#validations").show();
                return false;
            }
            else if (yearid == 0 || yearid == "" ||yearid == null)
            {
                $("#validations").show();
                return false;
            }
            else {
                $("#validations").hide();
                return true;
            }
        });

              

    });
</script>

<section class="content-header">
    <h1 class="headingfont">Branch Master - Modify</h1>

</section>


<section class="content">
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
      <div id="validations" style="color:red;margin-left:7px;display:none">* Please fill mandatory fields</div>
    <fieldset>
       

     <div class="row no-margin"> 
               
       

      <div class="col-md-3">
        <label class="headinglabel required">Branch Name</label>
          @Html.HiddenFor(model=>model.BranchID)
          @Html.HiddenFor(model=>model.AcCompanyID)
                 @Html.TextBoxFor(model => model.BranchName, new {@class="form-control txttarget" })
            @Html.ValidationMessageFor(model => model.BranchName)
                     
                 </div>

        <div class="col-md-3">
                          <label class="headinglabel required">Address1</label>
             @Html.TextBoxFor(model => model.Address1, new {@class="form-control txttarget" })
            @Html.ValidationMessageFor(model => model.Address1)
                 </div>

        <div class="col-md-3">
                          <label class="headinglabel">Address2</label>
             @Html.TextBoxFor(model => model.Address2, new {@class="form-control txttarget" })
            @Html.ValidationMessageFor(model => model.Address2)
                 </div>
            <div class="col-md-3">
                          <label class="headinglabel">Address3</label>
                   @Html.TextBoxFor(model => model.Address3, new {@class="form-control txttarget " })
            @Html.ValidationMessageFor(model => model.Address3)
                     
                 </div>

           </div>

     <div class="row no-margin" >

         <div class="col-md-3">
             <label class="headinglabel required">Location</label>
             @Html.TextBoxFor(model => model.LocationName, new { @class = "form-control", id = "autocomplete", @onFocus = "geolocate()" })
             @Html.ValidationMessageFor(model => model.LocationName)
             @* @Html.DropDownList("LocationID", String.Empty)
            @Html.ValidationMessageFor(model => model.LocationID)*@
         </div>

         <div class="col-md-3">
             <label class="headinglabel required">Country</label>
             @Html.TextBoxFor(model => model.CountryName, new { @class = "form-control", id = "CountryName", @onFocus = "geoCountrylocate()" })
             @Html.ValidationMessageFor(model => model.CountryName)

         </div>

         <div class="col-md-3">
             <label class="headinglabel required">City</label>

             @Html.TextBoxFor(model => model.CityName, new { @class = "form-control", id = "CityName", @onFocus = "geoCitylocate()" })
             @Html.ValidationMessageFor(model => model.CityName)
         </div>



         <div class="col-md-3">
             <label class="headinglabel required">Key Person</label>
             @Html.TextBoxFor(model => model.KeyPerson, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.KeyPerson)

         </div>
     </div>
        
     <div class="row no-margin" >


         <div class="col-md-3">
             <label class="headinglabel required">Designation</label>
             @Html.DropDownListFor(model => model.DesignationID, new SelectList(@ViewBag.designation, "DesignationID", "Designation1"), "Select", new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.DesignationID)

         </div>

         <div class="col-md-3">
             <label class="headinglabel required">Phone</label>
             @Html.TextBoxFor(model => model.Phone, new { @class = "form-control textright" })
             @Html.ValidationMessageFor(model => model.Phone)

         </div>

         <div class="col-md-3">
             <label class="headinglabel required">Mobile No 1</label>
             @Html.TextBoxFor(model => model.MobileNo1, new { @class = "form-control textright" })
             @Html.ValidationMessageFor(model => model.MobileNo1)

         </div>

         <div class="col-md-3">
             <label class="headinglabel required">EMail</label>
             @Html.TextBoxFor(model => model.EMail, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.EMail)

         </div>
     </div>

     <div class="row no-margin" >

         <div class="col-md-3">
             <label class="headinglabel">Website</label>
             @Html.TextBoxFor(model => model.Website, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.Website)

         </div>
         <div class="col-md-3">
             <label class="headinglabel required">Currency</label>
             @Html.DropDownListFor(model => model.CurrencyID, new SelectList(@ViewBag.currency, "CurrencyID", "CurrencyName"), "Select", new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.CurrencyID)

         </div>

         <div class="col-md-3">
             <label class="headinglabel required">Branch Prefix</label>
             @Html.TextBoxFor(model => model.BranchPrefix, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.BranchPrefix)

         </div>
         <div class="col-md-3">
             <label class="headinglabel">Consignment Format</label>
             @Html.TextBoxFor(model => model.ConsignmentFormat, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.ConsignmentFormat)

         </div>

     </div>
     <div class="row no-margin" >


         <div class="col-md-3 awbno">
             <label class="headinglabel">Invoice Prefix</label>
             @Html.TextBoxFor(model => model.InvoicePrefix, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.InvoicePrefix)

         </div>
         <div class="col-md-3 awbno">
             <label class="headinglabel">Invoice Format</label>
             @Html.TextBoxFor(model => model.InvoiceFormat, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.InvoiceFormat)

         </div>
         <div class="col-md-3">
             <label class="headinglabel">VAT Registration No.</label>
             @Html.TextBoxFor(model => model.VATRegistrationNo, new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.VATRegistrationNo)

         </div>
         <div class="col-md-3">
             <label class="headinglabel">VAT %</label>
             @Html.TextBoxFor(model => model.VATPercent, new { @class = "form-control text-right", @onkeypress = "return isNumberKey(event)" })
             @Html.ValidationMessageFor(model => model.VATPercent)

         </div>
         <div class="col-md-3">
             <label class="headinglabel">VAT Account Head</label>
             @Html.DropDownListFor(model => model.VATAccountId, new SelectList(@ViewBag.heads, "AcHeadID", "AcHead"), "Select", new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.VATAccountId)
         </div>

         <div class="col-md-3">
             <label class="headinglabel required">Start Financial Year</label>
             @Html.DropDownListFor(model => model.AcFinancialYearID, new SelectList(@ViewBag.years, "AcFinancialYearID", "ReferenceName"), "Select", new { @class = "form-control" })
             @Html.ValidationMessageFor(model => model.AcFinancialYearID)
         </div>


         <div class="col-md-3 checkboxdesign" >


             @Html.CheckBox("StatusAssociate", new { @name = "StatusAssociate" })
             @Html.ValidationMessageFor(model => model.StatusAssociate)
             <label class="headinglabel">Status Associate</label>
         </div>



     </div>

        <div class="row no-margin" >
                        <div class="col-md-12 btn-right">
                           
                            <input type="submit" value="Update" class="btn btn-primary btnwidth" data-toggle="tooltip" title="Click here" id="btnsave" />
                               
                          
                        
                          <a href='@Url.Action("Index", "BranchMaster", new { id = 0 })' class="btn btn-danger btnwidth" data-toggle="tooltip" data-placement="right" title="Click here" style="margin-left:5px;">Cancel</a>
                               
                          
                        </div>
            </div>
    </fieldset>
}
    </section>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>