@model LTMSV2.Models.PickupRequestVM

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_TrueBookMstr.cshtml";
}

<script src="~/Content/NewCSS/plugins/jQuery/moment.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/js/bootstrap-datetimepicker.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.17.43/css/bootstrap-datetimepicker.min.css" />

<script type="text/javascript">


    $(function () {
        $('#ReadyTime').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    });

    $(function () {
        $('#CollectedTime').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    });

    //$(function () {
    //    $('#OfficeTimeFrom').datetimepicker({ format: 'HH:mm' });
    //});

    //$(function () {
    //    $('#OfficeTimeTo').datetimepicker({ format: 'HH:mm' });
    //});


</script>
<script type="text/javascript">
    $(document).ready(function () {
        $(":text").css({ "border-radius": "5px" });
        $("select").css({ "border-radius": "5px" });
        $("#divvehicle").css({ "display": "none" });

        var m_names = new Array("Jan", "Feb", "Mar",
"Apr", "May", "Jun", "Jul", "Aug", "Sep",
"Oct", "Nov", "Dec");

        var d = new Date();
        var curr_date = d.getDate();
        var curr_month = d.getMonth();
        var curr_year = d.getFullYear();

        var reqdate = curr_date + "-" + m_names[curr_month] + "-" + curr_year;

        $("#EnquiryDate").val(reqdate);

        setTimeout(function () {
            $("#CustomerID").trigger('change');
        },1000)
        
      
        if ($("#vehreq").is(':checked')) {
            $("#divvehicle").css({ "display": "block" });

        }
        else {
            $("#divvehicle").css({ "display": "none" });

        }


        
        $("#vehreq").click(function () {
            if ($("#vehreq").is(':checked')) {
                $("#divvehicle").css({ "display": "block" });

            }
            else {
                $("#divvehicle").css({ "display": "none" });

            }
        });


       
   
     
    


        $("#CustomerID").change(function () {
            $("#ConsignorCityName").empty();
            

            $("#ConsignorLocationName").empty();
            

            $.ajax({
                type: "POST",
                url: "/PickUpRequest/GetCustomerData",
                datatype: "Json",
                data: { id: $('#CustomerID').val() },
                success: function (data) {
                    $("#custcode").val(data.CustCode);
                    $("#Consignor").val(data.CustName);
                    $("#ConsignorContact").val(data.ContactPerson);
                    $("#ConsignorCountryName").val(data.CountryName);
                    $("#ConsignorCityName").val(data.CityName);
                    $("#ConsignorAddress").val(data.Address1);
                    $("#ConsignorAddress1").val(data.Address2);
                    $("#ConsignorAddress2").val(data.Address3);
                    $("#ConsignorPhone").val(data.Phone);

                    //BindCity(data.CityID, data.LocationID);
                }
            });



            function BindCity(x, y) {
                $.ajax({
                    type: "POST",
                    url: "/PickUpRequest/GetCity",
                    datatype: "Json",
                    data: { id: $("#ConsignerCountryId option:selected").val() },
                    success: function (data) {


                        $.each(data, function (index, value) {
                            $('#ConsignerCityId').append('<option value="' + value.CityID + '">' + value.City + '</option>');
                        });

                        $('#ConsignerCityId').val(x);

                        BindLocation(y);

                    }
                });
            }

            function BindLocation(y) {
                $.ajax({
                    type: "POST",
                    url: "/PickUpRequest/GetLocation",
                    datatype: "Json",
                    data: { id: $("#ConsignerCityId option:selected").val() },
                    success: function (data) {


                        $.each(data, function (index, value) {
                            $('#ConsignerLocationId').append('<option value="' + value.LocationID + '">' + value.Location + '</option>');
                        });

                        $('#ConsignerLocationId').val(y);

                    }
                });
            }



            //$("#ConsigneeCityId").change(function () {

            //    $("#ConsigneeLocationId").empty();
            //    $('#ConsigneeLocationId').append('<option value="0">Select</option>');
            //    $.ajax({
            //        type: "POST",
            //        url: "/PickUpRequest/GetLocation",
            //        datatype: "Json",
            //        data: { id: $("#ConsigneeCityId option:selected").val() },
            //        success: function (data) {


            //            $.each(data, function (index, value) {
            //                $('#ConsigneeLocationId').append('<option value="' + value.LocationID + '">' + value.Location + '</option>');
            //            });

            //        }
            //    });
            //});
        });

        $("#ConsigneeCountryID").change(function () {
            $("#ConsigneeCityId").empty();
            $('#ConsigneeCityId').append('<option value="0">Select</option>');
            $.ajax({
                type: "POST",
                url: "/PickUpRequest/GetCity",
                datatype: "Json",
                data: { id: $("#ConsigneeCountryID option:selected").val() },
                success: function (data) {


                    $.each(data, function (index, value) {
                        $('#ConsigneeCityId').append('<option value="' + value.CityID + '">' + value.City + '</option>');
                    });

                }
            });
        });

        $("#ConsignerCountryId").change(function () {
            $("#ConsignerCityId").empty();
            $('#ConsignerCityId').append('<option value="0">Select</option>');
            $.ajax({
                type: "POST",
                url: "/PickUpRequest/GetCity",
                datatype: "Json",
                data: { id: $("#ConsignerCountryId option:selected").val() },
                success: function (data) {


                    $.each(data, function (index, value) {
                        $('#ConsignerCityId').append('<option value="' + value.CityID + '">' + value.City + '</option>');
                    });

                }
            });
        });

        $("#VehicleID").change(function () {
            $("#Vehicle").val($("#VehicleID option:selected").text());

        });

        $("#btnsave").click(function () {
            debugger;
             $('#validations').html('* Please fill mandatory fields!');
            if ($("#CustomerID").val() == "") {
                $("#validations").show();
                return false;
            }
            else if ($("#Consignor").val() == "") {

                $("#validations").show();
                return false;
            }
            else if ($("#ConsignerCountryId").val() == "") {

                $("#validations").show();
                return false;
            }
            else if ($("#ConsignerCityId").val() == "0") {

                $("#validations").show();
                return false;
            }
            else if ($("#ConsigneeCityId").val() == "") {

                $("#validations").show();
                return false;
            }
            else if ($("#Consignee").val() == "") {

                $("#validations").show();
                return false;
            }
            else if ($("#ConsigneeCountryID").val() == "") {

                $("#validations").show();
                return false;
            }
            else if ($("#EnteredByID").val() == "") {

                $("#validations").show();
                return false;
            }
            else if ($('#CollectedEmpID').val() == "")
            {
                  $("#validations").show();
                return false;
            }
            else if ($('#EmployeeID').val() == "")
            {
                $("#validations").show();
                return false;
            }
           else if ($('#OfficeTimeFrom').val() > $('#OfficeTimeTo').val())
            {
                $("#validations").show();
                $('#validations').html('Invalid Office TimeTo!');
                return false;
            }
            else {
                $("#validations").hide();
                return true;
            }

          
        });
    });
</script>

<script type="text/javascript">
    //$(function () {
    //    $('#ReadyTime').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    //});

    //$(function () {
    //    $('#OfficeTimeFrom').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    //});

    //$(function () {
    //    $('#OfficeTimeTo').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });
    //});
    $(function () {

        $('#CollectedTime').datetimepicker({ format: 'DD-MM-YYYY HH:mm' });

    });

</script>
<script type="text/javascript">
    //    google.maps.event.addDomListener(window, 'load', function () {
    //        var places = new google.maps.places.Autocomplete(document.getElementById('txtPlaces'));
    //        google.maps.event.addListener(places, 'place_changed', function () {
    //            var place = places.getPlace();
    //    var address = place.formatted_address;
    //    var latitude = place.geometry.location.A;
    //    var longitude = place.geometry.location.F;
    //    var mesg = "Address: " + address;
    //    mesg += "\nLatitude: " + latitude;
    //    mesg += "\nLongitude: " + longitude;
    //    alert(mesg);
    //});
    //    });

    var placeSearch, autocomplete, autocompleteCity, autocompleteCountry;

    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search predictions to
        // geographical location types.
        autocomplete = new google.maps.places.Autocomplete(
            document.getElementById('autocomplete'), { types: ['geocode'] });

        // Avoid paying for data that you don't need by restricting the set of
        // place fields that are returned to just the address components.
        autocomplete.setFields(['address_component']);

        // When the user selects an address from the drop-down, populate the
        // address fields in the form.
        //    autocomplete.addListener('place_changed', fillInAddress);


        autocompleteCity = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCityName'), { types: ['geocode'] });

        autocompleteCountry = new google.maps.places.Autocomplete(
            document.getElementById('ConsigneeCountryName'), { types: ['geocode'] });

    }

    function fillInAddress() {
        debugger;
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();
        console.log(place.address_components);

        //for (var component in componentForm) {
        //  document.getElementById(component).value = '';
        //  document.getElementById(component).disabled = false;
        //}

        // Get each component of the address from the place details,
        // and then fill-in the corresponding field on the form.
        //for (var i = 0; i < place.address_components.length; i++) {
        //  var addressType = place.address_components[i].types[0];
        //  if (componentForm[addressType]) {
        //    var val = place.address_components[i][componentForm[addressType]];
        //    document.getElementById(addressType).value = val;
        //  }
        //      }

        var postcode = '';
        $.each(place.address_components, function (index, component) {
            var types = component.types;
            $.each(types, function (index, type) {
                if (type == 'postal_code') {
                    postcode = component.long_name;
                }
                else if (type == 'locality') {
                    //$('#hdncity').val(component.long_name);
                    $('#CityName').val(component.long_name);
                }
                else if (type == 'country') {
                    $('#CountryName').val(component.long_name);
                }

                //if(type == 'administrative_area_level_1') {
                //state = component.short_name;
                //    }
            });
        });

    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function geoCitylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCity.setBounds(circle.getBounds());
            });
        }
    }

    function geoCountrylocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle(
                    { center: geolocation, radius: position.coords.accuracy });
                autocompleteCountry.setBounds(circle.getBounds());
            });
        }
    }
</script>
<section class="content-header">
    <h1 class="headingfont">PickUp Request - Modify</h1>

</section>




<section class="content">

    @using (Html.BeginForm())
    {
        <div id="validations" style="color: red; margin-left: 7px; display: none">* Please fill mandatory fields</div>
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)    


<div class="row no-margin">

    @*       <div class="editor-label">
            @Html.LabelFor(model => model.CustomerID)
        </div>*@

    <div class="col-md-3">
        
            <label class="headinglabel">Request No</label>
            @*@Html.TextBox(model => model.EnquiryNo, @ViewBag.RequestNo, new { @class = "form-control" })*@
            @Html.TextBoxFor(model => model.EnquiryNo, new { @class = "form-control", @readonly = "readonly", @style = "font-weight:700;font-size:18px; " })

        </div>    
    <div class="col-md-3">
        <label class="headinglabel">Date</label>
        @Html.HiddenFor(model => model.EnquiryID)
        @Html.HiddenFor(model => model.EnquiryNo)
        @Html.HiddenFor(model => model.AWBNo)
        @Html.TextBoxFor(model => model.EnquiryDate, new { @class = "form-control" })
    </div>
        <div class="col-md-3">
            <label class="headinglabel">Request Type</label>
            <span class="form-control">Customer Login</span>

            @*      @Html.DropDownList("RequestSource", new List<SelectListItem>
            {
                new SelectListItem{ Text="Email", Value = "Email" },
                new SelectListItem{ Text="Fax", Value = "Fax" },
                new SelectListItem{ Text="Phone", Value = "Phone" },
                new SelectListItem{ Text="Walk-In", Value = "Walk-In" },

             },"Select", new { @class = "form-control" })*@


        </div>

        <div class="col-md-2">
            <label class="headinglabel required">Customer</label>
            @Html.DropDownListFor(model => model.CustomerID, new SelectList(@ViewBag.Customer, "CustomerID", "CustomerName"), "Select", new { @class = "form-control" })
        </div>

        <div class="col-md-1">
            <label class="headinglabel">Code</label>
            <input type="text" id="custcode" class="form-control" />
        </div>
    </div>

        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-3">
                <label class="headinglabel required">Shipper</label>
                @Html.TextBoxFor(model => model.Consignor, new { @class = "form-control txttarget" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Shipment Ready Time</label>
                @Html.TextBoxFor(model => model.ReadyTime, new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Office Time From</label>
                @Html.TextBoxFor(model => model.OfficeTimeFrom, new { @class = "form-control" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Office Time To</label>
                @Html.TextBoxFor(model => model.OfficeTimeTo, new { @class = "form-control" })
            </div>
            </div>
            
            <div class="row no-margin" style="padding-top: 10px">
                <div class="col-md-3">
                <label class="headinglabel">Contact Person</label>
                @Html.TextBoxFor(model => model.ConsignorContact, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Flat/Building</label>
                @Html.TextBoxFor(model => model.ConsignorAddress, new { @class = "form-control txttarget" })
            </div>

       
        <div class="col-md-3">
            <label class="headinglabel">Street Name</label>
            @Html.TextBoxFor(model => model.ConsignorAddress1, new { @class = "form-control txttarget" })
        </div>

                 <div class="col-md-3">
                <label class="headinglabel">Area</label>
                @Html.TextBoxFor(model => model.ConsignorAddress2, new { @class = "form-control txttarget" })
            </div>
</div>
        
        <div class="row no-margin" style="padding-top: 10px">
           

            <div class="col-md-3">
                <label class="headinglabel">Phone No</label>
                @Html.TextBoxFor(model => model.ConsignorPhone, new { @class = "form-control",@Disabled = "disabled" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Origin Country</label>
                @Html.TextBoxFor(model => model.ConsignorCountryName, new { @class = "form-control", @Disabled = "disabled" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Origin City</label>                
                @Html.TextBoxFor(model => model.ConsignorCityName, new { @class = "form-control", @Disabled="disabled"  })
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Origin Location</label>
               @* @Html.DropDownListFor(model => model.ConsignerLocationId, new SelectList(@ViewBag.Location, "LocationID", "Location"),"Select", new { @class = "form-control" })*@
                @Html.TextBoxFor(model => model.ConsignorLocationName, new { @class = "form-control txttarget",@Disabled = "disabled" })
            </div>
        </div>
        
        <div class="row no-margin" style="padding-top: 10px">
            

            <div class="col-md-3">
                <label class="headinglabel">Document Type</label>
                @Html.DropDownList("Document Type", new List<SelectListItem>
                {
                    new SelectListItem{ Text="Doc", Value = "Doc" },
                    new SelectListItem{ Text="Non Doc", Value = "Non Doc" },
                 
                   
                 },"Select", new { @class = "form-control" })
    
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Weight</label>
                @Html.TextBoxFor(model => model.Weight, new { @class = "form-control" })
            </div>

            <div class="col-md-3" style="padding-top:20px">
                  @Html.CheckBox("vehreq", new { @name = "vehreq" }) &nbsp
                    <label class="headinglabel">Vehicle Required</label>
                  
            </div>

             <div class="col-md-3" id="divvehicle">
                  <label class="headinglabel">Vehicle Type</label>
               @Html.DropDownListFor(model => model.VehicleID, new SelectList(@ViewBag.Vehicle, "VehicleID", "VehicleDescription"),"Select", new { @class = "form-control" })
                 @Html.HiddenFor(model => model.Vehicle)
            </div>

        </div>
        <div class="row no-margin">
            <div class="col-md-12">
                <h3 style="color:white">Consignee Details</h3>
                <hr />
            </div>
        </div>
        
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-3">
                <label class="headinglabel required">Consignee</label>
                @Html.TextBoxFor(model => model.Consignee, new { @class = "form-control txttarget" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Contact Person</label>
                @Html.TextBoxFor(model => model.ConsigneeContact, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Flat/Building</label>
                @Html.TextBoxFor(model => model.ConsigneeAddress, new { @class = "form-control txttarget" })
            </div>


            <div class="col-md-3">
                <label class="headinglabel">Street Name</label>
                @Html.TextBoxFor(model => model.ConsigneeAddress1, new { @class = "form-control txttarget" })
            </div>

        </div>
        
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-3">
                <label class="headinglabel">Area</label>
                @Html.TextBoxFor(model => model.ConsigneeAddress2, new { @class = "form-control txttarget" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel">Phone No</label>
                @Html.TextBoxFor(model => model.ConsigneePhone, new { @class = "form-control" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Destination Country</label>
                @*@Html.DropDownListFor(model => model.ConsigneeCountryID, new SelectList(@ViewBag.Country, "CountryID", "CountryName"), "Select", new { @class = "form-control" })*@
                @Html.TextBoxFor(model => model.ConsigneeCountryName, new { @class = "form-control", id = "ConsigneeCountryName", @onFocus = "geoCountrylocate()" })
            </div>

            <div class="col-md-3">
                <label class="headinglabel required">Destination City</label>
                @Html.TextBoxFor(model => model.ConsigneeCityName, new { @class = "form-control", id = "ConsigneeCityName", @onFocus = "geoCitylocate()" })                
            </div>


        </div>
             
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-3">
                <label class="headinglabel">Destination Location</label>
                @Html.TextBoxFor(model => model.ConsigneeLocationName, new { @class = "form-control", id = "autocomplete", @onFocus = "geolocate()" })
                @*@Html.TextBoxFor(model => model.ConsigneeLocationName, new { @class = "form-control txttarget" })*@

            </div>

            

        </div> 
        <hr>
        <div class="row no-margin" style="padding-top: 10px">

            <div class="col-md-3">
                <label class="headinglabel required">Entered By</label>
                @Html.TextBoxFor(model => model.employeename, new { @class = "form-control", Value = @ViewBag.empname })
                @Html.HiddenFor(model => model.EnteredByID)
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Assigned To</label>
                @Html.DropDownListFor(model => model.EmployeeID, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel required">Collected By</label>
                @Html.DropDownListFor(model => model.CollectedEmpID, new SelectList(@ViewBag.Employee, "EmployeeID", "EmployeeName"), "Select", new { @class = "form-control" })
            </div>
            <div class="col-md-3">
                <label class="headinglabel">Collected Time</label>
                @Html.TextBoxFor(model => model.CollectedTime, new { @class = "form-control" })
            </div>
        </div>
        <div class="row no-margin" style="padding-top: 10px">
            <div class="col-md-6">
                <label class="headinglabel">Remarks</label>
                @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control txttarget" })
            </div>
            <div class="col-md-6" style="padding-top:23px;">

                <input type="submit" value="Update" id="btnsave" class="btn btn-primary btnwidth" />&nbsp;&nbsp;<a href='@Url.Action("Index", "PickUpRequest", new { id = 0 })' class="btn btn-primary btnwidth" data-toggle="tooltip" data-placement="right" title="Click here">Cancel</a>


            </div>
        </div>


       
    }

</section>



<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIFoseM09VMMtw9s6E_h7LmRrdsZ0jkPU&libraries=places&callback=initAutocomplete" async defer></script>